///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СтандартныеПодсистемы

Функция СП_УстановкаПараметровСеанса(ИменаПараметровСеанса) Экспорт
	// Параметры сеанса, инициализация которых требует обращения к одним и тем же данным
	// следует инициализировать сразу группой. Для того, чтобы избежать их повторной инициализации,
	// имена уже установленных параметров сеанса сохраняются в массиве УстановленныеПараметры.
	УстановленныеПараметры = Новый Массив;

	Если ИменаПараметровСеанса = Неопределено Тогда
		ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(Новый Соответствие);
		Справочники.ВерсииРасширений.УстановкаПараметровСеанса(ИменаПараметровСеанса, УстановленныеПараметры);

		Если ИменаПараметровСеанса = Неопределено
			Или ИменаПараметровСеанса.Найти("ОсновнойЯзык") <> Неопределено Тогда

			Если ЗначениеЗаполнено(Константы.ОсновнойЯзык.Получить()) Тогда
				ПараметрыСеанса.ОсновнойЯзык	= Константы.ОсновнойЯзык.Получить();
			Иначе
				ПараметрыСеанса.ОсновнойЯзык	= Метаданные.ОсновнойЯзык.КодЯзыка;
			КонецЕсли;

			УстановленныеПараметры.Добавить("ОсновнойЯзык");
		КонецЕсли;

		// При установке соединения с информационной базой до вызова всех остальных обработчиков.
		СП_ПередЗапускомПрограммы();

		Возврат УстановленныеПараметры;
	КонецЕсли;

	Если ИменаПараметровСеанса.Найти("ПараметрыКлиентаНаСервере") <> Неопределено Тогда
		ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(Новый Соответствие);
		УстановленныеПараметры.Добавить("ПараметрыКлиентаНаСервере");
	КонецЕсли;

	Если ИменаПараметровСеанса.Найти("КлючДанныхПовторногоИспользования") <> Неопределено Тогда
		ПараметрыСеанса.КлючДанныхПовторногоИспользования = Новый УникальныйИдентификатор;
		УстановленныеПараметры.Добавить("КлючДанныхПовторногоИспользования");
	КонецЕсли;

	Справочники.ВерсииРасширений.УстановкаПараметровСеанса(ИменаПараметровСеанса, УстановленныеПараметры);
	Если ИменаПараметровСеанса = Неопределено
		Или ИменаПараметровСеанса.Найти("ОсновнойЯзык") <> Неопределено Тогда

		Если ЗначениеЗаполнено(Константы.ОсновнойЯзык.Получить()) Тогда
				ПараметрыСеанса.ОсновнойЯзык	= Константы.ОсновнойЯзык.Получить();
			Иначе
				ПараметрыСеанса.ОсновнойЯзык	= Метаданные.ОсновнойЯзык.КодЯзыка;
		КонецЕсли;

		УстановленныеПараметры.Добавить("ОсновнойЯзык");
	КонецЕсли;

	Если ИменаПараметровСеанса.Найти("БуферОбмена") <> Неопределено Тогда
		ПараметрыСеанса.БуферОбмена = Новый ФиксированнаяСтруктура(Новый Структура("Источник, Данные"));
		УстановленныеПараметры.Добавить("БуферОбмена");
	КонецЕсли;

	Обработчики = Новый Соответствие;
	ИнтеграцияПодсистемСервер.ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики);

	СП_ВыполнитьОбработчикиУстановкиПараметровСеанса(ИменаПараметровСеанса, Обработчики, УстановленныеПараметры);

	ИнтеграцияПодсистемСервер.ПриУстановкеПараметровСеанса(ИменаПараметровСеанса);

	Возврат УстановленныеПараметры;
КонецФункции

Процедура СП_ПередЗапускомПрограммы()
	// Привилегированный режим (установлен платформой).

	// Проверка основного языка программирования, установленного в конфигурации.
	ТекущийЯзыкВстроенногоЯзыка = Метаданные.СвойстваОбъектов.ВариантВстроенногоЯзыка["Русский"];
	Если Метаданные.ВариантВстроенногоЯзыка <> ТекущийЯзыкВстроенногоЯзыка Тогда
		ВызватьИсключение СтрШаблон(
			"Вариант встроенного языка конфигурации ""%1"" не поддерживается.
			           |Необходимо использовать вариант языка ""%2"".",
			Метаданные.ВариантВстроенногоЯзыка,
			Метаданные.СвойстваОбъектов.ВариантВстроенногоЯзыка["Русский"]);
	КонецЕсли;

	// Проверка настройки совместимости конфигурации с версией платформы.
	СистемнаяИнформация			= Новый СистемнаяИнформация;
	МинимальнаяВерсияПлатформы	= "8.3.14.1694";
	Если БазоваяПодсистемаКлиентСервер.ОН_СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, МинимальнаяВерсияПлатформы) < 0 Тогда
		ВызватьИсключение СтрШаблон(
			"Для запуска необходима версия платформы 1С:Предприятие %1 или выше.", МинимальнаяВерсияПлатформы);
	КонецЕсли;

	Режимы			= Метаданные.СвойстваОбъектов.РежимСовместимости;
	ТекущийРежим	= Метаданные.РежимСовместимости;

	ПоддерживаемаяВерсияПлатформы = "8.3.14";
	ВерсияПлатформы = БазоваяПодсистемаКлиентСервер.ОН_ВерсияКонфигурацииБезНомераСборки(СистемнаяИнформация.ВерсияПриложения);
	Если ТекущийРежим = Режимы.НеИспользовать Тогда
		Если БазоваяПодсистемаКлиентСервер.ОН_СравнитьВерсииБезНомераСборки(ВерсияПлатформы, ПоддерживаемаяВерсияПлатформы) = 0 Тогда
			НеПоддерживаемаяВерсияПлатформы = "";
		Иначе
			НеПоддерживаемаяВерсияПлатформы = ВерсияПлатформы;
		КонецЕсли;
	ИначеЕсли ТекущийРежим = Режимы.Версия8_1 Тогда
		НеПоддерживаемаяВерсияПлатформы = "8.1"
	ИначеЕсли ТекущийРежим = Режимы.Версия8_2_13 Тогда
		НеПоддерживаемаяВерсияПлатформы = "8.2.13"
	ИначеЕсли ТекущийРежим = Режимы.Версия8_2_16 Тогда
		НеПоддерживаемаяВерсияПлатформы = "8.2.16";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_1 Тогда
		НеПоддерживаемаяВерсияПлатформы = "8.3.1";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_2 Тогда
		НеПоддерживаемаяВерсияПлатформы = "8.3.2";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_3 Тогда
		НеПоддерживаемаяВерсияПлатформы = "8.3.3";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_4 Тогда
		НеПоддерживаемаяВерсияПлатформы = "8.3.4";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_5 Тогда
		НеПоддерживаемаяВерсияПлатформы = "8.3.5";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_6 Тогда
		НеПоддерживаемаяВерсияПлатформы = "8.3.6";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_7 Тогда
		НеПоддерживаемаяВерсияПлатформы = "8.3.7";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_8 Тогда
		НеПоддерживаемаяВерсияПлатформы = "8.3.8";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_9 Тогда
		НеПоддерживаемаяВерсияПлатформы = "8.3.9";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_10 Тогда
		НеПоддерживаемаяВерсияПлатформы = "8.3.10";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_11 Тогда
		НеПоддерживаемаяВерсияПлатформы = "8.3.11";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_12 Тогда
		НеПоддерживаемаяВерсияПлатформы = "8.3.12";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_13 Тогда
		НеПоддерживаемаяВерсияПлатформы = "8.3.13";
	Иначе
		НеПоддерживаемаяВерсияПлатформы = ?(СтрЗаканчиваетсяНа(Строка(ТекущийРежим), "8_3_14"), "", Строка(ТекущийРежим));
	КонецЕсли;

	Если ЗначениеЗаполнено(НеПоддерживаемаяВерсияПлатформы) Тогда
		ВызватьИсключение СтрШаблон(
			"Режим совместимости конфигурации с 1С:Предприятием версии %1 не поддерживается.
			           |Для запуска установите в конфигурации режим совместимости ""Не использовать"" при разработке на версии %2
			           |(или ""Версия %2"" при разработке на более старших версиях).",
			НеПоддерживаемаяВерсияПлатформы, ПоддерживаемаяВерсияПлатформы);
	КонецЕсли;

	// Проверка заполнения версии конфигурации.
	Если ПустаяСтрока(Метаданные.Версия) Тогда
		ВызватьИсключение "Не заполнено свойство конфигурации Версия.";
	Иначе
		Попытка
			НулеваяВерсия = БазоваяПодсистемаКлиентСервер.ОН_СравнитьВерсии(Метаданные.Версия, "0.0.0.0") = 0;
		Исключение
			ВызватьИсключение СтрШаблон(
				"Не правильно заполнено свойство конфигурации Версия: ""%1"".
				           |Правильный формат, например: ""1.2.3.45"".",
				Метаданные.Версия);
		КонецПопытки;
		Если НулеваяВерсия Тогда
			ВызватьИсключение СтрШаблон(
				"Не правильно заполнено свойство конфигурации Версия: ""%1"".
				           |Версия не может быть нулевой.",
				Метаданные.Версия);
		КонецЕсли;
	КонецЕсли;

	ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	Если Не ТекущийПользовательИБ.АутентификацияСтандартная
	   И Не ТекущийПользовательИБ.АутентификацияОС
	   И Не ТекущийПользовательИБ.АутентификацияOpenID Тогда
		ВызватьИсключение "Вход в программу запрещен. Обратитесь к администратору.";
	КонецЕсли;

	Если Не Метаданные.ОсновныеРоли.Содержит(Метаданные.Роли.АдминистраторСистемы)
	 Или Не Метаданные.ОсновныеРоли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
		ВызватьИсключение
			"В конфигурации в свойстве ОсновныеРоли не указаны
			|стандартные роли АдминистраторСистемы и ПолныеПрава.";
	КонецЕсли;

	// Проверка возможности выполнения обработчиков установки параметров сеанса для запуска программы.
	СП_ПроверитьВозможностьЗапуска();

	Если Не ЗначениеЗаполнено(ПользователиИнформационнойБазы.ТекущийПользователь().Имя)
	   И ОбновлениеИБСервер.сОИБ_ВерсияИБ("СтандартныеПодсистемы", Ложь) = "0.0.0.0" Тогда

		ПользователиСервер.сП_УстановитьНачальныеНастройки("");
	КонецЕсли;

	ИнтеграцияПодсистемСервер.ПередЗапускомПрограммы();

	СП_ОбработатьОчередьСкопированныхНастроек();
КонецПроцедуры

Процедура СП_УстановитьПустуюФормуНаРабочийСтол() Экспорт
	КлючОбъекта			= "Общее/НастройкиНачальнойСтраницы";
	ТекущиеНастройки	= ХранилищеСистемныхНастроек.Загрузить(КлючОбъекта);

	Если ТипЗнч(ТекущиеНастройки) = Тип("НастройкиНачальнойСтраницы") Тогда
		ТекущийСоставФорм = ТекущиеНастройки.ПолучитьСоставФорм();
		Если ТекущийСоставФорм.ПраваяКолонка.Количество() = 0
		   И ТекущийСоставФорм.ЛеваяКолонка.Количество() = 1
		   И ТекущийСоставФорм.ЛеваяКолонка[0] = "ОбщаяФорма.ПустойРабочийСтол" Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	СоставФорм = Новый СоставФормНачальнойСтраницы;
	СоставФорм.ЛеваяКолонка.Добавить("ОбщаяФорма.ПустойРабочийСтол");
	Настройки = Новый НастройкиНачальнойСтраницы;
	Настройки.УстановитьСоставФорм(СоставФорм);
	ХранилищеСистемныхНастроек.Сохранить(КлючОбъекта, "", Настройки);
КонецПроцедуры

Функция СП_ПараметрыКлиентаНаСервере() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыКлиента = ПараметрыСеанса.ПараметрыКлиентаНаСервере;
	УстановитьПривилегированныйРежим(Ложь);

	Если ПараметрыКлиента.Количество() = 0
	   И ТекущийРежимЗапуска() <> Неопределено Тогда

		ВызватьИсключение "Не заполнены параметры клиента на сервере.";
	КонецЕсли;

	Возврат ПараметрыКлиента;
КонецФункции

Процедура СП_СохранитьГлавныйУзел() Экспорт
	ГлавныйУзелМенеджер				= Константы.ГлавныйУзел.СоздатьМенеджерЗначения();
	ГлавныйУзелМенеджер.Значение	= ПланыОбмена.ГлавныйУзел();
	ОбновлениеВерсииИБСервер.ОИБ_ЗаписатьДанные(ГлавныйУзелМенеджер);
КонецПроцедуры

Функция СП_ДобавитьПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	ЭтоВызовПередНачаломРаботыСистемы = Параметры.ПолученныеПараметрыКлиента <> Неопределено;

	// Обязательные параметры для продолжения работы.
	Параметры.Вставить("ЭтоРазделеннаяКонфигурация",						Ложь);
	Параметры.Вставить("ЕстьДоступДляОбновленияВерсииПлатформы",			ПользователиСервер.П_ЭтоПолноправныйПользователь(,Истина));

	Параметры.Вставить("ИменаПодсистем",									БазоваяПодсистемаСерверПовтИсп.СП_ИменаПодсистем());
	Параметры.Вставить("ЭтоБазоваяВерсияКонфигурации",						СтрНайти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0);
	Параметры.Вставить("ЭтоУчебнаяПлатформа",								СП_ЭтоУчебнаяПлатформа());
	Параметры.Вставить("ИмяТекущегоПользователя",							СП_ТекущийПользователь().Имя);
	Параметры.Вставить("ИмяCOMСоединителя",									БазоваяПодсистемаКлиентСервер.ОН_ИмяCOMСоединителя());
	Параметры.Вставить("КодОсновногоЯзыка",									ОН_КодОсновногоЯзыка());

	Параметры.Вставить("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы",	СП_ЗапрашиватьПодтверждениеПриЗавершенииПрограммы());

	ОбщиеПараметры = ОН_ОбщиеПараметрыБазовойФункциональности();

	Параметры.Вставить("МинимальнаяВерсияПлатформы",   ОбщиеПараметры.МинимальнаяВерсияПлатформы);
	Параметры.Вставить("РекомендуемаяВерсияПлатформы", ОбщиеПараметры.РекомендуемаяВерсияПлатформы);

	Параметры.Вставить("РекомендуемыйОбъемОперативнойПамяти", ОбщиеПараметры.РекомендуемыйОбъемОперативнойПамяти);
	Параметры.Вставить("ТребуетсяПоказРекомендацииПоОбъемуОперативнойПамяти", СП_ТребуетсяПоказРекомендацииПоОбъемуОперативнойПамяти());

	Параметры.Вставить("ЭтоСеансВнешнегоПользователя", ПользователиСервер.П_ЭтоСеансВнешнегоПользователя());
	Параметры.Вставить("ИнформационнаяБазаФайловая",   ОН_ИнформационнаяБазаФайловая());

	Если ЭтоВызовПередНачаломРаботыСистемы Тогда
		Параметры.Вставить("ЭлементыСтиля", СП_НаборЭлементовСтиля());
	КонецЕсли;

	Если ЭтоВызовПередНачаломРаботыСистемы
	   И Не Параметры.ПолученныеПараметрыКлиента.Свойство("ОпцииИнтерфейса") Тогда

		Параметры.Вставить("ОпцииИнтерфейса", БазоваяПодсистемаСерверПовтИсп.СП_ОпцииИнтерфейса());
	КонецЕсли;

	Если ЭтоВызовПередНачаломРаботыСистемы Тогда
		ОшибкаНедостаточноПравДляВходаВПрограмму = ПользователиСервер.сП_ОшибкаНедостаточноПравДляВходаВПрограмму(
			Не Параметры.ПолученныеПараметрыКлиента.Свойство("ОшибкаНедостаточноПравДляВходаВПрограмму"));

		Если ЗначениеЗаполнено(ОшибкаНедостаточноПравДляВходаВПрограмму) Тогда
			Параметры.Вставить("ОшибкаНедостаточноПравДляВходаВПрограмму", ОшибкаНедостаточноПравДляВходаВПрограмму);

			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	// Зарезервировано для новых подсистем

	Если Не ОбновлениеВерсииИБСервер.сОИБ_ДобавитьПараметрыРаботыКлиентаПриЗапуске(Параметры)
	   И ЭтоВызовПередНачаломРаботыСистемы Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ЭтоВызовПередНачаломРаботыСистемы
	   И Не Параметры.ПолученныеПараметрыКлиента.Свойство("ПоказатьНерекомендуемуюВерсиюПлатформы")
	   И СП_ПоказатьНерекомендуемуюВерсиюПлатформы(Параметры) Тогда

		Параметры.Вставить("ПоказатьНерекомендуемуюВерсиюПлатформы");
		БазоваяПодсистемаВызовСервера.СП_СкрытьРабочийСтолПриНачалеРаботыСистемы();

		Возврат Ложь;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	Если ЭтоВызовПередНачаломРаботыСистемы
	   И Не Параметры.ПолученныеПараметрыКлиента.Свойство("ВосстановитьСвязьСГлавнымУзлом")
	   И ПланыОбмена.ГлавныйУзел() = Неопределено
	   И ЗначениеЗаполнено(Константы.ГлавныйУзел.Получить()) Тогда

		УстановитьПривилегированныйРежим(Ложь);
		Параметры.Вставить("ВосстановитьСвязьСГлавнымУзлом", ПользователиСервер.П_ЭтоПолноправныйПользователь(, Истина, Ложь));
		БазоваяПодсистемаВызовСервера.СП_СкрытьРабочийСтолПриНачалеРаботыСистемы();

		Возврат Ложь;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);

	Если ЭтоВызовПередНачаломРаботыСистемы
	   И Не Параметры.ПолученныеПараметрыКлиента.Свойство("ВыбратьНачальныеРегиональныеНастройкиИБ")
	   И СП_ТребуетсяУстановкаРегиональныхНастроекИнформационнойБазы() Тогда

		Параметры.Вставить("ВыбратьНачальныеРегиональныеНастройкиИБ",
			ПользователиСервер.П_ЭтоПолноправныйПользователь(, Истина, Ложь));
		БазоваяПодсистемаВызовСервера.СП_СкрытьРабочийСтолПриНачалеРаботыСистемы();

		Возврат Ложь;
	КонецЕсли;

	Если ОбновлениеВерсииИБСервер.ОИБ_НеобходимоОбновлениеИнформационнойБазы()
		И ОбновлениеВерсииИБСервер.сОИБ_СтатусНевыполненныхОбработчиков(Истина) = "СтатусНеВыполнено" Тогда
		Параметры.Вставить("НеобходимоВыполнитьОбработчикиОтложенногоОбновления");
	КонецЕсли;

	// Зарезервировано для новых подсистем

	// Проверка необходимости предварительного обновления параметров работы программы.
	Если ЭтоВызовПередНачаломРаботыСистемы
	   И НЕ Параметры.ПолученныеПараметрыКлиента.Свойство("НеобходимоОбновлениеПараметровРаботыПрограммы") Тогда

		Если РегистрыСведений.ПараметрыРаботыПрограммы.НеобходимоОбновление() Тогда
			// Будет выполнено предварительное обновление.
			Параметры.Вставить("НеобходимоОбновлениеПараметровРаботыПрограммы");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	// Обязательные параметры для всех режимов работы.
	Параметры.Вставить("ПодробнаяИнформация", Метаданные.ПодробнаяИнформация);

	Если ОбновлениеВерсииИБСервер.сОИБ_НеобходимоОбновлениеНеразделенныхДанныхИнформационнойБазы() Тогда
		Параметры.Вставить("НеобходимоОбновлениеНеразделенныхДанныхИнформационнойБазы");
	КонецЕсли;

	// Зарезервировано для новых подсистем

	// Параметры для работы в локальном режиме или
	// в сеансе с установленными значениями разделителей в модели сервиса.

	Если ОбновлениеВерсииИБСервер.ОИБ_НеобходимоОбновлениеИнформационнойБазы() Тогда
		Параметры.Вставить("НеобходимоОбновлениеИнформационнойБазы");
		БазоваяПодсистемаВызовСервера.СП_СкрытьРабочийСтолПриНачалеРаботыСистемы();
	КонецЕсли;

	// Зарезервировано для новых подсистем

	Отказ = Ложь;
	Если ЭтоВызовПередНачаломРаботыСистемы Тогда
		ПользователиСервер.сП_ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры, Отказ, Истина);
	КонецЕсли;
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;

	СП_ДобавитьОбщиеПараметрыРаботыКлиента(Параметры);

	Если ЭтоВызовПередНачаломРаботыСистемы
	   И Параметры.Свойство("НеобходимоОбновлениеИнформационнойБазы") Тогда
		// Не следует добавлять остальные параметры до окончания обновления ИБ,
		// так как они могут рассчитывать, что обновление ИБ уже выполнено.
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
КонецФункции

Функция СП_ЭтоУчебнаяПлатформа() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();

	Попытка
		ПользовательОС = ТекущийПользователь.ПользовательОС;
	Исключение
		ПользовательОС = Неопределено;
	КонецПопытки;

	Возврат ПользовательОС = Неопределено;
КонецФункции

Функция СП_ТекущийПользователь() Экспорт
	// Вычисляем актуальное имя пользователя, даже если оно было ранее изменено в текущем сеансе;
	// Например, для подключения к текущей ИБ через внешнее соединение из этого сеанса;
	// Во всех остальных случаях достаточно получить ПользователиИнформационнойБазы.ТекущийПользователь().
	ТекущийПользователь = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
		ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);

	Если ТекущийПользователь = Неопределено Тогда
		ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	КонецЕсли;

	Возврат ТекущийПользователь;
КонецФункции

Функция СП_ЗапрашиватьПодтверждениеПриЗавершенииПрограммы() Экспорт
	Результат = ОН_ХранилищеЗагрузить(ХранилищеОбщихНастроек,
		"ОбщиеНастройкиПользователя",
		"ЗапрашиватьПодтверждениеПриЗавершенииПрограммы",
		Неопределено,
		Неопределено,
		Неопределено);

	Если Результат = Неопределено Тогда
		Результат = ОН_ОбщиеПараметрыБазовойФункциональности().ЗапрашиватьПодтверждениеПриЗавершенииПрограммы;
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция СП_ТребуетсяПоказРекомендацииПоОбъемуОперативнойПамяти()
	Если ОН_ЭтоВебКлиент()
	 Или Не ОН_ИнформационнаяБазаФайловая() Тогда
		Возврат Ложь;
	КонецЕсли;

	ОперативнаяПамять = СП_ПараметрыКлиентаНаСервере().Получить("ОперативнаяПамять");
	Если ТипЗнч(ОперативнаяПамять) <> Тип("Число") Тогда
		Возврат Ложь; // Параметр клиента на сервере не заполнен (нет клиентского приложения).
	КонецЕсли;

	РекомендуемыйОбъем		= ОН_ОбщиеПараметрыБазовойФункциональности().РекомендуемыйОбъемОперативнойПамяти;
	СохраненнаяРекомендация	= ОН_ХранилищеЗагрузить(ХранилищеОбщихНастроек,
		"ОбщиеНастройкиПользователя",
		"РекомендацияПоОбъемуОперативнойПамяти",
		Неопределено,
		Неопределено,
		Неопределено);

	Рекомендация = Новый Структура;
	Рекомендация.Вставить("Показывать",				Истина);
	Рекомендация.Вставить("ДатаПредыдущегоПоказа",	Дата(1, 1, 1));

	Если ТипЗнч(СохраненнаяРекомендация) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Рекомендация, СохраненнаяРекомендация);
	КонецЕсли;

	Возврат ОперативнаяПамять < РекомендуемыйОбъем
		И (Рекомендация.Показывать
		   Или (ТекущаяДатаСеанса() - Рекомендация.ДатаПредыдущегоПоказа) > 60*60*24*60)
КонецФункции

Функция СП_НаборЭлементовСтиля()
	НаборЭлементовСтиля = Новый Структура;
	Для каждого ЭлементСтиля Из Метаданные.ЭлементыСтиля Цикл
		Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение Тогда
			НаборЭлементовСтиля.Вставить(ЭлементСтиля.Имя, Новый ХранилищеЗначения(ЭлементСтиля.Значение));
		Иначе
			НаборЭлементовСтиля.Вставить(ЭлементСтиля.Имя, ЭлементСтиля.Значение);
		КонецЕсли;
	КонецЦикла;

	Возврат Новый ФиксированнаяСтруктура(НаборЭлементовСтиля);
КонецФункции

Функция СП_ПоказатьНерекомендуемуюВерсиюПлатформы(Параметры)
	// Проверка, что пользователь не внешний.
	УстановитьПривилегированныйРежим(Истина);

	Запрос			= Новый Запрос;
	Запрос.Текст	=
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|ГДЕ
	|	ВнешниеПользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";

	Запрос.УстановитьПараметр("ИдентификаторПользователяИБ",
		ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);

	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;

	СистемнаяИнформация	= Новый СистемнаяИнформация;
	Текущая				= СистемнаяИнформация.ВерсияПриложения;
	Минимальная			= Параметры.МинимальнаяВерсияПлатформы;
	Рекомендуемая		= Параметры.РекомендуемаяВерсияПлатформы;

	Возврат БазоваяПодсистемаКлиентСервер.ОН_СравнитьВерсии(Текущая, Минимальная) < 0
		Или БазоваяПодсистемаКлиентСервер.ОН_СравнитьВерсии(Текущая, Рекомендуемая) < 0;
КонецФункции

Процедура СП_ДобавитьОбщиеПараметрыРаботыКлиента(Параметры)
	УстановитьПривилегированныйРежим(Истина);
	Параметры.Вставить("АвторизованныйПользователь", ПользователиСервер.П_АвторизованныйПользователь());
	Параметры.Вставить("ЗаголовокПриложения", СокрЛП(Константы.ЗаголовокСистемы.Получить()));
	УстановитьПривилегированныйРежим(Ложь);

	Параметры.Вставить("ЭтоГлавныйУзел", НЕ ОН_ЭтоПодчиненныйУзелРИБ());

	Параметры.Вставить("ТребуетсяОбновлениеКонфигурацииУзлаРИБ",
		ОН_ЭтоПодчиненныйУзелРИБ() И КонфигурацияИзменена());
КонецПроцедуры

Функция СП_ТребуетсяУстановкаРегиональныхНастроекИнформационнойБазы()
	УстановитьПривилегированныйРежим(Истина);
	ТребуетсяУстановкаОсновногоЯзыка = ?(Метаданные.Языки.Количество() > 1, Не ЗначениеЗаполнено(Константы.ОсновнойЯзык.Получить()), Ложь);

	Возврат ТребуетсяУстановкаОсновногоЯзыка;
КонецФункции

Процедура СП_ДобавитьПараметрыРаботыКлиента(Параметры)  Экспорт
	Параметры.Вставить("ИменаПодсистем",							БазоваяПодсистемаСерверПовтИсп.сП_ИменаПодсистем());
	Параметры.Вставить("ДоступноИспользованиеРазделенныхДанных",	Истина);
	Параметры.Вставить("РазделениеВключено",						Ложь);

	Параметры.Вставить("ЭтоБазоваяВерсияКонфигурации",	СтрНайти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0);
	Параметры.Вставить("ЭтоУчебнаяПлатформа",			СП_ЭтоУчебнаяПлатформа());
	Параметры.Вставить("ИмяCOMСоединителя",				БазоваяПодсистемаКлиентСервер.ОН_ИмяCOMСоединителя());
	Параметры.Вставить("ЭлементыСтиля",					СП_НаборЭлементовСтиля());

	СП_ДобавитьОбщиеПараметрыРаботыКлиента(Параметры);

	Параметры.Вставить("ИмяКонфигурации",     Метаданные.Имя);
	Параметры.Вставить("СинонимКонфигурации", Метаданные.Синоним);
	Параметры.Вставить("ВерсияКонфигурации",  Метаданные.Версия);
	Параметры.Вставить("ПодробнаяИнформация", Метаданные.ПодробнаяИнформация);
	Параметры.Вставить("КодОсновногоЯзыка",   ОН_КодОсновногоЯзыка());

	Параметры.Вставить("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы",
		СП_ЗапрашиватьПодтверждениеПриЗавершенииПрограммы());

	Параметры.Вставить("ИнформационнаяБазаФайловая", ОН_ИнформационнаяБазаФайловая());

	// Зарезервировано для новых подсистем
КонецПроцедуры

Процедура СП_ПроверитьВозможностьЗапуска()
	Если ОН_ИнформационнаяБазаФайловая(СтрокаСоединенияИнформационнойБазы()) Тогда
		Возврат;
	КонецЕсли;

	// Зарезервировано для новых подсистем

	// Информационная база не настроена на использование с профилем безопасности, в котором запрещен
	// полный доступ к внешним модулям.
	Попытка
		//@skip-warning
		ДоступенПривилегированныйРежим = Вычислить("СП_ДоступенПереходВПривилегированныйРежим()");
	Исключение
		ВызватьИсключение СтрШаблон(
			"Невозможно установить параметры сеанса по причине: %1.
				|
				|Возможно, для информационной базы через консоль кластера был установлен профиль безопасности, не допускающий выполнения внешних модулей без установки безопасного режима. В этом случае для восстановления работоспособности программы требуется отключить использование профиля безопасности через консоль кластера и заново настроить профили безопасности с помощью интерфейса конфигурации (соответствующие команды находятся в разделе настроек программы). При этом программа будет автоматически корректно настроена на использование совместно с включенными профилями безопасности.",
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

//@skip-warning
Функция СП_ДоступенПереходВПривилегированныйРежим()
	УстановитьПривилегированныйРежим(Истина);

	Возврат ПривилегированныйРежим();
КонецФункции

Процедура СП_ОбработатьОчередьСкопированныхНастроек()
	Если ТекущийРежимЗапуска() = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОчередьНастроек = ХранилищеОбщихНастроек.Загрузить("ОчередьНастроек", "НеПримененныеНастройки");
	Если ТипЗнч(ОчередьНастроек) <> Тип("ХранилищеЗначения") Тогда
		Возврат;
	КонецЕсли;
	ОчередьНастроек = ОчередьНастроек.Получить();
	Если ТипЗнч(ОчередьНастроек) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;

	Для Каждого ЭлементОчереди Из ОчередьНастроек Цикл
		Попытка
			Настройка = ХранилищеСистемныхНастроек.Загрузить(ЭлементОчереди.Ключ, ЭлементОчереди.Значение);
		Исключение
			Продолжить;
		КонецПопытки;
		ХранилищеСистемныхНастроек.Сохранить(ЭлементОчереди.Ключ, ЭлементОчереди.Значение, Настройка);
	КонецЦикла;

	ХранилищеОбщихНастроек.Сохранить("ОчередьНастроек", "НеПримененныеНастройки", Неопределено);
КонецПроцедуры

Процедура СП_ВыполнитьОбработчикиУстановкиПараметровСеанса(ИменаПараметровСеанса, Обработчики, УстановленныеПараметры)
	// Массив с ключами параметров сеанса
	// задаются начальным словом в имени параметра сеанса и символом "*".
	ПараметрыСеансаКлючи = Новый Массив;

	Для Каждого Запись Из Обработчики Цикл
		Если СтрНайти(Запись.Ключ, "*") > 0 Тогда
			КлючПараметра = СокрЛП(Запись.Ключ);
			ПараметрыСеансаКлючи.Добавить(Лев(КлючПараметра, СтрДлина(КлючПараметра)-1));
		КонецЕсли;
	КонецЦикла;

	Для каждого ИмяПараметра Из ИменаПараметровСеанса Цикл
		Если УстановленныеПараметры.Найти(ИмяПараметра) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Обработчик = Обработчики.Получить(ИмяПараметра);
		Если Обработчик <> Неопределено Тогда
			ПараметрыОбработчика = Новый Массив();
			ПараметрыОбработчика.Добавить(ИмяПараметра);
			ПараметрыОбработчика.Добавить(УстановленныеПараметры);
			ОН_ВыполнитьМетодКонфигурации(Обработчик, ПараметрыОбработчика);
			Продолжить;
		КонецЕсли;

		Для Каждого ИмяКлючаПараметра Из ПараметрыСеансаКлючи Цикл
			Если СтрНачинаетсяС(ИмяПараметра, ИмяКлючаПараметра) Тогда
				Обработчик = Обработчики.Получить(ИмяКлючаПараметра + "*");
				ПараметрыОбработчика = Новый Массив();
				ПараметрыОбработчика.Добавить(ИмяПараметра);
				ПараметрыОбработчика.Добавить(УстановленныеПараметры);
				ОН_ВыполнитьМетодКонфигурации(Обработчик, ПараметрыОбработчика);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбщегоНазначения

Функция ОН_ПрочитатьДанныеИзБезопасногоХранилища(Владелец, Ключи = "Пароль", ОбщиеДанные = Неопределено) Экспорт
	БазоваяПодсистемаКлиентСервер.ОН_Проверить(ЗначениеЗаполнено(Владелец),
		СтрШаблон(
			"Недопустимое значение параметра %1 в %2.
				|параметр должен содержать ссылку; передано значение: %3 (тип %4).",
			"Владелец", "БазоваяПодсистемаСервер.ОН_ПрочитатьДанныеИзБезопасногоХранилища", Владелец, ТипЗнч(Владелец)));

	Результат = Новый Структура(Ключи);

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
		|	БезопасноеХранилищеДанных.Данные КАК Данные
		|ИЗ
		|	РегистрСведений.БезопасноеХранилищеДанных КАК БезопасноеХранилищеДанных
		|ГДЕ
		|	БезопасноеХранилищеДанных.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", Владелец);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();

	Если РезультатЗапроса.Следующий() Тогда
		Если ЗначениеЗаполнено(РезультатЗапроса.Данные) Тогда
			СохраненныеДанные = РезультатЗапроса.Данные.Получить();
			Если ЗначениеЗаполнено(СохраненныеДанные) Тогда
				ЗаполнитьЗначенияСвойств(Результат, СохраненныеДанные);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Результат <> Неопределено И Результат.Количество() = 1 Тогда
		Возврат ?(Результат.Свойство(Ключи), Результат[Ключи], Неопределено);
	КонецЕсли;

	Возврат Результат;
КонецФункции

Процедура ОН_ЗаписатьДанныеВБезопасноеХранилище(Владелец, Данные, Ключ = "Пароль") Экспорт
	БазоваяПодсистемаКлиентСервер.ОН_Проверить(ЗначениеЗаполнено(Владелец),
		СтрШаблон(
			"Недопустимое значение параметра %1 в %2.
				|параметр должен содержать ссылку; передано значение: %3 (тип %4).",
			"Владелец", "БазоваяПодсистемаСервер.онЗаписатьДанныеВБезопасноеХранилище", Владелец, ТипЗнч(Владелец)));

	БазоваяПодсистемаКлиентСервер.ОН_Проверить(ТипЗнч(Ключ) = Тип("Строка"),
		СтрШаблон(
			"Недопустимое значение параметра %1 в %2.
				|параметр должен содержать строку; передано значение: %3 (тип %4).",
			"Ключ", "БазоваяПодсистемаСервер.онЗаписатьДанныеВБезопасноеХранилище", Ключ, ТипЗнч(Ключ)));

	БезопасноеХранилищеДанных			= РегистрыСведений.БезопасноеХранилищеДанных.СоздатьМенеджерЗаписи();

	БезопасноеХранилищеДанных.Владелец	= Владелец;
	БезопасноеХранилищеДанных.Прочитать();
	Если Данные <> Неопределено Тогда
		Если БезопасноеХранилищеДанных.Выбран() Тогда
			ДанныеДляСохранения = БезопасноеХранилищеДанных.Данные.Получить();
			Если ТипЗнч(ДанныеДляСохранения) <> Тип("Структура") Тогда
				ДанныеДляСохранения = Новый Структура();
			КонецЕсли;
			ДанныеДляСохранения.Вставить(Ключ, Данные);
			ДанныеДляХранилищеЗначения			= Новый ХранилищеЗначения(ДанныеДляСохранения, Новый СжатиеДанных(6));
			БезопасноеХранилищеДанных.Данные	= ДанныеДляХранилищеЗначения;
			БезопасноеХранилищеДанных.Записать();
		Иначе
			ДанныеДляСохранения					= Новый Структура(Ключ, Данные);
			ДанныеДляХранилищеЗначения			= Новый ХранилищеЗначения(ДанныеДляСохранения, Новый СжатиеДанных(6));
			БезопасноеХранилищеДанных.Данные	= ДанныеДляХранилищеЗначения;
			БезопасноеХранилищеДанных.Владелец	= Владелец;
			БезопасноеХранилищеДанных.Записать();
		КонецЕсли;
	Иначе
		БезопасноеХранилищеДанных.Удалить();
	КонецЕсли;
КонецПроцедуры

Функция ОН_ЭтоМобильныйКлиент() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	ЭтоМобильныйКлиент = СП_ПараметрыКлиентаНаСервере().Получить("ЭтоМобильныйКлиент");

	Если ЭтоМобильныйКлиент = Неопределено Тогда
		Возврат Ложь; // Нет клиентского приложения.
	КонецЕсли;

	Возврат ЭтоМобильныйКлиент;
КонецФункции

Функция ОН_ЭтоВебКлиент() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ЭтоВебКлиент = СП_ПараметрыКлиентаНаСервере().Получить("ЭтоВебКлиент");

	Если ЭтоВебКлиент = Неопределено Тогда
		Возврат Ложь; // Нет клиентского приложения.
	КонецЕсли;

	Возврат ЭтоВебКлиент;
КонецФункции

Функция ОН_ФиксированныеДанные(Данные, ВызыватьИсключение = Истина) Экспорт
	Если ТипЗнч(Данные) = Тип("Массив") Тогда
		Массив = Новый Массив;

		Для каждого Значение Из Данные Цикл
			Если ТипЗнч(Значение) = Тип("Структура")
			 ИЛИ ТипЗнч(Значение) = Тип("Соответствие")
			 ИЛИ ТипЗнч(Значение) = Тип("Массив") Тогда

				Массив.Добавить(ОН_ФиксированныеДанные(Значение, ВызыватьИсключение));
			Иначе
				Если ВызыватьИсключение Тогда
					ОН_ПроверкаФиксированностиДанных(Значение, Истина);
				КонецЕсли;
				Массив.Добавить(Значение);
			КонецЕсли;
		КонецЦикла;

		Возврат Новый ФиксированныйМассив(Массив);
	ИначеЕсли ТипЗнч(Данные) = Тип("Структура")
	      ИЛИ ТипЗнч(Данные) = Тип("Соответствие") Тогда

		Если ТипЗнч(Данные) = Тип("Структура") Тогда
			Коллекция = Новый Структура;
		Иначе
			Коллекция = Новый Соответствие;
		КонецЕсли;

		Для каждого КлючИЗначение Из Данные Цикл
			Значение = КлючИЗначение.Значение;

			Если ТипЗнч(Значение) = Тип("Структура")
			 ИЛИ ТипЗнч(Значение) = Тип("Соответствие")
			 ИЛИ ТипЗнч(Значение) = Тип("Массив") Тогда

				Коллекция.Вставить(
					КлючИЗначение.Ключ, ОН_ФиксированныеДанные(Значение, ВызыватьИсключение));
			Иначе
				Если ВызыватьИсключение Тогда
					ОН_ПроверкаФиксированностиДанных(Значение, Истина);
				КонецЕсли;
				Коллекция.Вставить(КлючИЗначение.Ключ, Значение);
			КонецЕсли;
		КонецЦикла;

		Если ТипЗнч(Данные) = Тип("Структура") Тогда
			Возврат Новый ФиксированнаяСтруктура(Коллекция);
		Иначе
			Возврат Новый ФиксированноеСоответствие(Коллекция);
		КонецЕсли;

	ИначеЕсли ВызыватьИсключение Тогда
		ОН_ПроверкаФиксированностиДанных(Данные);
	КонецЕсли;

	Возврат Данные;
КонецФункции

Процедура ОН_ПроверкаФиксированностиДанных(Данные, ДанныеВЗначенииФиксированныхТипов = Ложь)
	ТипДанных = ТипЗнч(Данные);

	Если ТипДанных = Тип("ХранилищеЗначения")
	 ИЛИ ТипДанных = Тип("ФиксированныйМассив")
	 ИЛИ ТипДанных = Тип("ФиксированнаяСтруктура")
	 ИЛИ ТипДанных = Тип("ФиксированноеСоответствие") Тогда

		Возврат;
	КонецЕсли;

	Если ДанныеВЗначенииФиксированныхТипов Тогда
		Если ТипДанных = Тип("Булево")
		 ИЛИ ТипДанных = Тип("Строка")
		 ИЛИ ТипДанных = Тип("Число")
		 ИЛИ ТипДанных = Тип("Дата")
		 ИЛИ ТипДанных = Тип("Неопределено")
		 ИЛИ ТипДанных = Тип("УникальныйИдентификатор")
		 ИЛИ ТипДанных = Тип("Null")
		 ИЛИ ТипДанных = Тип("Тип")
		 ИЛИ ТипДанных = Тип("ХранилищеЗначения")
		 ИЛИ ТипДанных = Тип("ОбщийМодуль")
		 ИЛИ ТипДанных = Тип("ОбъектМетаданных")
		 ИЛИ ТипДанных = Тип("ТипЗначенияXDTO")
		 ИЛИ ТипДанных = Тип("ТипОбъектаXDTO")
		 ИЛИ (ТипДанных <> Тип("Неопределено") И БазоваяПодсистемаСерверПовтИсп.СП_ОписаниеТипаВсеСсылки().СодержитТип(ТипДанных)) Тогда

			Возврат;
		КонецЕсли;
	КонецЕсли;

	ВызватьИсключение СтрШаблон(
		"Ошибка в функции ФиксированныеДанные общего модуля БазоваяПодсистемаСервер.
			|Данные типа ""%1"" не могут быть зафиксированы.",
		Строка(ТипДанных) );
КонецПроцедуры

Функция ОН_КодОсновногоЯзыка() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	Возврат ПараметрыСеанса.ОсновнойЯзык;
КонецФункции

Функция ОН_ХранилищеЗагрузить(МенеджерХранилища, КлючОбъекта, КлючНастроек, ЗначениеПоУмолчанию,
			ОписаниеНастроек, ИмяПользователя)
	Результат = Неопределено;

	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Результат = МенеджерХранилища.Загрузить(КлючОбъекта, ОН_КлючНастроек(КлючНастроек),
			ОписаниеНастроек, ИмяПользователя);
	КонецЕсли;

	Если Результат = Неопределено Тогда
		Результат = ЗначениеПоУмолчанию;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		Если ОН_ОчиститьНесуществующиеСсылки(Результат) Тогда
			Результат = ЗначениеПоУмолчанию;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция ОН_КлючНастроек(Знач Строка)
	Возврат ОН_СократитьСтрокуКонтрольнойСуммой(Строка, 128);
КонецФункции

Функция ОН_СократитьСтрокуКонтрольнойСуммой(Строка, МаксимальнаяДлина) Экспорт
	БазоваяПодсистемаКлиентСервер.ОН_Проверить(МаксимальнаяДлина >= 32, "Параметр МаксимальнаяДлина не может быть меньше 32",
		"БазоваяПодсистемаСервер.ОН_СократитьСтрокуКонтрольнойСуммой");

	Результат = Строка;
	Если СтрДлина(Строка) > МаксимальнаяДлина Тогда
		Результат			= Лев(Строка, МаксимальнаяДлина - 32);
		ХешированиеДанных	= Новый ХешированиеДанных(ХешФункция.MD5);
		ХешированиеДанных.Добавить(Сред(Строка, МаксимальнаяДлина - 32 + 1));
		Результат			= Результат + СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция ОН_ОчиститьНесуществующиеСсылки(Значение)
	Тип = ТипЗнч(Значение);
	Если Тип = Тип("Неопределено")
		Или Тип = Тип("Булево")
		Или Тип = Тип("Строка")
		Или Тип = Тип("Число")
		Или Тип = Тип("Дата") Тогда // Оптимизация - часто используемые примитивные типы.

		Возврат Ложь; // Не ссылка.
	ИначеЕсли Тип = Тип("Массив") Тогда
		Количество = Значение.Количество();
		Для Номер = 1 По Количество Цикл
			ОбратныйИндекс = Количество - Номер;
			Если ОН_ОчиститьНесуществующиеСсылки(Значение[ОбратныйИндекс]) Тогда
				Значение.Удалить(ОбратныйИндекс);
			КонецЕсли;
		КонецЦикла;

		Возврат Ложь; // Не ссылка.
	ИначеЕсли Тип = Тип("Структура")
		Или Тип = Тип("Соответствие") Тогда

		Для Каждого КлючИЗначение Из Значение Цикл
			Если ОН_ОчиститьНесуществующиеСсылки(КлючИЗначение.Значение) Тогда
				Значение.Вставить(КлючИЗначение.Ключ, Неопределено);
			КонецЕсли;
		КонецЦикла;

		Возврат Ложь; // Не ссылка.
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип)
		Или Справочники.ТипВсеСсылки().СодержитТип(Тип)
		Или Перечисления.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип)
		Или БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
		Или Задачи.ТипВсеСсылки().СодержитТип(Тип) Тогда
		// Ссылочный тип, исключая ТочкаМаршрутаБизнесПроцессаСсылка.

		Если Значение.Пустая() Тогда
			Возврат Ложь; // Ссылка пустая.
		КонецЕсли;

		Возврат ОН_ЗначениеРеквизитаОбъекта(Значение, "Ссылка") = Неопределено;
	Иначе
		Возврат Ложь; // Не ссылка.
	КонецЕсли;
КонецФункции

Функция ОН_ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты, ВыбратьРазрешенные = Ложь) Экспорт
	// Если передано имя предопределенного.
	Если ТипЗнч(Ссылка) = Тип("Строка") Тогда
		ПолноеИмяПредопределенногоЭлемента = Ссылка;

		// Вычисление ссылки по имени предопределенного.
		// - дополнительно выполняет проверку метаданных предопределенного, выполняется предварительно.
		Попытка
			Ссылка = ОН_ПредопределенныйЭлемент(ПолноеИмяПредопределенногоЭлемента);
		Исключение
			ТекстОшибки = СтрШаблон(
			"Неверный первый параметр Ссылка в функции БазоваяПодсистемаСервер.ОН_ЗначенияРеквизитовОбъекта:
				|%1", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;

		// Разбор полного имени предопределенного.
		ЧастиПолногоИмени			= СтрРазделить(ПолноеИмяПредопределенногоЭлемента, ".");
		ПолноеИмяОбъектаМетаданных	= ЧастиПолногоИмени[0] + "." + ЧастиПолногоИмени[1];

		// Если предопределенный не создан в ИБ, то требуется выполнить проверку доступа к объекту.
		// В других сценариях проверка доступа выполняется в момент исполнения запроса.
		Если Ссылка = Неопределено Тогда
			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
			Если Не ПравоДоступа("Чтение", МетаданныеОбъекта) Тогда
				ВызватьИсключение СтрШаблон(
					"Недостаточно прав для работы с таблицей ""%1""", ПолноеИмяОбъектаМетаданных);
			КонецЕсли;
		КонецЕсли;
	Иначе // Если передана ссылка.
		Попытка
			ПолноеИмяОбъектаМетаданных = Ссылка.Метаданные().ПолноеИмя();
		Исключение
			ВызватьИсключение
				"Неверный первый параметр Ссылка в функции БазоваяПодсистемаСервер.ОН_ЗначенияРеквизитовОбъекта:
					|- Значение должно быть ссылкой или именем предопределенного элемента";
		КонецПопытки;
	КонецЕсли;

	// Разбор реквизитов, если второй параметр Строка.
	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
		Если ПустаяСтрока(Реквизиты) Тогда
			Возврат Новый Структура;
		КонецЕсли;

		// Удаление пробелов.
		Реквизиты = СтрЗаменить(Реквизиты, " ", "");
		// Преобразование параметра в массив полей.
		Реквизиты = СтрРазделить(Реквизиты, ",");
	КонецЕсли;

	// Приведение реквизитов к единому формату.
	СтруктураПолей = Новый Структура;
	Если ТипЗнч(Реквизиты) = Тип("Структура")
		Или ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда

		СтруктураПолей = Реквизиты;
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив")
		Или ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда

		Для Каждого Реквизит Из Реквизиты Цикл
			Попытка
				ПсевдонимПоля = СтрЗаменить(Реквизит, ".", "");
				СтруктураПолей.Вставить(ПсевдонимПоля, Реквизит);
			Исключение
				// Если псевдоним не является ключом.

				// Поиск ошибки доступности полей.
				Результат = ОН_НайтиОшибкуДоступностиРеквизитовОбъекта(ПолноеИмяОбъектаМетаданных, Реквизиты);
				Если Результат.Ошибка Тогда
					ВызватьИсключение СтрШаблон(
						"Неверный второй параметр Реквизиты в функции БазоваяПодсистемаСервер.ОН_ЗначенияРеквизитовОбъекта: %1",
						Результат.ОписаниеОшибки);
				КонецЕсли;

				// Не удалось распознать ошибку, проброс первичной ошибки.
				ВызватьИсключение;
			КонецПопытки;
		КонецЦикла;
	Иначе
		ВызватьИсключение СтрШаблон(
			"Неверный тип второго параметра Реквизиты в функции БазоваяПодсистемаСервер.ОН_ЗначенияРеквизитовОбъекта: %1",
			Строка(ТипЗнч(Реквизиты)));
	КонецЕсли;

	// Подготовка результата (после выполнения запроса переопределится).
	Результат = Новый Структура;

	// Формирование текста запроса к выбираемым полям.
	ТекстЗапросаПолей = "";
	Для каждого КлючИЗначение Из СтруктураПолей Цикл
		ИмяПоля = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
						КлючИЗначение.Значение,
						КлючИЗначение.Ключ);
		ПсевдонимПоля = КлючИЗначение.Ключ;

		ТекстЗапросаПолей =
			ТекстЗапросаПолей + ?(ПустаяСтрока(ТекстЗапросаПолей), "", ",") + "
			|	" + ИмяПоля + " КАК " + ПсевдонимПоля;

		// Предварительное добавление поля по псевдониму в возвращаемый результат.
		Результат.Вставить(ПсевдонимПоля);
	КонецЦикла;

	// Если предопределенного нет в ИБ.
	// - приведение результата к отсутствию объекта в ИБ или передаче пустой ссылки.
	Если Ссылка = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	// Выполнение запроса.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|&ТекстЗапросаПолей
		|ИЗ
		|	&ПолноеИмяОбъектаМетаданных КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка";

	Если Не ВыбратьРазрешенные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РАЗРЕШЕННЫЕ", "");
	КонецЕсли;

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаПолей",			Запрос.Текст);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолноеИмяОбъектаМетаданных",	ПолноеИмяОбъектаМетаданных);


	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
	Исключение

		// Если реквизиты были переданы строкой, то они уже конвертированы в массив.
		// Если реквизиты - массив, оставляем без изменений.
		// Если реквизиты - структура - конвертируем в массив.
		// В остальных случаях уже было бы выброшено исключение.
		Если Тип("Структура") = ТипЗнч(Реквизиты) Тогда
			Реквизиты = Новый Массив;
			Для каждого КлючИЗначение Из СтруктураПолей Цикл
				ИмяПоля = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
							КлючИЗначение.Значение,
							КлючИЗначение.Ключ);
				Реквизиты.Добавить(ИмяПоля);
			КонецЦикла;
		КонецЕсли;

		// Поиск ошибки доступности полей.
		Результат = ОН_НайтиОшибкуДоступностиРеквизитовОбъекта(ПолноеИмяОбъектаМетаданных, Реквизиты);
		Если Результат.Ошибка Тогда
			ВызватьИсключение СтрШаблон(
				"Неверный второй параметр Реквизиты в функции ОбщегоНазначения.ЗначенияРеквизитовОбъекта: %1",
				Результат.ОписаниеОшибки);
		КонецЕсли;

		// Не удалось распознать ошибку, проброс первичной ошибки.
		ВызватьИсключение;
	КонецПопытки;

	// Заполнение реквизитов.
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция ОН_ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные = Ложь) Экспорт
	Если ПустаяСтрока(ИмяРеквизита) Тогда
		ВызватьИсключение
			"Неверный второй параметр ИмяРеквизита в функции БазоваяПодсистемаСервер.ОН_ЗначениеРеквизитаОбъекта:
				|- Имя реквизита должно быть заполнено";
	КонецЕсли;

	Результат = ОН_ЗначенияРеквизитовОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные);

	Возврат Результат[СтрЗаменить(ИмяРеквизита, ".", "")];
КонецФункции

Функция ОН_ПредопределенныйЭлемент(ПолноеИмяПредопределенного) Экспорт
	Если БазоваяПодсистемаКлиентСервер.сОН_ИспользоватьСтандартнуюФункциюПолученияПредопределенного(
		ПолноеИмяПредопределенного) Тогда

		Возврат ПредопределенноеЗначение(ПолноеИмяПредопределенного);
	КонецЕсли;

	ПоляПредопределенного = БазоваяПодсистемаКлиентСервер.сОН_ИмяПредопределенногоПоПолям(ПолноеИмяПредопределенного);

	ПредопределенныеЗначения = БазоваяПодсистемаСерверПовтИсп.СП_СсылкиПоИменамПредопределенных(
		ПоляПредопределенного.ПолноеИмяОбъектаМетаданных);

	Возврат БазоваяПодсистемаКлиентСервер.сОН_ПредопределенныйЭлемент(
		ПолноеИмяПредопределенного, ПоляПредопределенного, ПредопределенныеЗначения);
КонецФункции

Функция ОН_НайтиОшибкуДоступностиРеквизитовОбъекта(ПолноеИмяОбъектаМетаданных, ПроверяемыеВыражения)
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаМетаданных);

	Если МетаданныеОбъекта = Неопределено Тогда
		Возврат Новый Структура("Ошибка, ОписаниеОшибки", Истина,
			СтрШаблон(
				"Ошибка получения метаданных ""%1""", ПолноеИмяОбъектаМетаданных));
	КонецЕсли;

	// Разрешение вызова из безопасного режима внешней обработки или расширения.
	// Информация о доступности полей источника схемы при проверке метаданных не является секретной.
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);

	Схема = Новый СхемаЗапроса;
	Пакет = Схема.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	Оператор = Пакет.Операторы.Получить(0);

	Источник	= Оператор.Источники.Добавить(ПолноеИмяОбъектаМетаданных, "Таблица");
	ТекстОшибки	= "";

	Для Каждого ТекущееВыражение Из ПроверяемыеВыражения Цикл
		Если Не ОН_ПолеИсточникаСхемыЗапросаДоступно(Источник, ТекущееВыражение) Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + СтрШаблон(
				"- Поле объекта ""%1"" не найдено", ТекущееВыражение);
		КонецЕсли;
	КонецЦикла;

	Возврат Новый Структура("Ошибка, ОписаниеОшибки", Не ПустаяСтрока(ТекстОшибки), ТекстОшибки);
КонецФункции

Функция ОН_ПолеИсточникаСхемыЗапросаДоступно(ИсточникОператора, ПроверяемоеВыражение)
	ЧастиИмениПоля	= СтрРазделить(ПроверяемоеВыражение, ".");
	ДоступныеПоля	= ИсточникОператора.Источник.ДоступныеПоля;

	ТекущаяЧастьИмениПоля = 0;
	Пока ТекущаяЧастьИмениПоля < ЧастиИмениПоля.Количество() Цикл
		ТекущееПоле = ДоступныеПоля.Найти(ЧастиИмениПоля.Получить(ТекущаяЧастьИмениПоля));

		Если ТекущееПоле = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;

		// Инкрементация следующей части имени поля и соответствующего списка доступности полей.
		ТекущаяЧастьИмениПоля	= ТекущаяЧастьИмениПоля + 1;
		ДоступныеПоля			= ТекущееПоле.Поля;
	КонецЦикла;

	Возврат Истина;
КонецФункции

Функция ОН_ОбщиеПараметрыБазовойФункциональности() Экспорт
	ОбщиеПараметры = Новый Структура;
	ОбщиеПараметры.Вставить("ИмяФормыПерсональныхНастроек",						"");
	ОбщиеПараметры.Вставить("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы",	Истина);
	ОбщиеПараметры.Вставить("ОтключитьИдентификаторыОбъектовМетаданных",		Ложь);
	ОбщиеПараметры.Вставить("РекомендуемыйОбъемОперативнойПамяти",				2);
	ОбщиеПараметры.Вставить("МинимальнаяВерсияПлатформы",						"8.3.14.1694");
	ОбщиеПараметры.Вставить("РекомендуемаяВерсияПлатформы",						"8.3.14.1694");

	Минимальная   = ОбщиеПараметры.МинимальнаяВерсияПлатформы;
	Рекомендуемая = ОбщиеПараметры.РекомендуемаяВерсияПлатформы;
	Если Не ПустаяСтрока(Минимальная)
		И Не ПустаяСтрока(Рекомендуемая)
		И БазоваяПодсистемаКлиентСервер.ОН_СравнитьВерсии(Минимальная, Рекомендуемая) > 0 Тогда
		ТекстСообщения = "Минимальная версия платформы ""1С:Предприятие 8"" указана выше рекомендуемой.
			|Минимальная версия - ""%1"", рекомендуемая версия - ""%2"".";
		ВызватьИсключение СтрШаблон(
			ТекстСообщения,
			ОбщиеПараметры.МинимальнаяВерсияПлатформы,
			ОбщиеПараметры.РекомендуемаяВерсияПлатформы);
	КонецЕсли;

	Возврат ОбщиеПараметры;
КонецФункции

Функция ОН_ИнформационнаяБазаФайловая(Знач СтрокаСоединенияИнформационнойБазы = "") Экспорт
	Если ПустаяСтрока(СтрокаСоединенияИнформационнойБазы) Тогда
		СтрокаСоединенияИнформационнойБазы =  СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;

	Возврат СтрНайти(ВРег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1;
КонецФункции

Функция ОН_ЭтоПодчиненныйУзелРИБ() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	Возврат ПланыОбмена.ГлавныйУзел() <> Неопределено;
КонецФункции

Функция ОН_КонтрольнаяСуммаСтрокой(Знач Данные, Знач Алгоритм = Неопределено) Экспорт
	Если Алгоритм = Неопределено Тогда
		Алгоритм = ХешФункция.MD5;
	КонецЕсли;

	ХешированиеДанных = Новый ХешированиеДанных(Алгоритм);
	Если ТипЗнч(Данные) <> Тип("Строка") И ТипЗнч(Данные) <> Тип("ДвоичныеДанные") Тогда
		Данные = ОН_ЗначениеВСтрокуXML(Данные);
	КонецЕсли;
	ХешированиеДанных.Добавить(Данные);

	Если ТипЗнч(ХешированиеДанных.ХешСумма) = Тип("ДвоичныеДанные") Тогда
		Результат = СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");
	ИначеЕсли ТипЗнч(ХешированиеДанных.ХешСумма) = Тип("Число") Тогда
		Результат = Формат(ХешированиеДанных.ХешСумма, "ЧГ=");
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция ОН_ЗначениеВСтрокуXML(Значение) Экспорт
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Значение, НазначениеТипаXML.Явное);

	Возврат ЗаписьXML.Закрыть();
КонецФункции

Процедура ОН_ВыполнитьМетодКонфигурации(Знач ИмяМетода, Знач Параметры = Неопределено) Экспорт
	ОН_ПроверитьИмяПроцедурыКонфигурации(ИмяМетода);

	// Зарезервировано для новых подсистем

	ПараметрыСтрока = "";
	Если Параметры <> Неопределено И Параметры.Количество() > 0 Тогда
		Для Индекс = 0 По Параметры.ВГраница() Цикл
			ПараметрыСтрока = ПараметрыСтрока + "Параметры[" + Индекс + "],";
		КонецЦикла;
		ПараметрыСтрока = Сред(ПараметрыСтрока, 1, СтрДлина(ПараметрыСтрока) - 1);
	КонецЕсли;

	Выполнить ИмяМетода + "(" + ПараметрыСтрока + ")";
КонецПроцедуры

Процедура ОН_ПроверитьИмяПроцедурыКонфигурации(Знач ИмяПроцедуры)
	ЧастиИмени = СтрРазделить(ИмяПроцедуры, ".");
	Если ЧастиИмени.Количество() <> 2 И ЧастиИмени.Количество() <> 3 Тогда
		ВызватьИсключение СтрШаблон(
			"Неправильный формат параметра ИмяПроцедуры (передано значение: ""%1"") в БазоваяПодсистемаСервер.ОН_ВыполнитьМетодКонфигурации", ИмяПроцедуры);
	КонецЕсли;

	ИмяОбъекта = ЧастиИмени[0];
	Если ЧастиИмени.Количество() = 2 И Метаданные.ОбщиеМодули.Найти(ИмяОбъекта) = Неопределено Тогда
		ВызватьИсключение СтрШаблон(
			"Неправильный формат параметра ИмяПроцедуры (передано значение: ""%1"") в БазоваяПодсистемаСервер.ОН_ВыполнитьМетодКонфигурации:
				|Не найден общий модуль ""%2"".",
			ИмяПроцедуры,
			ИмяОбъекта);
	КонецЕсли;

	Если ЧастиИмени.Количество() = 3 Тогда
		ПолноеИмяОбъекта = ЧастиИмени[0] + "." + ЧастиИмени[1];
		Попытка
			Менеджер = ОН_МенеджерОбъектаПоИмени(ПолноеИмяОбъекта);
		Исключение
			Менеджер = Неопределено;
		КонецПопытки;
		Если Менеджер = Неопределено Тогда
			ВызватьИсключение СтрШаблон(
				"Неправильный формат параметра ИмяПроцедуры (передано значение: ""%1"") в БазоваяПодсистемаСервер.ОН_ВыполнитьМетодКонфигурации:
				           |Не найден менеджер объекта ""%2"".",
				ИмяПроцедуры,
				ПолноеИмяОбъекта);
		КонецЕсли;
	КонецЕсли;

	ИмяМетодаОбъекта = ЧастиИмени[ЧастиИмени.ВГраница()];
	ВременнаяСтруктура = Новый Структура;
	Попытка
		// Проверка того, что ИмяПроцедуры является допустимым идентификатором.
		// Например: МояПроцедура.
		ВременнаяСтруктура.Вставить(ИмяМетодаОбъекта);
	Исключение
		ЗаписьЖурналаРегистрации("Безопасное выполнение метода",
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение СтрШаблон(
			"Неправильный формат параметра ИмяПроцедуры (передано значение: ""%1"") в БазоваяПодсистемаСервер.ОН_ВыполнитьМетодКонфигурации:
			           |Имя метода ""%2"" не соответствует требованиям образования имен процедур и функций.",
			ИмяПроцедуры, ИмяМетодаОбъекта);
	КонецПопытки;
КонецПроцедуры

Функция ОН_МенеджерОбъектаПоИмени(Имя)
	Перем КлассОМ, ИмяОМ, Менеджер;

	ЧастиИмени = СтрРазделить(Имя, ".");

	Если ЧастиИмени.Количество() > 0 Тогда
		КлассОМ = ВРег(ЧастиИмени[0]);
	КонецЕсли;

	Если ЧастиИмени.Количество() > 1 Тогда
		ИмяОМ = ЧастиИмени[1];
	КонецЕсли;

	Если      КлассОМ = "ПЛАНОБМЕНА"
	 Или      КлассОМ = "ПЛАНЫОБМЕНА" Тогда
		Менеджер = ПланыОбмена;
	ИначеЕсли КлассОМ = "СПРАВОЧНИК"
	      Или КлассОМ = "СПРАВОЧНИКИ" Тогда
		Менеджер = Справочники;
	ИначеЕсли КлассОМ = "ДОКУМЕНТ"
	      Или КлассОМ = "ДОКУМЕНТЫ" Тогда
		Менеджер = Документы;
	ИначеЕсли КлассОМ = "ЖУРНАЛДОКУМЕНТОВ"
	      Или КлассОМ = "ЖУРНАЛЫДОКУМЕНТОВ" Тогда
		Менеджер = ЖурналыДокументов;
	ИначеЕсли КлассОМ = "ПЕРЕЧИСЛЕНИЕ"
	      Или КлассОМ = "ПЕРЕЧИСЛЕНИЯ" Тогда
		Менеджер = Перечисления;
	ИначеЕсли КлассОМ = "ОБЩИЙМОДУЛЬ"
	      Или КлассОМ = "ОБЩИЕМОДУЛИ" Тогда

		Возврат ОН_ОбщийМодуль(ИмяОМ);
	ИначеЕсли КлассОМ = "ОТЧЕТ"
	      Или КлассОМ = "ОТЧЕТЫ" Тогда
		Менеджер = Отчеты;
	ИначеЕсли КлассОМ = "ОБРАБОТКА"
	      Или КлассОМ = "ОБРАБОТКИ" Тогда
		Менеджер = Обработки;
	ИначеЕсли КлассОМ = "ПЛАНВИДОВХАРАКТЕРИСТИК"
	      Или КлассОМ = "ПЛАНЫВИДОВХАРАКТЕРИСТИК" Тогда
		Менеджер = ПланыВидовХарактеристик;
	ИначеЕсли КлассОМ = "ПЛАНСЧЕТОВ"
	      Или КлассОМ = "ПЛАНЫСЧЕТОВ" Тогда
		Менеджер = ПланыСчетов;
	ИначеЕсли КлассОМ = "ПЛАНВИДОВРАСЧЕТА"
	      Или КлассОМ = "ПЛАНЫВИДОВРАСЧЕТА" Тогда
		Менеджер = ПланыВидовРасчета;
	ИначеЕсли КлассОМ = "РЕГИСТРСВЕДЕНИЙ"
	      Или КлассОМ = "РЕГИСТРЫСВЕДЕНИЙ" Тогда
		Менеджер = РегистрыСведений;
	ИначеЕсли КлассОМ = "РЕГИСТРНАКОПЛЕНИЯ"
	      Или КлассОМ = "РЕГИСТРЫНАКОПЛЕНИЯ" Тогда
		Менеджер = РегистрыНакопления;
	ИначеЕсли КлассОМ = "РЕГИСТРБУХГАЛТЕРИИ"
	      Или КлассОМ = "РЕГИСТРЫБУХГАЛТЕРИИ" Тогда
		Менеджер = РегистрыБухгалтерии;
	ИначеЕсли КлассОМ = "РЕГИСТРРАСЧЕТА"
	      Или КлассОМ = "РЕГИСТРЫРАСЧЕТА" Тогда

		Если ЧастиИмени.Количество() < 3 Тогда
			// Регистр расчета
			Менеджер = РегистрыРасчета;
		Иначе
			КлассПодчиненногоОМ = ВРег(ЧастиИмени[2]);
			Если ЧастиИмени.Количество() > 3 Тогда
				ИмяПодчиненногоОМ = ЧастиИмени[3];
			КонецЕсли;
			Если КлассПодчиненногоОМ = "ПЕРЕРАСЧЕТ"
			 Или КлассПодчиненногоОМ = "ПЕРЕРАСЧЕТЫ" Тогда
				// Перерасчет
				Попытка
					Менеджер	= РегистрыРасчета[ИмяОМ].Перерасчеты;
					ИмяОМ		= ИмяПодчиненногоОМ;
				Исключение
					Менеджер	= Неопределено;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли КлассОМ = "БИЗНЕСПРОЦЕСС"
	      Или КлассОМ = "БИЗНЕСПРОЦЕССЫ" Тогда
		Менеджер = БизнесПроцессы;
	ИначеЕсли КлассОМ = "ЗАДАЧА"
	      Или КлассОМ = "ЗАДАЧИ" Тогда
		Менеджер = Задачи;
	ИначеЕсли КлассОМ = "КОНСТАНТА"
	      Или КлассОМ = "КОНСТАНТЫ" Тогда
		Менеджер = Константы;
	ИначеЕсли КлассОМ = "ПОСЛЕДОВАТЕЛЬНОСТЬ"
	      Или КлассОМ = "ПОСЛЕДОВАТЕЛЬНОСТИ" Тогда
		Менеджер = Последовательности;
	КонецЕсли;

	Если Менеджер <> Неопределено Тогда
		Если ЗначениеЗаполнено(ИмяОМ) Тогда
			Попытка
				Возврат Менеджер[ИмяОМ];
			Исключение
				Менеджер = Неопределено;
			КонецПопытки;
		Иначе
			Возврат Менеджер;
		КонецЕсли;
	КонецЕсли;

	ВызватьИсключение СтрШаблон("Не удалось получить менеджер для объекта ""%1""", Имя);
КонецФункции

Функция ОН_ОбщийМодуль(Имя) Экспорт
	Если Метаданные.ОбщиеМодули.Найти(Имя) <> Неопределено Тогда
		// АПК:488-выкл ВычислитьВБезопасномРежиме не используется, чтобы избежать вызова ОбщийМодуль рекурсивно.
		УстановитьБезопасныйРежим(Истина);
		Модуль = Вычислить(Имя);
		// АПК:488-вкл
	ИначеЕсли СтрЧислоВхождений(Имя, ".") = 1 Тогда
		Возврат ОН_СерверныйМодульМенеджера(Имя);
	Иначе
		Модуль = Неопределено;
	КонецЕсли;

	Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
		ВызватьИсключение СтрШаблон(
			"Общий модуль ""%1"" не найден.",
			Имя);
	КонецЕсли;

	Возврат Модуль;
КонецФункции

Функция ОН_СерверныйМодульМенеджера(Имя)
	ОбъектНайден = Ложь;

	ЧастиИмени = СтрРазделить(Имя, ".");
	Если ЧастиИмени.Количество() = 2 Тогда
		ИмяВида = ВРег(ЧастиИмени[0]);
		ИмяОбъекта = ЧастиИмени[1];

		Если ИмяВида = ВРег("Константы") Тогда
			Если Метаданные.Константы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыСведений") Тогда
			Если Метаданные.РегистрыСведений.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыНакопления") Тогда
			Если Метаданные.РегистрыНакопления.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыБухгалтерии") Тогда
			Если Метаданные.РегистрыБухгалтерии.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыРасчета") Тогда
			Если Метаданные.РегистрыРасчета.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Справочники") Тогда
			Если Метаданные.Справочники.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Документы") Тогда
			Если Метаданные.Документы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Отчеты") Тогда
			Если Метаданные.Отчеты.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Обработки") Тогда
			Если Метаданные.Обработки.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("БизнесПроцессы") Тогда
			Если Метаданные.БизнесПроцессы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ЖурналыДокументов") Тогда
			Если Метаданные.ЖурналыДокументов.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Задачи") Тогда
			Если Метаданные.Задачи.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыСчетов") Тогда
			Если Метаданные.ПланыСчетов.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыОбмена") Тогда
			Если Метаданные.ПланыОбмена.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыВидовХарактеристик") Тогда
			Если Метаданные.ПланыВидовХарактеристик.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыВидовРасчета") Тогда
			Если Метаданные.ПланыВидовРасчета.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Не ОбъектНайден Тогда
		ВызватьИсключение СтрШаблон(
			"Объект метаданных ""%1"" не найден,
			|либо для него не поддерживается получение модуля менеджера.",
			Имя);
	КонецЕсли;

	// АПК:488-выкл ВычислитьВБезопасномРежиме не используется, чтобы избежать вызова ОбщийМодуль рекурсивно.
	УстановитьБезопасныйРежим(Истина);
	Модуль = Вычислить(Имя);
	// АПК:488-вкл

	Возврат Модуль;
КонецФункции

#КонецОбласти

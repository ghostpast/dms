///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СтандартныеПодсистемы

Процедура СП_УстановитьПустуюФормуНаРабочийСтол() Экспорт
	КлючОбъекта			= "Общее/НастройкиНачальнойСтраницы";
	ТекущиеНастройки	= ХранилищеСистемныхНастроек.Загрузить(КлючОбъекта);

	Если ТипЗнч(ТекущиеНастройки) = Тип("НастройкиНачальнойСтраницы") Тогда
		ТекущийСоставФорм = ТекущиеНастройки.ПолучитьСоставФорм();
		Если ТекущийСоставФорм.ПраваяКолонка.Количество() = 0
		   И ТекущийСоставФорм.ЛеваяКолонка.Количество() = 1
		   И ТекущийСоставФорм.ЛеваяКолонка[0] = "ОбщаяФорма.ПустойРабочийСтол" Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	СоставФорм = Новый СоставФормНачальнойСтраницы;
	СоставФорм.ЛеваяКолонка.Добавить("ОбщаяФорма.ПустойРабочийСтол");
	Настройки = Новый НастройкиНачальнойСтраницы;
	Настройки.УстановитьСоставФорм(СоставФорм);
	ХранилищеСистемныхНастроек.Сохранить(КлючОбъекта, "", Настройки);
КонецПроцедуры

Функция СП_ПараметрыКлиентаНаСервере() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыКлиента = ПараметрыСеанса.ПараметрыКлиентаНаСервере;
	УстановитьПривилегированныйРежим(Ложь);

	Если ПараметрыКлиента.Количество() = 0
	   И ТекущийРежимЗапуска() <> Неопределено Тогда

		ВызватьИсключение "Не заполнены параметры клиента на сервере.";
	КонецЕсли;

	Возврат ПараметрыКлиента;
КонецФункции

Процедура СП_СохранитьГлавныйУзел() Экспорт
	ГлавныйУзелМенеджер				= Константы.ГлавныйУзел.СоздатьМенеджерЗначения();
	ГлавныйУзелМенеджер.Значение	= ПланыОбмена.ГлавныйУзел();
	ОбновлениеВерсииИБСервер.ОИБ_ЗаписатьДанные(ГлавныйУзелМенеджер);
КонецПроцедуры

Функция СП_ДобавитьПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	ЭтоВызовПередНачаломРаботыСистемы = Параметры.ПолученныеПараметрыКлиента <> Неопределено;

	// Обязательные параметры для продолжения работы.
	Параметры.Вставить("ЭтоРазделеннаяКонфигурация",						Ложь);
	Параметры.Вставить("ЕстьДоступДляОбновленияВерсииПлатформы",			ПользователиСервер.П_ЭтоПолноправныйПользователь(,Истина));

	Параметры.Вставить("ИменаПодсистем",									БазоваяПодсистемаСерверПовтИсп.СП_ИменаПодсистем());
	Параметры.Вставить("ЭтоБазоваяВерсияКонфигурации",						СтрНайти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0);
	Параметры.Вставить("ЭтоУчебнаяПлатформа",								СП_ЭтоУчебнаяПлатформа());
	Параметры.Вставить("ИмяТекущегоПользователя",							СП_ТекущийПользователь().Имя);
	Параметры.Вставить("ИмяCOMСоединителя",									БазоваяПодсистемаКлиентСервер.ОН_ИмяCOMСоединителя());
	Параметры.Вставить("КодОсновногоЯзыка",									ОН_КодОсновногоЯзыка());

	Параметры.Вставить("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы",	СП_ЗапрашиватьПодтверждениеПриЗавершенииПрограммы());

	ОбщиеПараметры = ОН_ОбщиеПараметрыБазовойФункциональности();

	Параметры.Вставить("МинимальнаяВерсияПлатформы",   ОбщиеПараметры.МинимальнаяВерсияПлатформы);
	Параметры.Вставить("РекомендуемаяВерсияПлатформы", ОбщиеПараметры.РекомендуемаяВерсияПлатформы);

	Параметры.Вставить("РекомендуемыйОбъемОперативнойПамяти", ОбщиеПараметры.РекомендуемыйОбъемОперативнойПамяти);
	Параметры.Вставить("ТребуетсяПоказРекомендацииПоОбъемуОперативнойПамяти", СП_ТребуетсяПоказРекомендацииПоОбъемуОперативнойПамяти());

	Параметры.Вставить("ЭтоСеансВнешнегоПользователя", ПользователиСервер.П_ЭтоСеансВнешнегоПользователя());
	Параметры.Вставить("ИнформационнаяБазаФайловая",   ОН_ИнформационнаяБазаФайловая());

	Если ЭтоВызовПередНачаломРаботыСистемы Тогда
		Параметры.Вставить("ЭлементыСтиля", СП_НаборЭлементовСтиля());
	КонецЕсли;

	Если ЭтоВызовПередНачаломРаботыСистемы
	   И Не Параметры.ПолученныеПараметрыКлиента.Свойство("ОпцииИнтерфейса") Тогда

		Параметры.Вставить("ОпцииИнтерфейса", БазоваяПодсистемаСерверПовтИсп.СП_ОпцииИнтерфейса());
	КонецЕсли;

	Если ЭтоВызовПередНачаломРаботыСистемы Тогда
		ОшибкаНедостаточноПравДляВходаВПрограмму = ПользователиСервер.сП_ОшибкаНедостаточноПравДляВходаВПрограмму(
			Не Параметры.ПолученныеПараметрыКлиента.Свойство("ОшибкаНедостаточноПравДляВходаВПрограмму"));

		Если ЗначениеЗаполнено(ОшибкаНедостаточноПравДляВходаВПрограмму) Тогда
			Параметры.Вставить("ОшибкаНедостаточноПравДляВходаВПрограмму", ОшибкаНедостаточноПравДляВходаВПрограмму);

			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	// Зарезервировано для новых подсистем

	Если Не ОбновлениеВерсииИБСервер.сОИБ_ДобавитьПараметрыРаботыКлиентаПриЗапуске(Параметры)
	   И ЭтоВызовПередНачаломРаботыСистемы Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ЭтоВызовПередНачаломРаботыСистемы
	   И Не Параметры.ПолученныеПараметрыКлиента.Свойство("ПоказатьНерекомендуемуюВерсиюПлатформы")
	   И СП_ПоказатьНерекомендуемуюВерсиюПлатформы(Параметры) Тогда

		Параметры.Вставить("ПоказатьНерекомендуемуюВерсиюПлатформы");
		БазоваяПодсистемаВызовСервера.СП_СкрытьРабочийСтолПриНачалеРаботыСистемы();

		Возврат Ложь;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	Если ЭтоВызовПередНачаломРаботыСистемы
	   И Не Параметры.ПолученныеПараметрыКлиента.Свойство("ВосстановитьСвязьСГлавнымУзлом")
	   И ПланыОбмена.ГлавныйУзел() = Неопределено
	   И ЗначениеЗаполнено(Константы.ГлавныйУзел.Получить()) Тогда

		УстановитьПривилегированныйРежим(Ложь);
		Параметры.Вставить("ВосстановитьСвязьСГлавнымУзлом", ПользователиСервер.П_ЭтоПолноправныйПользователь(, Истина, Ложь));
		БазоваяПодсистемаВызовСервера.СП_СкрытьРабочийСтолПриНачалеРаботыСистемы();

		Возврат Ложь;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);

	Если ЭтоВызовПередНачаломРаботыСистемы
	   И Не Параметры.ПолученныеПараметрыКлиента.Свойство("ВыбратьНачальныеРегиональныеНастройкиИБ")
	   И СП_ТребуетсяУстановкаРегиональныхНастроекИнформационнойБазы() Тогда

		Параметры.Вставить("ВыбратьНачальныеРегиональныеНастройкиИБ",
			ПользователиСервер.П_ЭтоПолноправныйПользователь(, Истина, Ложь));
		БазоваяПодсистемаВызовСервера.СП_СкрытьРабочийСтолПриНачалеРаботыСистемы();

		Возврат Ложь;
	КонецЕсли;

	Если ОбновлениеВерсииИБСервер.ОИБ_НеобходимоОбновлениеИнформационнойБазы()
		И ОбновлениеВерсииИБСервер.сОИБ_СтатусНевыполненныхОбработчиков(Истина) = "СтатусНеВыполнено" Тогда
		Параметры.Вставить("НеобходимоВыполнитьОбработчикиОтложенногоОбновления");
	КонецЕсли;

	// Зарезервировано для новых подсистем

	// Проверка необходимости предварительного обновления параметров работы программы.
	Если ЭтоВызовПередНачаломРаботыСистемы
	   И НЕ Параметры.ПолученныеПараметрыКлиента.Свойство("НеобходимоОбновлениеПараметровРаботыПрограммы") Тогда

		Если РегистрыСведений.ПараметрыРаботыПрограммы.НеобходимоОбновление() Тогда
			// Будет выполнено предварительное обновление.
			Параметры.Вставить("НеобходимоОбновлениеПараметровРаботыПрограммы");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	// Обязательные параметры для всех режимов работы.
	Параметры.Вставить("ПодробнаяИнформация", Метаданные.ПодробнаяИнформация);

	Если ОбновлениеВерсииИБСервер.сОИБ_НеобходимоОбновлениеНеразделенныхДанныхИнформационнойБазы() Тогда
		Параметры.Вставить("НеобходимоОбновлениеНеразделенныхДанныхИнформационнойБазы");
	КонецЕсли;

	// Зарезервировано для новых подсистем

	// Параметры для работы в локальном режиме или
	// в сеансе с установленными значениями разделителей в модели сервиса.

	Если ОбновлениеВерсииИБСервер.ОИБ_НеобходимоОбновлениеИнформационнойБазы() Тогда
		Параметры.Вставить("НеобходимоОбновлениеИнформационнойБазы");
		БазоваяПодсистемаВызовСервера.СП_СкрытьРабочийСтолПриНачалеРаботыСистемы();
	КонецЕсли;

	// Зарезервировано для новых подсистем

	Отказ = Ложь;
	Если ЭтоВызовПередНачаломРаботыСистемы Тогда
		ПользователиСервер.сП_ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры, Отказ, Истина);
	КонецЕсли;
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;

	СП_ДобавитьОбщиеПараметрыРаботыКлиента(Параметры);

	Если ЭтоВызовПередНачаломРаботыСистемы
	   И Параметры.Свойство("НеобходимоОбновлениеИнформационнойБазы") Тогда
		// Не следует добавлять остальные параметры до окончания обновления ИБ,
		// так как они могут рассчитывать, что обновление ИБ уже выполнено.
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
КонецФункции

Функция СП_ЭтоУчебнаяПлатформа() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();

	Попытка
		ПользовательОС = ТекущийПользователь.ПользовательОС;
	Исключение
		ПользовательОС = Неопределено;
	КонецПопытки;

	Возврат ПользовательОС = Неопределено;
КонецФункции

Функция СП_ТекущийПользователь() Экспорт
	// Вычисляем актуальное имя пользователя, даже если оно было ранее изменено в текущем сеансе;
	// Например, для подключения к текущей ИБ через внешнее соединение из этого сеанса;
	// Во всех остальных случаях достаточно получить ПользователиИнформационнойБазы.ТекущийПользователь().
	ТекущийПользователь = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
		ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);

	Если ТекущийПользователь = Неопределено Тогда
		ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	КонецЕсли;

	Возврат ТекущийПользователь;
КонецФункции

Функция СП_ЗапрашиватьПодтверждениеПриЗавершенииПрограммы() Экспорт
	Результат = ОН_ХранилищеЗагрузить(ХранилищеОбщихНастроек,
		"ОбщиеНастройкиПользователя",
		"ЗапрашиватьПодтверждениеПриЗавершенииПрограммы",
		Неопределено,
		Неопределено,
		Неопределено);

	Если Результат = Неопределено Тогда
		Результат = ОН_ОбщиеПараметрыБазовойФункциональности().ЗапрашиватьПодтверждениеПриЗавершенииПрограммы;
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция СП_ТребуетсяПоказРекомендацииПоОбъемуОперативнойПамяти()
	Если ОН_ЭтоВебКлиент()
	 Или Не ОН_ИнформационнаяБазаФайловая() Тогда
		Возврат Ложь;
	КонецЕсли;

	ОперативнаяПамять = СП_ПараметрыКлиентаНаСервере().Получить("ОперативнаяПамять");
	Если ТипЗнч(ОперативнаяПамять) <> Тип("Число") Тогда
		Возврат Ложь; // Параметр клиента на сервере не заполнен (нет клиентского приложения).
	КонецЕсли;

	РекомендуемыйОбъем		= ОН_ОбщиеПараметрыБазовойФункциональности().РекомендуемыйОбъемОперативнойПамяти;
	СохраненнаяРекомендация	= ОН_ХранилищеЗагрузить(ХранилищеОбщихНастроек,
		"ОбщиеНастройкиПользователя",
		"РекомендацияПоОбъемуОперативнойПамяти",
		Неопределено,
		Неопределено,
		Неопределено);

	Рекомендация = Новый Структура;
	Рекомендация.Вставить("Показывать",				Истина);
	Рекомендация.Вставить("ДатаПредыдущегоПоказа",	Дата(1, 1, 1));

	Если ТипЗнч(СохраненнаяРекомендация) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Рекомендация, СохраненнаяРекомендация);
	КонецЕсли;

	Возврат ОперативнаяПамять < РекомендуемыйОбъем
		И (Рекомендация.Показывать
		   Или (ТекущаяДатаСеанса() - Рекомендация.ДатаПредыдущегоПоказа) > 60*60*24*60)
КонецФункции

Функция СП_НаборЭлементовСтиля()
	НаборЭлементовСтиля = Новый Структура;
	Для каждого ЭлементСтиля Из Метаданные.ЭлементыСтиля Цикл
		Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение Тогда
			НаборЭлементовСтиля.Вставить(ЭлементСтиля.Имя, Новый ХранилищеЗначения(ЭлементСтиля.Значение));
		Иначе
			НаборЭлементовСтиля.Вставить(ЭлементСтиля.Имя, ЭлементСтиля.Значение);
		КонецЕсли;
	КонецЦикла;

	Возврат Новый ФиксированнаяСтруктура(НаборЭлементовСтиля);
КонецФункции

Функция СП_ПоказатьНерекомендуемуюВерсиюПлатформы(Параметры)
	// Проверка, что пользователь не внешний.
	УстановитьПривилегированныйРежим(Истина);

	Запрос			= Новый Запрос;
	Запрос.Текст	=
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|ГДЕ
	|	ВнешниеПользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";

	Запрос.УстановитьПараметр("ИдентификаторПользователяИБ",
		ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);

	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;

	СистемнаяИнформация	= Новый СистемнаяИнформация;
	Текущая				= СистемнаяИнформация.ВерсияПриложения;
	Минимальная			= Параметры.МинимальнаяВерсияПлатформы;
	Рекомендуемая		= Параметры.РекомендуемаяВерсияПлатформы;

	Возврат БазоваяПодсистемаКлиентСервер.ОН_СравнитьВерсии(Текущая, Минимальная) < 0
		Или БазоваяПодсистемаКлиентСервер.ОН_СравнитьВерсии(Текущая, Рекомендуемая) < 0;
КонецФункции

Процедура СП_ДобавитьОбщиеПараметрыРаботыКлиента(Параметры)
	УстановитьПривилегированныйРежим(Истина);
	Параметры.Вставить("АвторизованныйПользователь", ПользователиСервер.П_АвторизованныйПользователь());
	Параметры.Вставить("ЗаголовокПриложения", СокрЛП(Константы.ЗаголовокСистемы.Получить()));
	УстановитьПривилегированныйРежим(Ложь);

	Параметры.Вставить("ЭтоГлавныйУзел", НЕ ОН_ЭтоПодчиненныйУзелРИБ());

	Параметры.Вставить("ТребуетсяОбновлениеКонфигурацииУзлаРИБ",
		ОН_ЭтоПодчиненныйУзелРИБ() И КонфигурацияИзменена());
КонецПроцедуры

Функция СП_ТребуетсяУстановкаРегиональныхНастроекИнформационнойБазы()
	УстановитьПривилегированныйРежим(Истина);
	ТребуетсяУстановкаОсновногоЯзыка = ?(Метаданные.Языки.Количество() > 1, Не ЗначениеЗаполнено(Константы.ОсновнойЯзык.Получить()), Ложь);

	Возврат ТребуетсяУстановкаОсновногоЯзыка;
КонецФункции

Процедура СП_ДобавитьПараметрыРаботыКлиента(Параметры)  Экспорт
	Параметры.Вставить("ИменаПодсистем",							БазоваяПодсистемаСерверПовтИсп.сП_ИменаПодсистем());
	Параметры.Вставить("ДоступноИспользованиеРазделенныхДанных",	Истина);
	Параметры.Вставить("РазделениеВключено",						Ложь);

	Параметры.Вставить("ЭтоБазоваяВерсияКонфигурации",	СтрНайти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0);
	Параметры.Вставить("ЭтоУчебнаяПлатформа",			СП_ЭтоУчебнаяПлатформа());
	Параметры.Вставить("ИмяCOMСоединителя",				БазоваяПодсистемаКлиентСервер.ОН_ИмяCOMСоединителя());
	Параметры.Вставить("ЭлементыСтиля",					СП_НаборЭлементовСтиля());

	СП_ДобавитьОбщиеПараметрыРаботыКлиента(Параметры);

	Параметры.Вставить("ИмяКонфигурации",     Метаданные.Имя);
	Параметры.Вставить("СинонимКонфигурации", Метаданные.Синоним);
	Параметры.Вставить("ВерсияКонфигурации",  Метаданные.Версия);
	Параметры.Вставить("ПодробнаяИнформация", Метаданные.ПодробнаяИнформация);
	Параметры.Вставить("КодОсновногоЯзыка",   ОН_КодОсновногоЯзыка());

	Параметры.Вставить("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы",
		СП_ЗапрашиватьПодтверждениеПриЗавершенииПрограммы());

	Параметры.Вставить("ИнформационнаяБазаФайловая", ОН_ИнформационнаяБазаФайловая());

	// Зарезервировано для новых подсистем
КонецПроцедуры

#КонецОбласти

#Область ОбщегоНазначения

Функция ОН_ПрочитатьДанныеИзБезопасногоХранилища(Владелец, Ключи = "Пароль", ОбщиеДанные = Неопределено) Экспорт
	БазоваяПодсистемаКлиентСервер.ОН_Проверить(ЗначениеЗаполнено(Владелец),
		СтрШаблон(
			"Недопустимое значение параметра %1 в %2.
				|параметр должен содержать ссылку; передано значение: %3 (тип %4).",
			"Владелец", "БазоваяПодсистемаСервер.ОН_ПрочитатьДанныеИзБезопасногоХранилища", Владелец, ТипЗнч(Владелец)));

	Результат = Новый Структура(Ключи);

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
		|	БезопасноеХранилищеДанных.Данные КАК Данные
		|ИЗ
		|	РегистрСведений.БезопасноеХранилищеДанных КАК БезопасноеХранилищеДанных
		|ГДЕ
		|	БезопасноеХранилищеДанных.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", Владелец);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();

	Если РезультатЗапроса.Следующий() Тогда
		Если ЗначениеЗаполнено(РезультатЗапроса.Данные) Тогда
			СохраненныеДанные = РезультатЗапроса.Данные.Получить();
			Если ЗначениеЗаполнено(СохраненныеДанные) Тогда
				ЗаполнитьЗначенияСвойств(Результат, СохраненныеДанные);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Результат <> Неопределено И Результат.Количество() = 1 Тогда
		Возврат ?(Результат.Свойство(Ключи), Результат[Ключи], Неопределено);
	КонецЕсли;

	Возврат Результат;
КонецФункции

Процедура ОН_ЗаписатьДанныеВБезопасноеХранилище(Владелец, Данные, Ключ = "Пароль") Экспорт
	БазоваяПодсистемаКлиентСервер.ОН_Проверить(ЗначениеЗаполнено(Владелец),
		СтрШаблон(
			"Недопустимое значение параметра %1 в %2.
				|параметр должен содержать ссылку; передано значение: %3 (тип %4).",
			"Владелец", "БазоваяПодсистемаСервер.онЗаписатьДанныеВБезопасноеХранилище", Владелец, ТипЗнч(Владелец)));

	БазоваяПодсистемаКлиентСервер.ОН_Проверить(ТипЗнч(Ключ) = Тип("Строка"),
		СтрШаблон(
			"Недопустимое значение параметра %1 в %2.
				|параметр должен содержать строку; передано значение: %3 (тип %4).",
			"Ключ", "БазоваяПодсистемаСервер.онЗаписатьДанныеВБезопасноеХранилище", Ключ, ТипЗнч(Ключ)));

	БезопасноеХранилищеДанных			= РегистрыСведений.БезопасноеХранилищеДанных.СоздатьМенеджерЗаписи();

	БезопасноеХранилищеДанных.Владелец	= Владелец;
	БезопасноеХранилищеДанных.Прочитать();
	Если Данные <> Неопределено Тогда
		Если БезопасноеХранилищеДанных.Выбран() Тогда
			ДанныеДляСохранения = БезопасноеХранилищеДанных.Данные.Получить();
			Если ТипЗнч(ДанныеДляСохранения) <> Тип("Структура") Тогда
				ДанныеДляСохранения = Новый Структура();
			КонецЕсли;
			ДанныеДляСохранения.Вставить(Ключ, Данные);
			ДанныеДляХранилищеЗначения			= Новый ХранилищеЗначения(ДанныеДляСохранения, Новый СжатиеДанных(6));
			БезопасноеХранилищеДанных.Данные	= ДанныеДляХранилищеЗначения;
			БезопасноеХранилищеДанных.Записать();
		Иначе
			ДанныеДляСохранения					= Новый Структура(Ключ, Данные);
			ДанныеДляХранилищеЗначения			= Новый ХранилищеЗначения(ДанныеДляСохранения, Новый СжатиеДанных(6));
			БезопасноеХранилищеДанных.Данные	= ДанныеДляХранилищеЗначения;
			БезопасноеХранилищеДанных.Владелец	= Владелец;
			БезопасноеХранилищеДанных.Записать();
		КонецЕсли;
	Иначе
		БезопасноеХранилищеДанных.Удалить();
	КонецЕсли;
КонецПроцедуры

Функция ОН_ЭтоМобильныйКлиент() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	ЭтоМобильныйКлиент = СП_ПараметрыКлиентаНаСервере().Получить("ЭтоМобильныйКлиент");

	Если ЭтоМобильныйКлиент = Неопределено Тогда
		Возврат Ложь; // Нет клиентского приложения.
	КонецЕсли;

	Возврат ЭтоМобильныйКлиент;
КонецФункции

Функция ОН_ЭтоВебКлиент() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ЭтоВебКлиент = СП_ПараметрыКлиентаНаСервере().Получить("ЭтоВебКлиент");

	Если ЭтоВебКлиент = Неопределено Тогда
		Возврат Ложь; // Нет клиентского приложения.
	КонецЕсли;

	Возврат ЭтоВебКлиент;
КонецФункции

Функция ОН_ФиксированныеДанные(Данные, ВызыватьИсключение = Истина) Экспорт
	Если ТипЗнч(Данные) = Тип("Массив") Тогда
		Массив = Новый Массив;

		Для каждого Значение Из Данные Цикл
			Если ТипЗнч(Значение) = Тип("Структура")
			 ИЛИ ТипЗнч(Значение) = Тип("Соответствие")
			 ИЛИ ТипЗнч(Значение) = Тип("Массив") Тогда

				Массив.Добавить(ОН_ФиксированныеДанные(Значение, ВызыватьИсключение));
			Иначе
				Если ВызыватьИсключение Тогда
					ОН_ПроверкаФиксированностиДанных(Значение, Истина);
				КонецЕсли;
				Массив.Добавить(Значение);
			КонецЕсли;
		КонецЦикла;

		Возврат Новый ФиксированныйМассив(Массив);
	ИначеЕсли ТипЗнч(Данные) = Тип("Структура")
	      ИЛИ ТипЗнч(Данные) = Тип("Соответствие") Тогда

		Если ТипЗнч(Данные) = Тип("Структура") Тогда
			Коллекция = Новый Структура;
		Иначе
			Коллекция = Новый Соответствие;
		КонецЕсли;

		Для каждого КлючИЗначение Из Данные Цикл
			Значение = КлючИЗначение.Значение;

			Если ТипЗнч(Значение) = Тип("Структура")
			 ИЛИ ТипЗнч(Значение) = Тип("Соответствие")
			 ИЛИ ТипЗнч(Значение) = Тип("Массив") Тогда

				Коллекция.Вставить(
					КлючИЗначение.Ключ, ОН_ФиксированныеДанные(Значение, ВызыватьИсключение));
			Иначе
				Если ВызыватьИсключение Тогда
					ОН_ПроверкаФиксированностиДанных(Значение, Истина);
				КонецЕсли;
				Коллекция.Вставить(КлючИЗначение.Ключ, Значение);
			КонецЕсли;
		КонецЦикла;

		Если ТипЗнч(Данные) = Тип("Структура") Тогда
			Возврат Новый ФиксированнаяСтруктура(Коллекция);
		Иначе
			Возврат Новый ФиксированноеСоответствие(Коллекция);
		КонецЕсли;

	ИначеЕсли ВызыватьИсключение Тогда
		ОН_ПроверкаФиксированностиДанных(Данные);
	КонецЕсли;

	Возврат Данные;
КонецФункции

Процедура ОН_ПроверкаФиксированностиДанных(Данные, ДанныеВЗначенииФиксированныхТипов = Ложь)
	ТипДанных = ТипЗнч(Данные);

	Если ТипДанных = Тип("ХранилищеЗначения")
	 ИЛИ ТипДанных = Тип("ФиксированныйМассив")
	 ИЛИ ТипДанных = Тип("ФиксированнаяСтруктура")
	 ИЛИ ТипДанных = Тип("ФиксированноеСоответствие") Тогда

		Возврат;
	КонецЕсли;

	Если ДанныеВЗначенииФиксированныхТипов Тогда
		Если ТипДанных = Тип("Булево")
		 ИЛИ ТипДанных = Тип("Строка")
		 ИЛИ ТипДанных = Тип("Число")
		 ИЛИ ТипДанных = Тип("Дата")
		 ИЛИ ТипДанных = Тип("Неопределено")
		 ИЛИ ТипДанных = Тип("УникальныйИдентификатор")
		 ИЛИ ТипДанных = Тип("Null")
		 ИЛИ ТипДанных = Тип("Тип")
		 ИЛИ ТипДанных = Тип("ХранилищеЗначения")
		 ИЛИ ТипДанных = Тип("ОбщийМодуль")
		 ИЛИ ТипДанных = Тип("ОбъектМетаданных")
		 ИЛИ ТипДанных = Тип("ТипЗначенияXDTO")
		 ИЛИ ТипДанных = Тип("ТипОбъектаXDTO")
		 ИЛИ (ТипДанных <> Тип("Неопределено") И БазоваяПодсистемаСерверПовтИсп.СП_ОписаниеТипаВсеСсылки().СодержитТип(ТипДанных)) Тогда

			Возврат;
		КонецЕсли;
	КонецЕсли;

	ВызватьИсключение СтрШаблон(
		"Ошибка в функции ФиксированныеДанные общего модуля БазоваяПодсистемаСервер.
			|Данные типа ""%1"" не могут быть зафиксированы.",
		Строка(ТипДанных) );
КонецПроцедуры

Функция ОН_КодОсновногоЯзыка() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	Возврат ПараметрыСеанса.ОсновнойЯзык;
КонецФункции

Функция ОН_ХранилищеЗагрузить(МенеджерХранилища, КлючОбъекта, КлючНастроек, ЗначениеПоУмолчанию,
			ОписаниеНастроек, ИмяПользователя)
	Результат = Неопределено;

	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Результат = МенеджерХранилища.Загрузить(КлючОбъекта, ОН_КлючНастроек(КлючНастроек),
			ОписаниеНастроек, ИмяПользователя);
	КонецЕсли;

	Если Результат = Неопределено Тогда
		Результат = ЗначениеПоУмолчанию;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		Если ОН_ОчиститьНесуществующиеСсылки(Результат) Тогда
			Результат = ЗначениеПоУмолчанию;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция ОН_КлючНастроек(Знач Строка)
	Возврат ОН_СократитьСтрокуКонтрольнойСуммой(Строка, 128);
КонецФункции

Функция ОН_СократитьСтрокуКонтрольнойСуммой(Строка, МаксимальнаяДлина) Экспорт
	БазоваяПодсистемаКлиентСервер.ОН_Проверить(МаксимальнаяДлина >= 32, "Параметр МаксимальнаяДлина не может быть меньше 32",
		"БазоваяПодсистемаСервер.ОН_СократитьСтрокуКонтрольнойСуммой");

	Результат = Строка;
	Если СтрДлина(Строка) > МаксимальнаяДлина Тогда
		Результат			= Лев(Строка, МаксимальнаяДлина - 32);
		ХешированиеДанных	= Новый ХешированиеДанных(ХешФункция.MD5);
		ХешированиеДанных.Добавить(Сред(Строка, МаксимальнаяДлина - 32 + 1));
		Результат			= Результат + СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция ОН_ОчиститьНесуществующиеСсылки(Значение)
	Тип = ТипЗнч(Значение);
	Если Тип = Тип("Неопределено")
		Или Тип = Тип("Булево")
		Или Тип = Тип("Строка")
		Или Тип = Тип("Число")
		Или Тип = Тип("Дата") Тогда // Оптимизация - часто используемые примитивные типы.

		Возврат Ложь; // Не ссылка.
	ИначеЕсли Тип = Тип("Массив") Тогда
		Количество = Значение.Количество();
		Для Номер = 1 По Количество Цикл
			ОбратныйИндекс = Количество - Номер;
			Если ОН_ОчиститьНесуществующиеСсылки(Значение[ОбратныйИндекс]) Тогда
				Значение.Удалить(ОбратныйИндекс);
			КонецЕсли;
		КонецЦикла;

		Возврат Ложь; // Не ссылка.
	ИначеЕсли Тип = Тип("Структура")
		Или Тип = Тип("Соответствие") Тогда

		Для Каждого КлючИЗначение Из Значение Цикл
			Если ОН_ОчиститьНесуществующиеСсылки(КлючИЗначение.Значение) Тогда
				Значение.Вставить(КлючИЗначение.Ключ, Неопределено);
			КонецЕсли;
		КонецЦикла;

		Возврат Ложь; // Не ссылка.
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип)
		Или Справочники.ТипВсеСсылки().СодержитТип(Тип)
		Или Перечисления.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип)
		Или БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
		Или Задачи.ТипВсеСсылки().СодержитТип(Тип) Тогда
		// Ссылочный тип, исключая ТочкаМаршрутаБизнесПроцессаСсылка.

		Если Значение.Пустая() Тогда
			Возврат Ложь; // Ссылка пустая.
		КонецЕсли;

		Возврат ОН_ЗначениеРеквизитаОбъекта(Значение, "Ссылка") = Неопределено;
	Иначе
		Возврат Ложь; // Не ссылка.
	КонецЕсли;
КонецФункции

Функция ОН_ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты, ВыбратьРазрешенные = Ложь) Экспорт
	// Если передано имя предопределенного.
	Если ТипЗнч(Ссылка) = Тип("Строка") Тогда
		ПолноеИмяПредопределенногоЭлемента = Ссылка;

		// Вычисление ссылки по имени предопределенного.
		// - дополнительно выполняет проверку метаданных предопределенного, выполняется предварительно.
		Попытка
			Ссылка = ОН_ПредопределенныйЭлемент(ПолноеИмяПредопределенногоЭлемента);
		Исключение
			ТекстОшибки = СтрШаблон(
			"Неверный первый параметр Ссылка в функции БазоваяПодсистемаСервер.ОН_ЗначенияРеквизитовОбъекта:
				|%1", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;

		// Разбор полного имени предопределенного.
		ЧастиПолногоИмени			= СтрРазделить(ПолноеИмяПредопределенногоЭлемента, ".");
		ПолноеИмяОбъектаМетаданных	= ЧастиПолногоИмени[0] + "." + ЧастиПолногоИмени[1];

		// Если предопределенный не создан в ИБ, то требуется выполнить проверку доступа к объекту.
		// В других сценариях проверка доступа выполняется в момент исполнения запроса.
		Если Ссылка = Неопределено Тогда
			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
			Если Не ПравоДоступа("Чтение", МетаданныеОбъекта) Тогда
				ВызватьИсключение СтрШаблон(
					"Недостаточно прав для работы с таблицей ""%1""", ПолноеИмяОбъектаМетаданных);
			КонецЕсли;
		КонецЕсли;
	Иначе // Если передана ссылка.
		Попытка
			ПолноеИмяОбъектаМетаданных = Ссылка.Метаданные().ПолноеИмя();
		Исключение
			ВызватьИсключение
				"Неверный первый параметр Ссылка в функции БазоваяПодсистемаСервер.ОН_ЗначенияРеквизитовОбъекта:
					|- Значение должно быть ссылкой или именем предопределенного элемента";
		КонецПопытки;
	КонецЕсли;

	// Разбор реквизитов, если второй параметр Строка.
	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
		Если ПустаяСтрока(Реквизиты) Тогда
			Возврат Новый Структура;
		КонецЕсли;

		// Удаление пробелов.
		Реквизиты = СтрЗаменить(Реквизиты, " ", "");
		// Преобразование параметра в массив полей.
		Реквизиты = СтрРазделить(Реквизиты, ",");
	КонецЕсли;

	// Приведение реквизитов к единому формату.
	СтруктураПолей = Новый Структура;
	Если ТипЗнч(Реквизиты) = Тип("Структура")
		Или ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда

		СтруктураПолей = Реквизиты;
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив")
		Или ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда

		Для Каждого Реквизит Из Реквизиты Цикл
			Попытка
				ПсевдонимПоля = СтрЗаменить(Реквизит, ".", "");
				СтруктураПолей.Вставить(ПсевдонимПоля, Реквизит);
			Исключение
				// Если псевдоним не является ключом.

				// Поиск ошибки доступности полей.
				Результат = ОН_НайтиОшибкуДоступностиРеквизитовОбъекта(ПолноеИмяОбъектаМетаданных, Реквизиты);
				Если Результат.Ошибка Тогда
					ВызватьИсключение СтрШаблон(
						"Неверный второй параметр Реквизиты в функции БазоваяПодсистемаСервер.ОН_ЗначенияРеквизитовОбъекта: %1",
						Результат.ОписаниеОшибки);
				КонецЕсли;

				// Не удалось распознать ошибку, проброс первичной ошибки.
				ВызватьИсключение;
			КонецПопытки;
		КонецЦикла;
	Иначе
		ВызватьИсключение СтрШаблон(
			"Неверный тип второго параметра Реквизиты в функции БазоваяПодсистемаСервер.ОН_ЗначенияРеквизитовОбъекта: %1",
			Строка(ТипЗнч(Реквизиты)));
	КонецЕсли;

	// Подготовка результата (после выполнения запроса переопределится).
	Результат = Новый Структура;

	// Формирование текста запроса к выбираемым полям.
	ТекстЗапросаПолей = "";
	Для каждого КлючИЗначение Из СтруктураПолей Цикл
		ИмяПоля = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
						КлючИЗначение.Значение,
						КлючИЗначение.Ключ);
		ПсевдонимПоля = КлючИЗначение.Ключ;

		ТекстЗапросаПолей =
			ТекстЗапросаПолей + ?(ПустаяСтрока(ТекстЗапросаПолей), "", ",") + "
			|	" + ИмяПоля + " КАК " + ПсевдонимПоля;

		// Предварительное добавление поля по псевдониму в возвращаемый результат.
		Результат.Вставить(ПсевдонимПоля);
	КонецЦикла;

	// Если предопределенного нет в ИБ.
	// - приведение результата к отсутствию объекта в ИБ или передаче пустой ссылки.
	Если Ссылка = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	// Выполнение запроса.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|&ТекстЗапросаПолей
		|ИЗ
		|	&ПолноеИмяОбъектаМетаданных КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка";

	Если Не ВыбратьРазрешенные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РАЗРЕШЕННЫЕ", "");
	КонецЕсли;

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаПолей",			Запрос.Текст);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолноеИмяОбъектаМетаданных",	ПолноеИмяОбъектаМетаданных);


	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
	Исключение

		// Если реквизиты были переданы строкой, то они уже конвертированы в массив.
		// Если реквизиты - массив, оставляем без изменений.
		// Если реквизиты - структура - конвертируем в массив.
		// В остальных случаях уже было бы выброшено исключение.
		Если Тип("Структура") = ТипЗнч(Реквизиты) Тогда
			Реквизиты = Новый Массив;
			Для каждого КлючИЗначение Из СтруктураПолей Цикл
				ИмяПоля = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
							КлючИЗначение.Значение,
							КлючИЗначение.Ключ);
				Реквизиты.Добавить(ИмяПоля);
			КонецЦикла;
		КонецЕсли;

		// Поиск ошибки доступности полей.
		Результат = ОН_НайтиОшибкуДоступностиРеквизитовОбъекта(ПолноеИмяОбъектаМетаданных, Реквизиты);
		Если Результат.Ошибка Тогда
			ВызватьИсключение СтрШаблон(
				"Неверный второй параметр Реквизиты в функции ОбщегоНазначения.ЗначенияРеквизитовОбъекта: %1",
				Результат.ОписаниеОшибки);
		КонецЕсли;

		// Не удалось распознать ошибку, проброс первичной ошибки.
		ВызватьИсключение;
	КонецПопытки;

	// Заполнение реквизитов.
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция ОН_ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные = Ложь) Экспорт
	Если ПустаяСтрока(ИмяРеквизита) Тогда
		ВызватьИсключение
			"Неверный второй параметр ИмяРеквизита в функции БазоваяПодсистемаСервер.ОН_ЗначениеРеквизитаОбъекта:
				|- Имя реквизита должно быть заполнено";
	КонецЕсли;

	Результат = ОН_ЗначенияРеквизитовОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные);

	Возврат Результат[СтрЗаменить(ИмяРеквизита, ".", "")];
КонецФункции

Функция ОН_ПредопределенныйЭлемент(ПолноеИмяПредопределенного) Экспорт
	Если БазоваяПодсистемаКлиентСервер.сОН_ИспользоватьСтандартнуюФункциюПолученияПредопределенного(
		ПолноеИмяПредопределенного) Тогда

		Возврат ПредопределенноеЗначение(ПолноеИмяПредопределенного);
	КонецЕсли;

	ПоляПредопределенного = БазоваяПодсистемаКлиентСервер.сОН_ИмяПредопределенногоПоПолям(ПолноеИмяПредопределенного);

	ПредопределенныеЗначения = БазоваяПодсистемаСерверПовтИсп.СП_СсылкиПоИменамПредопределенных(
		ПоляПредопределенного.ПолноеИмяОбъектаМетаданных);

	Возврат БазоваяПодсистемаКлиентСервер.сОН_ПредопределенныйЭлемент(
		ПолноеИмяПредопределенного, ПоляПредопределенного, ПредопределенныеЗначения);
КонецФункции

Функция ОН_НайтиОшибкуДоступностиРеквизитовОбъекта(ПолноеИмяОбъектаМетаданных, ПроверяемыеВыражения)
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаМетаданных);

	Если МетаданныеОбъекта = Неопределено Тогда
		Возврат Новый Структура("Ошибка, ОписаниеОшибки", Истина,
			СтрШаблон(
				"Ошибка получения метаданных ""%1""", ПолноеИмяОбъектаМетаданных));
	КонецЕсли;

	// Разрешение вызова из безопасного режима внешней обработки или расширения.
	// Информация о доступности полей источника схемы при проверке метаданных не является секретной.
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);

	Схема = Новый СхемаЗапроса;
	Пакет = Схема.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	Оператор = Пакет.Операторы.Получить(0);

	Источник	= Оператор.Источники.Добавить(ПолноеИмяОбъектаМетаданных, "Таблица");
	ТекстОшибки	= "";

	Для Каждого ТекущееВыражение Из ПроверяемыеВыражения Цикл
		Если Не ОН_ПолеИсточникаСхемыЗапросаДоступно(Источник, ТекущееВыражение) Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + СтрШаблон(
				"- Поле объекта ""%1"" не найдено", ТекущееВыражение);
		КонецЕсли;
	КонецЦикла;

	Возврат Новый Структура("Ошибка, ОписаниеОшибки", Не ПустаяСтрока(ТекстОшибки), ТекстОшибки);
КонецФункции

Функция ОН_ПолеИсточникаСхемыЗапросаДоступно(ИсточникОператора, ПроверяемоеВыражение)
	ЧастиИмениПоля	= СтрРазделить(ПроверяемоеВыражение, ".");
	ДоступныеПоля	= ИсточникОператора.Источник.ДоступныеПоля;

	ТекущаяЧастьИмениПоля = 0;
	Пока ТекущаяЧастьИмениПоля < ЧастиИмениПоля.Количество() Цикл
		ТекущееПоле = ДоступныеПоля.Найти(ЧастиИмениПоля.Получить(ТекущаяЧастьИмениПоля));

		Если ТекущееПоле = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;

		// Инкрементация следующей части имени поля и соответствующего списка доступности полей.
		ТекущаяЧастьИмениПоля	= ТекущаяЧастьИмениПоля + 1;
		ДоступныеПоля			= ТекущееПоле.Поля;
	КонецЦикла;

	Возврат Истина;
КонецФункции

Функция ОН_ОбщиеПараметрыБазовойФункциональности() Экспорт
	ОбщиеПараметры = Новый Структура;
	ОбщиеПараметры.Вставить("ИмяФормыПерсональныхНастроек",						"");
	ОбщиеПараметры.Вставить("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы",	Истина);
	ОбщиеПараметры.Вставить("ОтключитьИдентификаторыОбъектовМетаданных",		Ложь);
	ОбщиеПараметры.Вставить("РекомендуемыйОбъемОперативнойПамяти",				2);
	ОбщиеПараметры.Вставить("МинимальнаяВерсияПлатформы",						"8.3.14.1694");
	ОбщиеПараметры.Вставить("РекомендуемаяВерсияПлатформы",						"8.3.14.1694");

	Минимальная   = ОбщиеПараметры.МинимальнаяВерсияПлатформы;
	Рекомендуемая = ОбщиеПараметры.РекомендуемаяВерсияПлатформы;
	Если Не ПустаяСтрока(Минимальная)
		И Не ПустаяСтрока(Рекомендуемая)
		И БазоваяПодсистемаКлиентСервер.ОН_СравнитьВерсии(Минимальная, Рекомендуемая) > 0 Тогда
		ТекстСообщения = "Минимальная версия платформы ""1С:Предприятие 8"" указана выше рекомендуемой.
			|Минимальная версия - ""%1"", рекомендуемая версия - ""%2"".";
		ВызватьИсключение СтрШаблон(
			ТекстСообщения,
			ОбщиеПараметры.МинимальнаяВерсияПлатформы,
			ОбщиеПараметры.РекомендуемаяВерсияПлатформы);
	КонецЕсли;

	Возврат ОбщиеПараметры;
КонецФункции

Функция ОН_ИнформационнаяБазаФайловая(Знач СтрокаСоединенияИнформационнойБазы = "") Экспорт
	Если ПустаяСтрока(СтрокаСоединенияИнформационнойБазы) Тогда
		СтрокаСоединенияИнформационнойБазы =  СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;

	Возврат СтрНайти(ВРег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1;
КонецФункции

Функция ОН_ЭтоПодчиненныйУзелРИБ() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	Возврат ПланыОбмена.ГлавныйУзел() <> Неопределено;
КонецФункции

#КонецОбласти

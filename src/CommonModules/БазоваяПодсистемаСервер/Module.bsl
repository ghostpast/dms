///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СтандартныеПодсистемы

Процедура СП_УстановитьПустуюФормуНаРабочийСтол() Экспорт
	КлючОбъекта			= "Общее/НастройкиНачальнойСтраницы";
	ТекущиеНастройки	= ХранилищеСистемныхНастроек.Загрузить(КлючОбъекта);

	Если ТипЗнч(ТекущиеНастройки) = Тип("НастройкиНачальнойСтраницы") Тогда
		ТекущийСоставФорм = ТекущиеНастройки.ПолучитьСоставФорм();
		Если ТекущийСоставФорм.ПраваяКолонка.Количество() = 0
		   И ТекущийСоставФорм.ЛеваяКолонка.Количество() = 1
		   И ТекущийСоставФорм.ЛеваяКолонка[0] = "ОбщаяФорма.ПустойРабочийСтол" Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	СоставФорм = Новый СоставФормНачальнойСтраницы;
	СоставФорм.ЛеваяКолонка.Добавить("ОбщаяФорма.ПустойРабочийСтол");
	Настройки = Новый НастройкиНачальнойСтраницы;
	Настройки.УстановитьСоставФорм(СоставФорм);
	ХранилищеСистемныхНастроек.Сохранить(КлючОбъекта, "", Настройки);
КонецПроцедуры

Функция СП_ПараметрыКлиентаНаСервере() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыКлиента = ПараметрыСеанса.ПараметрыКлиентаНаСервере;
	УстановитьПривилегированныйРежим(Ложь);

	Если ПараметрыКлиента.Количество() = 0
	   И ТекущийРежимЗапуска() <> Неопределено Тогда

		ВызватьИсключение "Не заполнены параметры клиента на сервере.";
	КонецЕсли;

	Возврат ПараметрыКлиента;
КонецФункции

#КонецОбласти

#Область ОбщегоНазначения

Функция ОН_ПрочитатьДанныеИзБезопасногоХранилища(Владелец, Ключи = "Пароль", ОбщиеДанные = Неопределено) Экспорт
	БазоваяПодсистемаКлиентСервер.ОН_Проверить(ЗначениеЗаполнено(Владелец),
		СтрШаблон(
			"Недопустимое значение параметра %1 в %2.
				|параметр должен содержать ссылку; передано значение: %3 (тип %4).",
			"Владелец", "БазоваяПодсистемаСервер.ОН_ПрочитатьДанныеИзБезопасногоХранилища", Владелец, ТипЗнч(Владелец)));

	Результат = Новый Структура(Ключи);

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
		|	БезопасноеХранилищеДанных.Данные КАК Данные
		|ИЗ
		|	РегистрСведений.БезопасноеХранилищеДанных КАК БезопасноеХранилищеДанных
		|ГДЕ
		|	БезопасноеХранилищеДанных.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", Владелец);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();

	Если РезультатЗапроса.Следующий() Тогда
		Если ЗначениеЗаполнено(РезультатЗапроса.Данные) Тогда
			СохраненныеДанные = РезультатЗапроса.Данные.Получить();
			Если ЗначениеЗаполнено(СохраненныеДанные) Тогда
				ЗаполнитьЗначенияСвойств(Результат, СохраненныеДанные);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Результат <> Неопределено И Результат.Количество() = 1 Тогда
		Возврат ?(Результат.Свойство(Ключи), Результат[Ключи], Неопределено);
	КонецЕсли;

	Возврат Результат;
КонецФункции

Процедура ОН_ЗаписатьДанныеВБезопасноеХранилище(Владелец, Данные, Ключ = "Пароль") Экспорт
	БазоваяПодсистемаКлиентСервер.ОН_Проверить(ЗначениеЗаполнено(Владелец),
		СтрШаблон(
			"Недопустимое значение параметра %1 в %2.
				|параметр должен содержать ссылку; передано значение: %3 (тип %4).",
			"Владелец", "БазоваяПодсистемаСервер.онЗаписатьДанныеВБезопасноеХранилище", Владелец, ТипЗнч(Владелец)));

	БазоваяПодсистемаКлиентСервер.ОН_Проверить(ТипЗнч(Ключ) = Тип("Строка"),
		СтрШаблон(
			"Недопустимое значение параметра %1 в %2.
				|параметр должен содержать строку; передано значение: %3 (тип %4).",
			"Ключ", "БазоваяПодсистемаСервер.онЗаписатьДанныеВБезопасноеХранилище", Ключ, ТипЗнч(Ключ)));

	БезопасноеХранилищеДанных			= РегистрыСведений.БезопасноеХранилищеДанных.СоздатьМенеджерЗаписи();

	БезопасноеХранилищеДанных.Владелец	= Владелец;
	БезопасноеХранилищеДанных.Прочитать();
	Если Данные <> Неопределено Тогда
		Если БезопасноеХранилищеДанных.Выбран() Тогда
			ДанныеДляСохранения = БезопасноеХранилищеДанных.Данные.Получить();
			Если ТипЗнч(ДанныеДляСохранения) <> Тип("Структура") Тогда
				ДанныеДляСохранения = Новый Структура();
			КонецЕсли;
			ДанныеДляСохранения.Вставить(Ключ, Данные);
			ДанныеДляХранилищеЗначения			= Новый ХранилищеЗначения(ДанныеДляСохранения, Новый СжатиеДанных(6));
			БезопасноеХранилищеДанных.Данные	= ДанныеДляХранилищеЗначения;
			БезопасноеХранилищеДанных.Записать();
		Иначе
			ДанныеДляСохранения					= Новый Структура(Ключ, Данные);
			ДанныеДляХранилищеЗначения			= Новый ХранилищеЗначения(ДанныеДляСохранения, Новый СжатиеДанных(6));
			БезопасноеХранилищеДанных.Данные	= ДанныеДляХранилищеЗначения;
			БезопасноеХранилищеДанных.Владелец	= Владелец;
			БезопасноеХранилищеДанных.Записать();
		КонецЕсли;
	Иначе
		БезопасноеХранилищеДанных.Удалить();
	КонецЕсли;
КонецПроцедуры

Функция ОН_ЭтоМобильныйКлиент() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	ЭтоМобильныйКлиент = СП_ПараметрыКлиентаНаСервере().Получить("ЭтоМобильныйКлиент");

	Если ЭтоМобильныйКлиент = Неопределено Тогда
		Возврат Ложь; // Нет клиентского приложения.
	КонецЕсли;

	Возврат ЭтоМобильныйКлиент;
КонецФункции

#КонецОбласти

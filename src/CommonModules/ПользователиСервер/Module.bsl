///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область Пользователи

Функция П_НазначениеРолей() Экспорт
	НазначениеРолей = Новый Структура;
	НазначениеРолей.Вставить("ТолькоДляАдминистраторовСистемы",                Новый Массив);
	НазначениеРолей.Вставить("ТолькоДляПользователейСистемы",                  Новый Массив);
	НазначениеРолей.Вставить("ТолькоДляВнешнихПользователей",                  Новый Массив);
	НазначениеРолей.Вставить("СовместноДляПользователейИВнешнихПользователей", Новый Массив);

	ИнтеграцияПодсистемСервер.ПриОпределенииНазначенияРолей(НазначениеРолей);

	Возврат НазначениеРолей;
КонецФункции

Функция П_ЭтоПолноправныйПользователь(Пользователь = Неопределено, ПроверятьПраваАдминистрированияСистемы = Ложь, УчитыватьПривилегированныйРежим = Истина) Экспорт
	ПривилегированныйРежимУстановлен = ПривилегированныйРежим();

	УстановитьПривилегированныйРежим(Истина);
	СвойстваПользователяИБ = П_СвойстваПроверяемогоПользователяИБ(Пользователь);

	Если СвойстваПользователяИБ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	ПроверитьРольПолныеПрава			= Не ПроверятьПраваАдминистрированияСистемы;
	ПроверитьРольАдминистратораСистемы	= ПроверятьПраваАдминистрированияСистемы;

	Если Не СвойстваПользователяИБ.УказанТекущийПользовательИБ Тогда
		Роли = СвойстваПользователяИБ.ПользовательИБ.Роли;

		// Для не текущего пользователя ИБ проверяются роли в записанном пользователе ИБ.
		Если ПроверитьРольПолныеПрава
		   И Не Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
			Возврат Ложь;
		КонецЕсли;

		Если ПроверитьРольАдминистратораСистемы
		   И Не Роли.Содержит(Метаданные.Роли.АдминистраторСистемы) Тогда
			Возврат Ложь;
		КонецЕсли;

		Возврат Истина;
	КонецЕсли;

	Если УчитыватьПривилегированныйРежим И ПривилегированныйРежимУстановлен Тогда
		Возврат Истина;
	КонецЕсли;

	Если БазоваяПодсистемаСерверПовтИсп.СП_ПривилегированныйРежимУстановленПриЗапуске() Тогда
		// Когда клиентское приложение запущено с параметром UsePrivilegedMode, тогда
		// пользователь является полноправным, если привилегированный режим установлен.
		Возврат Истина;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(СвойстваПользователяИБ.Имя) И Метаданные.ОсновныеРоли.Количество() = 0 Тогда
		// Когда основные роли не указаны, тогда у неуказанного пользователя
		// есть все права (как в привилегированном режиме).
		Возврат Истина;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(СвойстваПользователяИБ.Имя)
	   И ПривилегированныйРежимУстановлен
	   И СвойстваПользователяИБ.ПравоАдминистрирование Тогда
		// Когда у неуказанного пользователя есть право Администрирование,
		// тогда привилегированный режим учитывается всегда для поддержки
		// параметра запуска UsePrivilegedMode у не клиентских приложений.
		Возврат Истина;
	КонецЕсли;

	// Для текущего пользователя ИБ проверяются роли не в записанном пользователе ИБ,
	// а роли в текущем сеансе.
	Если ПроверитьРольПолныеПрава
	   И Не СвойстваПользователяИБ.РольДоступнаПолныеПрава Тогда // Не заменять на РолиДоступны.
		Возврат Ложь;
	КонецЕсли;

	Если ПроверитьРольАдминистратораСистемы
	   И Не СвойстваПользователяИБ.РольДоступнаАдминистраторСистемы Тогда // Не заменять на РолиДоступны.
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
КонецФункции

Функция П_СвойстваПроверяемогоПользователяИБ(Пользователь)
	СвойстваТекущегоПользовательИБ	= ПользователиСерверПовтИсп.сП_СвойстваТекущегоПользователяИБ();
	ПользовательИБ					= Неопределено;

	Если ТипЗнч(Пользователь) = Тип("ПользовательИнформационнойБазы") Тогда
		ПользовательИБ = Пользователь;
	ИначеЕсли Пользователь = Неопределено Или Пользователь = сП_АвторизованныйПользователь() Тогда
		Возврат СвойстваТекущегоПользовательИБ;
	Иначе
		// Задан не текущий пользователь.
		Если ЗначениеЗаполнено(Пользователь) Тогда
			ИдентификаторПользователяИБ = БазоваяПодсистемаСервер.ОН_ЗначениеРеквизитаОбъекта(Пользователь, "ИдентификаторПользователяИБ");
			Если СвойстваТекущегоПользовательИБ.УникальныйИдентификатор = ИдентификаторПользователяИБ Тогда
				Возврат СвойстваТекущегоПользовательИБ;
			КонецЕсли;
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);
		КонецЕсли;
	КонецЕсли;

	Если ПользовательИБ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если СвойстваТекущегоПользовательИБ.УникальныйИдентификатор = ПользовательИБ.УникальныйИдентификатор Тогда
		Возврат СвойстваТекущегоПользовательИБ;
	КонецЕсли;

	Свойства = Новый Структура;
	Свойства.Вставить("УказанТекущийПользовательИБ",	Ложь);
	Свойства.Вставить("ПользовательИБ",					ПользовательИБ);

	Возврат Свойства;
КонецФункции

Процедура П_НайтиНеоднозначныхПользователейИБ(Знач Пользователь,
                                            Знач УникальныйИдентификатор = Неопределено,
                                            Знач НайденныеИдентификаторы = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	ПустойУникальныйИдентификатор = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");

	Если ТипЗнч(УникальныйИдентификатор) <> Тип("УникальныйИдентификатор")
	 Или УникальныйИдентификатор = ПустойУникальныйИдентификатор Тогда

		УникальныйИдентификатор = Неопределено;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустойУникальныйИдентификатор", ПустойУникальныйИдентификатор);

	Если Пользователь = Неопределено И УникальныйИдентификатор = Неопределено Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Пользователи.ИдентификаторПользователяИБ КАК НеоднозначныйИдентификатор
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|
		|СГРУППИРОВАТЬ ПО
		|	Пользователи.ИдентификаторПользователяИБ
		|
		|ИМЕЮЩИЕ
		|	Пользователи.ИдентификаторПользователяИБ <> &ПустойУникальныйИдентификатор И
		|	КОЛИЧЕСТВО(Пользователи.Ссылка) > 1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВнешниеПользователи.ИдентификаторПользователяИБ
		|ИЗ
		|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
		|
		|СГРУППИРОВАТЬ ПО
		|	ВнешниеПользователи.ИдентификаторПользователяИБ
		|
		|ИМЕЮЩИЕ
		|	ВнешниеПользователи.ИдентификаторПользователяИБ <> &ПустойУникальныйИдентификатор И
		|	КОЛИЧЕСТВО(ВнешниеПользователи.Ссылка) > 1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Пользователи.ИдентификаторПользователяИБ
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВнешниеПользователи КАК ВнешниеПользователи
		|		ПО (ВнешниеПользователи.ИдентификаторПользователяИБ = Пользователи.ИдентификаторПользователяИБ)
		|			И (Пользователи.ИдентификаторПользователяИБ <> &ПустойУникальныйИдентификатор)";
	ИначеЕсли УникальныйИдентификатор <> Неопределено Тогда
		Запрос.УстановитьПараметр("УникальныйИдентификатор", УникальныйИдентификатор);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Пользователи.ИдентификаторПользователяИБ КАК НеоднозначныйИдентификатор
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ИдентификаторПользователяИБ = &УникальныйИдентификатор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВнешниеПользователи.ИдентификаторПользователяИБ
		|ИЗ
		|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
		|ГДЕ
		|	ВнешниеПользователи.ИдентификаторПользователяИБ = &УникальныйИдентификатор";
	Иначе
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Пользователи.ИдентификаторПользователяИБ КАК НеоднозначныйИдентификатор
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ИдентификаторПользователяИБ В
		|			(ВЫБРАТЬ
		|				СправочникПользователи.ИдентификаторПользователяИБ
		|			ИЗ
		|				Справочник.Пользователи КАК СправочникПользователи
		|			ГДЕ
		|				СправочникПользователи.Ссылка = &Пользователь
		|				И СправочникПользователи.ИдентификаторПользователяИБ <> &ПустойУникальныйИдентификатор)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВнешниеПользователи.ИдентификаторПользователяИБ
		|ИЗ
		|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
		|ГДЕ
		|	ВнешниеПользователи.ИдентификаторПользователяИБ В
		|			(ВЫБРАТЬ
		|				СправочникПользователи.ИдентификаторПользователяИБ
		|			ИЗ
		|				Справочник.Пользователи КАК СправочникПользователи
		|			ГДЕ
		|				СправочникПользователи.Ссылка = &Пользователь
		|				И СправочникПользователи.ИдентификаторПользователяИБ <> &ПустойУникальныйИдентификатор)";

		Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
				"Справочник.Пользователи КАК СправочникПользователи",
				"Справочник.ВнешниеПользователи КАК СправочникПользователи");
		КонецЕсли;
	КонецЕсли;

	Выгрузка = Запрос.Выполнить().Выгрузить();

	Если Пользователь = Неопределено И УникальныйИдентификатор = Неопределено Тогда
		Если Выгрузка.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Если Выгрузка.Количество() < 2 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	НеоднозначныеИдентификаторы = Выгрузка.ВыгрузитьКолонку("НеоднозначныйИдентификатор");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НеоднозначныеИдентификаторы", НеоднозначныеИдентификаторы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НеоднозначныеИдентификаторы.НеоднозначныйИдентификатор КАК НеоднозначныйИдентификатор,
	|	НеоднозначныеИдентификаторы.Пользователь КАК Пользователь
	|ИЗ
	|	(ВЫБРАТЬ
	|		Пользователи.ИдентификаторПользователяИБ КАК НеоднозначныйИдентификатор,
	|		Пользователи.Ссылка КАК Пользователь
	|	ИЗ
	|		Справочник.Пользователи КАК Пользователи
	|	ГДЕ
	|		Пользователи.ИдентификаторПользователяИБ В(&НеоднозначныеИдентификаторы)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ВнешниеПользователи.ИдентификаторПользователяИБ,
	|		ВнешниеПользователи.Ссылка
	|	ИЗ
	|		Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|	ГДЕ
	|		ВнешниеПользователи.ИдентификаторПользователяИБ В(&НеоднозначныеИдентификаторы)) КАК НеоднозначныеИдентификаторы
	|
	|УПОРЯДОЧИТЬ ПО
	|	НеоднозначныеИдентификаторы.НеоднозначныйИдентификатор,
	|	НеоднозначныеИдентификаторы.Пользователь";

	Выгрузка = Запрос.Выполнить().Выгрузить();

	ОписаниеОшибки						= "";
	ТекущийНеоднозначныйИдентификатор	= Неопределено;

	Для Каждого Строка Из Выгрузка Цикл
		Если Строка.НеоднозначныйИдентификатор <> ТекущийНеоднозначныйИдентификатор Тогда
			ТекущийНеоднозначныйИдентификатор = Строка.НеоднозначныйИдентификатор;
			Если ТипЗнч(НайденныеИдентификаторы) = Тип("Соответствие") Тогда
				ТекущиеПользователи = Новый Массив;
				НайденныеИдентификаторы.Вставить(ТекущийНеоднозначныйИдентификатор, ТекущиеПользователи);
			Иначе
				ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();

				Если ТекущийПользовательИБ.УникальныйИдентификатор <> ТекущийНеоднозначныйИдентификатор Тогда
					ТекущийПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ТекущийНеоднозначныйИдентификатор);
				КонецЕсли;

				Если ТекущийПользовательИБ = Неопределено Тогда
					ИмяДляВхода = "<не найден>";
				Иначе
					ИмяДляВхода = ТекущийПользовательИБ.Имя;
				КонецЕсли;

				ОписаниеОшибки = ОписаниеОшибки + СтрШаблон(
					"Пользователю ИБ ""%1"" с идентификатором ""%2""
						           |соответствует более одного элемента в справочнике:",
					ИмяДляВхода,
					ТекущийНеоднозначныйИдентификатор);

				ОписаниеОшибки = ОписаниеОшибки + Символы.ПС;
			КонецЕсли;
		КонецЕсли;

		Если ТипЗнч(НайденныеИдентификаторы) = Тип("Соответствие") Тогда
			ТекущиеПользователи.Добавить(Строка.Пользователь);
		Иначе
			ОписаниеОшибки = ОписаниеОшибки + "- "
				+ СтрШаблон(
					"""%1"" %2",
					Строка.Пользователь,
					ПолучитьНавигационнуюСсылку(Строка.Пользователь)) + Символы.ПС;
		КонецЕсли;
	КонецЦикла;

	Если ТипЗнч(НайденныеИдентификаторы) <> Тип("Соответствие") Тогда
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
КонецПроцедуры

Функция П_ПользовательИБЗанят(ПользовательИБ, УчетнаяЗапись = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);

	Если ТипЗнч(ПользовательИБ) = Тип("Строка") Тогда
		УчетнаяЗапись = ПользователиИнформационнойБазы.НайтиПоИмени(ПользовательИБ);
	ИначеЕсли ТипЗнч(ПользовательИБ) = Тип("УникальныйИдентификатор") Тогда
		УчетнаяЗапись = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ПользовательИБ);
	Иначе
		УчетнаяЗапись = ПользовательИБ;
	КонецЕсли;

	Если УчетнаяЗапись = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат сП_ПользовательПоИдентификаторуСуществует(УчетнаяЗапись.УникальныйИдентификатор);
КонецФункции

Функция П_СоздатьАдминистратора(ПользовательИБ = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);

	// Добавление администратора.
	Если ПользовательИБ = Неопределено Тогда
		ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();

		Если ПользователиИБ.Количество() = 0 Тогда
			ПользовательИБ				= ПользователиИнформационнойБазы.СоздатьПользователя();
			ПользовательИБ.Имя			= "Администратор";
			ПользовательИБ.ПолноеИмя	= ПользовательИБ.Имя;
			ПользовательИБ.Роли.Очистить();
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.ПолныеПрава);
			РольАдминистратораСистемы	= Метаданные.Роли.АдминистраторСистемы;
			Если НЕ ПользовательИБ.Роли.Содержит(РольАдминистратораСистемы) Тогда
				ПользовательИБ.Роли.Добавить(РольАдминистратораСистемы);
			КонецЕсли;
			ПользовательИБ.Записать();
		Иначе
			// Если существует пользователь с правами администратора,
			// тогда первый администратор уже создан и его не требуется создавать.
			Для Каждого ТекущийПользовательИБ Из ПользователиИБ Цикл
				Если сП_РолиАдминистратораДоступны(ТекущийПользовательИБ) Тогда
					Возврат Неопределено; // Первый администратор уже создан.
				КонецЕсли;
			КонецЦикла;
			// Первый администратор создан некорректно.
			ТекстОшибки =
				"Список пользователей информационной базы не пустой, однако не удалось
				           |найти ни одного пользователя с ролями Полные права и Администратор системы.
				           |
				           |Вероятно, пользователи создавались в конфигураторе.
				           |Требуется назначить роли Полные права и Администратор системы хотя бы одному пользователю.";
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	Иначе
		Если Не сП_РолиАдминистратораДоступны(ПользовательИБ) Тогда
			ТекстОшибки =
				"Невозможно создать пользователя в справочнике для пользователя
				           |информационной базы ""%1"",
				           |так как у него нет ролей Полные права и Администратор системы.
				           |
				           |Вероятно, пользователь был создан в конфигураторе.
				           |Для автоматического создания пользователя в справочнике требуется
				           |назначить ему роли Полные права и Администратор системы.";
			ВызватьИсключение СтрШаблон(ТекстОшибки, Строка(ПользовательИБ));
		КонецЕсли;

		П_НайтиНеоднозначныхПользователейИБ(Неопределено, ПользовательИБ.УникальныйИдентификатор);
	КонецЕсли;

	НачатьТранзакцию();
	Попытка
		Блокировка			= Новый БлокировкаДанных;
		ЭлементБлокировки	= Блокировка.Добавить("Справочник.Пользователи");
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторПользователяИБ",	ПользовательИБ.УникальныйИдентификатор);
		ЭлементБлокировки	= Блокировка.Добавить("Справочник.ВнешниеПользователи");
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторПользователяИБ",	ПользовательИБ.УникальныйИдентификатор);
		ЭлементБлокировки	= Блокировка.Добавить("Справочник.Пользователи");
		ЭлементБлокировки.УстановитьЗначение("Наименование",				ПользовательИБ.ПолноеИмя);
		Блокировка.Заблокировать();

		Пользователь = Неопределено;
		сП_ПользовательПоИдентификаторуСуществует(ПользовательИБ.УникальныйИдентификатор,, Пользователь);
		Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
			ВнешнийПользовательОбъект	= Пользователь.ПолучитьОбъект();
			ВнешнийПользовательОбъект.ИдентификаторПользователяИБ = Неопределено;
			ОбновлениеВерсииИБСервер.ОИБ_ЗаписатьДанные(ВнешнийПользовательОбъект);
			Пользователь				= Неопределено;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
			Пользователь = Справочники.Пользователи.НайтиПоНаименованию(ПользовательИБ.ПолноеИмя);

			Если ЗначениеЗаполнено(Пользователь)
			   И ЗначениеЗаполнено(Пользователь.ИдентификаторПользователяИБ)
			   И Пользователь.ИдентификаторПользователяИБ <> ПользовательИБ.УникальныйИдентификатор
			   И ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь.ИдентификаторПользователяИБ) <> Неопределено Тогда

				Пользователь = Неопределено;
			КонецЕсли;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
			Пользователь		= Справочники.Пользователи.СоздатьЭлемент();
			ПользовательСоздан	= Истина;
		Иначе
			Пользователь		= Пользователь.ПолучитьОбъект();
			ПользовательСоздан	= Ложь;
		КонецЕсли;

		Пользователь.Наименование = ПользовательИБ.ПолноеИмя;

		ОписаниеПользователяИБ = Новый Структура;
		ОписаниеПользователяИБ.Вставить("Действие", "Записать");
		ОписаниеПользователяИБ.Вставить("УникальныйИдентификатор", ПользовательИБ.УникальныйИдентификатор);
		Пользователь.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
		Пользователь.ДополнительныеСвойства.Вставить("СозданиеАдминистратора",
			?(ПользовательИБ = Неопределено,
			  "Выполнено создание первого администратора.",
			  ?(ПользовательСоздан,
			    "Администратор сопоставлен с новым пользователем справочника.",
			    "Администратор сопоставлен с существующим пользователем справочника.") ) );

		Пользователь.Записать();

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;

	Возврат Пользователь.Ссылка;
КонецФункции

Функция П_ВходВПрограммуРазрешен(ОписаниеПользователяИБ) Экспорт
	УстановитьПривилегированныйРежим(Истина);

	УникальныйИдентификатор = Неопределено;

	Если ТипЗнч(ОписаниеПользователяИБ) = Тип("СправочникСсылка.Пользователи")
	 Или ТипЗнч(ОписаниеПользователяИБ) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда

		УникальныйИдентификатор = БазоваяПодсистемаСервер.ОН_ЗначениеРеквизитаОбъекта(ОписаниеПользователяИБ, "ИдентификаторПользователяИБ");

		Если ТипЗнч(УникальныйИдентификатор) <> Тип("УникальныйИдентификатор") Тогда
			Возврат Ложь;
		КонецЕсли;

	ИначеЕсли ТипЗнч(ОписаниеПользователяИБ) = Тип("УникальныйИдентификатор") Тогда
		УникальныйИдентификатор = ОписаниеПользователяИБ;
	КонецЕсли;

	Если УникальныйИдентификатор <> Неопределено Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(УникальныйИдентификатор);

		Если ПользовательИБ = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		ПользовательИБ = ОписаниеПользователяИБ;
	КонецЕсли;

	Возврат ПользовательИБ.АутентификацияСтандартная
		ИЛИ ПользовательИБ.АутентификацияОС
		ИЛИ ПользовательИБ.АутентификацияOpenID;
КонецФункции

Процедура П_УстановитьСвойстваПользователяИБ(Знач ИмяИлиИдентификатор, Знач ОбновляемыеСвойства,
	Знач СоздатьНового = Ложь, Знач ЭтоВнешнийПользователь = Ложь) Экспорт

	ИмяПроцедуры = "ПользователиСервер.РУстановитьСвойстваПользователяИБ";

	БазоваяПодсистемаКлиентСервер.ОН_ПроверитьПараметр(ИмяПроцедуры, "ИмяИлиИдентификатор",
		ИмяИлиИдентификатор, Новый ОписаниеТипов("Строка, УникальныйИдентификатор"));

	БазоваяПодсистемаКлиентСервер.ОН_ПроверитьПараметр(ИмяПроцедуры, "ОбновляемыеСвойства",
		ОбновляемыеСвойства, Тип("Структура"));

	БазоваяПодсистемаКлиентСервер.ОН_ПроверитьПараметр(ИмяПроцедуры, "СоздатьНового",
		СоздатьНового, Тип("Булево"));

	БазоваяПодсистемаКлиентСервер.ОН_ПроверитьПараметр(ИмяПроцедуры, "ЭтоВнешнийПользователь",
		ЭтоВнешнийПользователь, Тип("Булево"));

	СтарыеСвойства = П_СвойстваПользователяИБ(ИмяИлиИдентификатор);
	ПользовательСуществует = СтарыеСвойства <> Неопределено;
	Если ПользовательСуществует Тогда
		ПользовательИБ = СтарыеСвойства.ПользовательИБ;
	Иначе
		ПользовательИБ = Неопределено;
		СтарыеСвойства = П_НовоеОписаниеПользователяИБ();
	КонецЕсли;

	Если Не ПользовательСуществует Тогда
		Если Не СоздатьНового Тогда
			ВызватьИсключение СтрШаблон(
				"Пользователь информационной базы ""%1"" не существует.",
				ИмяИлиИдентификатор);
		КонецЕсли;
		ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
	Иначе
		Если СоздатьНового Тогда
			ВызватьИсключение П_ОписаниеОшибкиПриЗаписиПользователяИБ(
				"Невозможно создать пользователя информационной базы %1, так как он уже существует.",
				СтарыеСвойства.Имя,
				СтарыеСвойства.УникальныйИдентификатор);
		КонецЕсли;

		Если ОбновляемыеСвойства.Свойство("СтарыйПароль")
		   И ТипЗнч(ОбновляемыеСвойства.СтарыйПароль) = Тип("Строка") Тогда

			СтарыйПарольСовпадает = сП_СтарыйПарольСовпадаетССохраненным(
				ОбновляемыеСвойства.СтарыйПароль, СтарыеСвойства.УникальныйИдентификатор);

			Если Не СтарыйПарольСовпадает Тогда
				ВызватьИсключение П_ОписаниеОшибкиПриЗаписиПользователяИБ(
					"При записи пользователя информационной базы %1 старый пароль указан не верно.",
					СтарыеСвойства.Имя,
					СтарыеСвойства.УникальныйИдентификатор);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// Подготовка новых значений свойств.
	ТекстОшибкиПароля = "";
	НовыеСвойства = БазоваяПодсистемаСервер.ОН_СкопироватьРекурсивно(СтарыеСвойства);
	Для Каждого КлючИЗначение Из НовыеСвойства Цикл
		Если Не ОбновляемыеСвойства.Свойство(КлючИЗначение.Ключ)
		 Или ОбновляемыеСвойства[КлючИЗначение.Ключ] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если КлючИЗначение.Ключ <> "Пароль" Тогда
			НовыеСвойства[КлючИЗначение.Ключ] = ОбновляемыеСвойства[КлючИЗначение.Ключ];
			Продолжить;
		КонецЕсли;
		Если ОбновляемыеСвойства.Свойство("СохраняемоеЗначениеПароля")
		   И ОбновляемыеСвойства.СохраняемоеЗначениеПароля <> Неопределено
		 Или БазоваяПодсистемаСервер.СП_ЭтоУчебнаяПлатформа() Тогда
			Продолжить;
		КонецЕсли;
		Настройки = ПользователиСерверПовтИсп.сП_Настройки();
		Если Настройки.ОбщиеНастройкиВхода Тогда
			НастройкиВхода = ?(ЭтоВнешнийПользователь, Настройки.ВнешниеПользователи, Настройки.Пользователи);
			ТекстОшибкиПароля = сП_ОшибкаДлиныИлиСложностиПароля(
				ОбновляемыеСвойства.Пароль,
				НастройкиВхода.МинимальнаяДлинаПароля,
				НастройкиВхода.ПарольДолженОтвечатьТребованиямСложности);
		Иначе
			ТекстОшибкиПароля = сП_ОшибкаДлиныИлиСложностиПароля(
				ОбновляемыеСвойства.Пароль,
				ПолучитьМинимальнуюДлинуПаролейПользователей(),
				ПолучитьПроверкуСложностиПаролейПользователей());
		КонецЕсли;
		НовыеСвойства.СохраняемоеЗначениеПароля = сП_СохраняемоеЗначениеСтрокиПароля(ОбновляемыеСвойства.Пароль, Истина);
	КонецЦикла;

	П_СкопироватьСвойстваПользователяИБ(ПользовательИБ, НовыеСвойства);

	Если ЗначениеЗаполнено(ТекстОшибкиПароля) Тогда
		ВызватьИсключение П_ОписаниеОшибкиПриЗаписиПользователяИБ(
			"Не удалось записать свойства пользователя информационной базы %1 по причине:
			           |%2.",
			ПользовательИБ.Имя,
			?(ПользовательСуществует, СтарыеСвойства.УникальныйИдентификатор, Неопределено),
			ТекстОшибкиПароля);
	КонецЕсли;

	// Попытка записи нового или изменение существующего пользователя ИБ.
	Попытка
		сП_ЗаписатьПользователяИнформационнойБазы(ПользовательИБ, ЭтоВнешнийПользователь);
	Исключение
		ВызватьИсключение П_ОписаниеОшибкиПриЗаписиПользователяИБ(
			"Не удалось записать свойства пользователя информационной базы %1 по причине:
			           |%2.",
			ПользовательИБ.Имя,
			?(ПользовательСуществует, СтарыеСвойства.УникальныйИдентификатор, Неопределено),
			ИнформацияОбОшибке());
	КонецПопытки;

	Если ЗначениеЗаполнено(СтарыеСвойства.Имя) И СтарыеСвойства.Имя <> НовыеСвойства.Имя Тогда
		// Перемещение настроек пользователя.
		сП_СкопироватьНастройкиПользователя(СтарыеСвойства.Имя, НовыеСвойства.Имя, Истина);
	КонецЕсли;

	Если СоздатьНового Тогда
		сП_УстановитьНачальныеНастройки(ПользовательИБ.Имя, ЭтоВнешнийПользователь);
	КонецЕсли;

	ОбновляемыеСвойства.Вставить("УникальныйИдентификатор", ПользовательИБ.УникальныйИдентификатор);
	ОбновляемыеСвойства.Вставить("ПользовательИБ", ПользовательИБ);
КонецПроцедуры

Функция П_СвойстваПользователяИБ(Знач ИмяИлиИдентификатор) Экспорт
	БазоваяПодсистемаКлиентСервер.ОН_ПроверитьПараметр("Пользователи.СвойстваПользователяИБ", "ИмяИлиИдентификатор",
		ИмяИлиИдентификатор, Новый ОписаниеТипов("Строка, УникальныйИдентификатор"));

	Свойства = П_НовоеОписаниеПользователяИБ();
	Свойства.Роли = Новый Массив;

	Если ТипЗнч(ИмяИлиИдентификатор) = Тип("УникальныйИдентификатор") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИмяИлиИдентификатор);
	ИначеЕсли ТипЗнч(ИмяИлиИдентификатор) = Тип("Строка") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяИлиИдентификатор);
	Иначе
		ПользовательИБ = Неопределено;
	КонецЕсли;

	Если ПользовательИБ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	П_СкопироватьСвойстваПользователяИБ(Свойства, ПользовательИБ);
	Свойства.Вставить("ПользовательИБ", ПользовательИБ);

	Возврат Свойства;
КонецФункции

Функция П_НовоеОписаниеПользователяИБ() Экспорт
	// Подготовка структур возвращаемых данных.
	Свойства = Новый Структура;

	Свойства.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));

	Свойства.Вставить("Имя",                       "");
	Свойства.Вставить("ПолноеИмя",                 "");
	Свойства.Вставить("АутентификацияOpenID",      Ложь);
	Свойства.Вставить("АутентификацияСтандартная", Ложь);
	Свойства.Вставить("ПоказыватьВСпискеВыбора",   Ложь);
	Свойства.Вставить("СтарыйПароль",              Неопределено);
	Свойства.Вставить("Пароль",                    Неопределено);
	Свойства.Вставить("СохраняемоеЗначениеПароля", Неопределено);
	Свойства.Вставить("ПарольУстановлен",          Ложь);
	Свойства.Вставить("ЗапрещеноИзменятьПароль",   Ложь);
	Свойства.Вставить("АутентификацияОС",          Ложь);
	Свойства.Вставить("ПользовательОС",            "");

	Свойства.Вставить("ОсновнойИнтерфейс",
		?(Метаданные.ОсновнойИнтерфейс = Неопределено, "", Метаданные.ОсновнойИнтерфейс.Имя));

	Свойства.Вставить("РежимЗапуска",              "Авто");

	Свойства.Вставить("Язык",
		?(Метаданные.ОсновнойЯзык = Неопределено, "", Метаданные.ОсновнойЯзык.Имя));

	Свойства.Вставить("Роли", Неопределено);

	Возврат Свойства;
КонецФункции

Процедура П_СкопироватьСвойстваПользователяИБ(Приемник, Источник, КопируемыеСвойства = "", ИсключаемыеСвойства = "", ПрефиксСвойств = "") Экспорт
	Если ТипЗнч(Приемник) = Тип("ПользовательИнформационнойБазы")
	   И ТипЗнч(Источник) = Тип("ПользовательИнформационнойБазы")

	 Или ТипЗнч(Приемник) = Тип("ПользовательИнформационнойБазы")
	   И ТипЗнч(Источник) <> Тип("Структура")
	   И ТипЗнч(Источник) <> Тип("ФормаКлиентскогоПриложения")

	 Или ТипЗнч(Источник) = Тип("ПользовательИнформационнойБазы")
	   И ТипЗнч(Приемник) <> Тип("Структура")
	   И ТипЗнч(Приемник) <> Тип("ФормаКлиентскогоПриложения") Тогда

		ВызватьИсключение
			"Недопустимое значение параметра Приемник или Источник
			           |в процедуре П_СкопироватьСвойстваПользователяИБ общего модуля ПользователиСервер.";
	КонецЕсли;

	ВсеСвойства = П_НовоеОписаниеПользователяИБ();

	Если ЗначениеЗаполнено(КопируемыеСвойства) Тогда
		СтруктураКопируемыхСвойств = Новый Структура(КопируемыеСвойства);
	Иначе
		СтруктураКопируемыхСвойств = ВсеСвойства;
	КонецЕсли;

	Если ЗначениеЗаполнено(ИсключаемыеСвойства) Тогда
		СтруктураИсключаемыхСвойств = Новый Структура(ИсключаемыеСвойства);
	Иначе
		СтруктураИсключаемыхСвойств = Новый Структура;
	КонецЕсли;

	Если БазоваяПодсистемаСервер.СП_ЭтоУчебнаяПлатформа() Тогда
		СтруктураИсключаемыхСвойств.Вставить("АутентификацияОС");
		СтруктураИсключаемыхСвойств.Вставить("ПользовательОС");
	КонецЕсли;

	ПарольУстановлен = Ложь;

	Для каждого КлючИЗначение Из ВсеСвойства Цикл
		Свойство = КлючИЗначение.Ключ;

		Если НЕ СтруктураКопируемыхСвойств.Свойство(Свойство)
		 ИЛИ СтруктураИсключаемыхСвойств.Свойство(Свойство) Тогда

			Продолжить;
		КонецЕсли;

		Если ТипЗнч(Источник) = Тип("ПользовательИнформационнойБазы")
		   И (    ТипЗнч(Приемник) = Тип("Структура")
		      Или ТипЗнч(Приемник) = Тип("ФормаКлиентскогоПриложения") ) Тогда

			Если Свойство = "Пароль"
			 ИЛИ Свойство = "СтарыйПароль" Тогда

				ЗначениеСвойства	= Неопределено;
			ИначеЕсли Свойство = "ОсновнойИнтерфейс" Тогда
				ЗначениеСвойства	= ?(Источник.ОсновнойИнтерфейс = Неопределено, "", Источник.ОсновнойИнтерфейс.Имя);
			ИначеЕсли Свойство = "РежимЗапуска" Тогда
				ПолноеИмяЗначения	= ПолучитьПолноеИмяПредопределенногоЗначения(Источник.РежимЗапуска);
				ЗначениеСвойства	= Сред(ПолноеИмяЗначения, СтрНайти(ПолноеИмяЗначения, ".") + 1);
			ИначеЕсли Свойство = "Язык" Тогда
				ЗначениеСвойства	= ?(Источник.Язык = Неопределено, "", Источник.Язык.Имя);
			ИначеЕсли Свойство = "Роли" Тогда
				ВременнаяСтруктура = Новый Структура("Роли", Новый ТаблицаЗначений);
				ЗаполнитьЗначенияСвойств(ВременнаяСтруктура, Приемник);
				Если ТипЗнч(ВременнаяСтруктура.Роли) = Тип("ТаблицаЗначений") Тогда
					Продолжить;
				ИначеЕсли ВременнаяСтруктура.Роли = Неопределено Тогда
					Приемник.Роли = Новый Массив;
				Иначе
					Приемник.Роли.Очистить();
				КонецЕсли;

				Для каждого Роль Из Источник.Роли Цикл
					Приемник.Роли.Добавить(Роль.Имя);
				КонецЦикла;

				Продолжить;
			Иначе
				ЗначениеСвойства = Источник[Свойство];
			КонецЕсли;

			ПолноеИмяСвойства	= ПрефиксСвойств + Свойство;
			ВременнаяСтруктура	= Новый Структура(ПолноеИмяСвойства, ЗначениеСвойства);
			ЗаполнитьЗначенияСвойств(Приемник, ВременнаяСтруктура);
		Иначе
			Если ТипЗнч(Источник) = Тип("Структура") Тогда
				Если Источник.Свойство(Свойство) Тогда
					ЗначениеСвойства = Источник[Свойство];
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				ПолноеИмяСвойства	= ПрефиксСвойств + Свойство;
				ВременнаяСтруктура	= Новый Структура(ПолноеИмяСвойства, Новый ТаблицаЗначений);
				ЗаполнитьЗначенияСвойств(ВременнаяСтруктура, Источник);
				ЗначениеСвойства = ВременнаяСтруктура[ПолноеИмяСвойства];
				Если ТипЗнч(ЗначениеСвойства) = Тип("ТаблицаЗначений") Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Если ТипЗнч(Приемник) = Тип("ПользовательИнформационнойБазы") Тогда
				Если Свойство = "УникальныйИдентификатор"
				 ИЛИ Свойство = "СтарыйПароль"
				 ИЛИ Свойство = "ПарольУстановлен" Тогда

					Продолжить;
				ИначеЕсли Свойство = "АутентификацияOpenID"
				      ИЛИ Свойство = "АутентификацияСтандартная"
				      ИЛИ Свойство = "АутентификацияОС"
				      ИЛИ Свойство = "ПользовательОС" Тогда

					Если Приемник[Свойство] <> ЗначениеСвойства Тогда
						Приемник[Свойство] = ЗначениеСвойства;
					КонецЕсли;
				ИначеЕсли Свойство = "Пароль" Тогда
					Если ЗначениеСвойства <> Неопределено Тогда
						Приемник.Пароль = ЗначениеСвойства;
						ПарольУстановлен = Истина;
					КонецЕсли;
				ИначеЕсли Свойство = "СохраняемоеЗначениеПароля" Тогда
					Если ЗначениеСвойства <> Неопределено
					   И НЕ ПарольУстановлен Тогда
						Приемник.СохраняемоеЗначениеПароля = ЗначениеСвойства;
					КонецЕсли;
				ИначеЕсли Свойство = "ОсновнойИнтерфейс" Тогда
					Если ТипЗнч(ЗначениеСвойства) = Тип("Строка") Тогда
						Приемник.ОсновнойИнтерфейс = Метаданные.Интерфейсы.Найти(ЗначениеСвойства);
					Иначе
						Приемник.ОсновнойИнтерфейс = Неопределено;
					КонецЕсли;
				ИначеЕсли Свойство = "РежимЗапуска" Тогда
					Если ЗначениеСвойства = "Авто"
					 ИЛИ ЗначениеСвойства = "ОбычноеПриложение"
					 ИЛИ ЗначениеСвойства = "УправляемоеПриложение" Тогда

						Приемник.РежимЗапуска = РежимЗапускаКлиентскогоПриложения[ЗначениеСвойства];
					Иначе
						Приемник.РежимЗапуска = РежимЗапускаКлиентскогоПриложения.Авто;
					КонецЕсли;
				ИначеЕсли Свойство = "Язык" Тогда
					Если ТипЗнч(ЗначениеСвойства) = Тип("Строка") Тогда
						Приемник.Язык = Метаданные.Языки.Найти(ЗначениеСвойства);
					Иначе
						Приемник.Язык = Неопределено;
					КонецЕсли;
				ИначеЕсли Свойство = "Роли" Тогда
					Приемник.Роли.Очистить();
					Если ЗначениеСвойства <> Неопределено Тогда
						Для каждого ИмяРоли Из ЗначениеСвойства Цикл
							Роль = Метаданные.Роли.Найти(ИмяРоли);
							Если Роль <> Неопределено Тогда
								Приемник.Роли.Добавить(Роль);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				Иначе
					Если Свойство = "Имя"
					   И Приемник[Свойство] <> ЗначениеСвойства Тогда

						Если СтрДлина(ЗначениеСвойства) > 64 Тогда
							ВызватьИсключение СтрШаблон(
								"Ошибка записи пользователя информационной базы
								           |Имя (для входа): ""%1""
								           |превышает длину 64 символа.",
								ЗначениеСвойства);
						ИначеЕсли СтрНайти(ЗначениеСвойства, ":") > 0 Тогда
							ВызватьИсключение СтрШаблон(
								"Ошибка записи пользователя информационной базы
								           |Имя (для входа): ""%1""
								           |содержит запрещенный символ "":"".",
								ЗначениеСвойства);
						КонецЕсли;
					КонецЕсли;
					Приемник[Свойство] = Источник[Свойство];
				КонецЕсли;
			Иначе
				Если Свойство = "Роли" Тогда
					ВременнаяСтруктура = Новый Структура("Роли", Новый ТаблицаЗначений);
					ЗаполнитьЗначенияСвойств(ВременнаяСтруктура, Приемник);
					Если ТипЗнч(ВременнаяСтруктура.Роли) = Тип("ТаблицаЗначений") Тогда
						Продолжить;
					ИначеЕсли ВременнаяСтруктура.Роли = Неопределено Тогда
						Приемник.Роли = Новый Массив;
					Иначе
						Приемник.Роли.Очистить();
					КонецЕсли;

					Если Источник.Роли <> Неопределено Тогда
						Для каждого Роль Из Источник.Роли Цикл
							Приемник.Роли.Добавить(Роль.Имя);
						КонецЦикла;
					КонецЕсли;
					Продолжить;

				ИначеЕсли ТипЗнч(Источник) = Тип("Структура") Тогда
					ПолноеИмяСвойства = ПрефиксСвойств + Свойство;
				Иначе
					ПолноеИмяСвойства = Свойство;
				КонецЕсли;
				ВременнаяСтруктура = Новый Структура(ПолноеИмяСвойства, ЗначениеСвойства);
				ЗаполнитьЗначенияСвойств(Приемник, ВременнаяСтруктура);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция П_ОписаниеОшибкиПриЗаписиПользователяИБ(ШаблонОшибки, ИмяДляВхода, ИдентификаторПользователяИБ, ИнформацияОбОшибке = Неопределено, ЗаписатьВЖурнал = Истина)
	Если ЗаписатьВЖурнал Тогда
		ЗаписьЖурналаРегистрации(
			"Пользователи.Ошибка записи пользователя ИБ",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			СтрШаблон(ШаблонОшибки,
				"""" + ИмяДляВхода + """ (" + ?(ЗначениеЗаполнено(ИдентификаторПользователяИБ),
					"Новый", Строка(ИдентификаторПользователяИБ)) + ")",
				?(ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), Строка(ИнформацияОбОшибке))));
	КонецЕсли;

	Возврат СтрШаблон(ШаблонОшибки, """" + ИмяДляВхода + """",
		?(ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке), Строка(ИнформацияОбОшибке)));
КонецФункции

Функция П_НайтиПоИмени(Знач ИмяДляВхода) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяДляВхода);

	Если ПользовательИБ = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		П_НайтиНеоднозначныхПользователейИБ(Неопределено, ПользовательИБ.УникальныйИдентификатор);

		Возврат Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
	КонецЕсли;
КонецФункции

Процедура сП_ПроверитьПраваПользователя(ПользовательИБ, РежимПроверки, ЭтоВнешнийПользователь) Экспорт
	Если РежимПроверки = "ПриЗапуске" И Не ЭтоВнешнийПользователь Тогда
		Возврат; // Не нужно проверять права пользователей при запуске в локальном режиме.
	КонецЕсли;

	НедоступныеРоли = ПользователиСерверПовтИсп.сП_НедоступныеРолиПоТипуПользователя(ЭтоВнешнийПользователь);

	РолиДляПроверки = Новый ТаблицаЗначений;
	РолиДляПроверки.Колонки.Добавить("Роль", Новый ОписаниеТипов("ОбъектМетаданных"));
	Для Каждого Роль Из ПользовательИБ.Роли Цикл
		РолиДляПроверки.Добавить().Роль = Роль;
	КонецЦикла;
	РолиДляПроверки.Индексы.Добавить("Роль");

	Если РежимПроверки = "ПередЗаписью" Тогда
		ПрежнийПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ПользовательИБ.УникальныйИдентификатор);

		Если ПрежнийПользовательИБ <> Неопределено Тогда
			Для Каждого Роль Из ПрежнийПользовательИБ.Роли Цикл
				Строка = РолиДляПроверки.Найти(Роль, "Роль");
				Если Строка <> Неопределено Тогда
					РолиДляПроверки.Удалить(Строка);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	ДобавляемыеНедоступныеРоли	= "";
	НазначениеРолей				= Неопределено;

	Для Каждого ОписаниеРоли Из РолиДляПроверки Цикл
		Роль	= ОписаниеРоли.Роль;
		ИмяРоли	= Роль.Имя;

		Если НедоступныеРоли.Получить(ИмяРоли) = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если НазначениеРолей = Неопределено Тогда
			НазначениеРолей = ПользователиСерверПовтИсп.сП_НазначениеРолей();
		КонецЕсли;

		Если НазначениеРолей.ТолькоДляАдминистраторовСистемы.Получить(ИмяРоли) <> Неопределено Тогда
			ТекстШаблона = """%1"" (предназначена только для администраторов системы)";
		ИначеЕсли НазначениеРолей.ТолькоДляВнешнихПользователей.Получить(ИмяРоли) <> Неопределено Тогда
			ТекстШаблона = """%1"" (предназначена только для внешних пользователей)";
		Иначе // Это внешний пользователь.
			ТекстШаблона = """%1"" (предназначена только для пользователей)";
		КонецЕсли;

		ДобавляемыеНедоступныеРоли = ДобавляемыеНедоступныеРоли + СтрШаблон(ТекстШаблона, Роль.Представление()) + Символы.ПС;;
	КонецЦикла;

	ДобавляемыеНедоступныеРоли = СокрЛП(ДобавляемыеНедоступныеРоли);

	Если Не ЗначениеЗаполнено(ДобавляемыеНедоступныеРоли) Тогда
		Возврат;
	КонецЕсли;

	ИмяСобытия = "Пользователи.Ошибка при установке ролей пользователю ИБ";

	Если РежимПроверки = "ПриЗапуске" Тогда
		Если СтрЧислоСтрок(ДобавляемыеНедоступныеРоли) = 1 Тогда
			ТекстРегистрацииВхода = СтрШаблон(
				"Попытка входа пользователя %1 с недоступной ролью:
				           |%2.",
			ПользовательИБ.ПолноеИмя, ДобавляемыеНедоступныеРоли);
		Иначе
			ТекстРегистрацииВхода = СтрШаблон(
				"Попытка входа пользователя %1 с недоступными ролями:
				           |%2.",
			ПользовательИБ.ПолноеИмя, ДобавляемыеНедоступныеРоли);
		КонецЕсли;
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПользовательИБ, ТекстРегистрацииВхода);

		ТекстСообщенияВхода =
			"Невозможно выполнить вход из-за наличия недоступных ролей.
			           |Обратитесь к администратору.";

		ВызватьИсключение ТекстСообщенияВхода;
	КонецЕсли;

	Если СтрЧислоСтрок(ДобавляемыеНедоступныеРоли) = 1 И ЗначениеЗаполнено(ДобавляемыеНедоступныеРоли) Тогда
		ТекстРегистрацииДобавления = СтрШаблон(
			"Попытка назначить пользователю %1 недоступную роль:
			           |%2.",
			ПользовательИБ.ПолноеИмя, ДобавляемыеНедоступныеРоли);
	ИначеЕсли СтрЧислоСтрок(ДобавляемыеНедоступныеРоли) > 1 Тогда
		ТекстРегистрацииДобавления = СтрШаблон(
			"Попытка назначить пользователю %1 недоступные роли:
			           |%2.",
			ПользовательИБ.ПолноеИмя, ДобавляемыеНедоступныеРоли);
	Иначе
		ТекстРегистрацииДобавления = "";
	КонецЕсли;

	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПользовательИБ, ТекстРегистрацииДобавления);

	Если СтрЧислоСтрок(ДобавляемыеНедоступныеРоли) = 1 И ЗначениеЗаполнено(ДобавляемыеНедоступныеРоли) Тогда
		ТекстСообщенияДобавления = СтрШаблон("Пользователю ""%1"" невозможно назначить недоступную роль:
			           |%2.",
			ПользовательИБ.ПолноеИмя, ДобавляемыеНедоступныеРоли);
	ИначеЕсли СтрЧислоСтрок(ДобавляемыеНедоступныеРоли) > 1 Тогда
		ТекстСообщенияДобавления = СтрШаблон(
			"Пользователю ""%1"" невозможно назначить недоступные роли:
			           |%2.",
			ПользовательИБ.ПолноеИмя, ДобавляемыеНедоступныеРоли);
	Иначе
		ТекстСообщенияДобавления = "";
	КонецЕсли;

	ВызватьИсключение ТекстСообщенияДобавления;
КонецПроцедуры

Функция сП_АвторизованныйПользователь() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	Возврат ?(ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь),
	          ПараметрыСеанса.ТекущийПользователь,
	          ПараметрыСеанса.ТекущийВнешнийПользователь);
КонецФункции

Процедура сП_ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры, Отказ, ЭтоВызовПередНачаломРаботыСистемы) Экспорт
	Если Не ЭтоВызовПередНачаломРаботыСистемы Тогда
		КлючПредупрежденияБезопасности = сП_КлючПредупрежденияБезопасностиПриЗапуске();
		Если ЗначениеЗаполнено(КлючПредупрежденияБезопасности) Тогда
			Параметры.Вставить("КлючПредупрежденияБезопасности", КлючПредупрежденияБезопасности);
		КонецЕсли;

		Возврат;
	КонецЕсли;

	РегистрироватьВЖурнале = Параметры.ПолученныеПараметрыКлиента <> Неопределено
		И Не Параметры.ПолученныеПараметрыКлиента.Свойство("ОшибкаАвторизации");

	ОшибкаАвторизации = сП_АвторизоватьТекущегоПользователя(Истина, РегистрироватьВЖурнале);

	Если Не ЗначениеЗаполнено(ОшибкаАвторизации) Тогда
		сП_ОтключитьНеактивныхИПросроченныхПользователей(Истина, ОшибкаАвторизации, РегистрироватьВЖурнале);
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ОшибкаАвторизации) Тогда
		сП_ПроверитьВходВПрограммуРазрешен(ОшибкаАвторизации);
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ОшибкаАвторизации) Тогда
		Если сП_ТребуетсяСменитьПароль(ОшибкаАвторизации, Истина, РегистрироватьВЖурнале) Тогда
			Параметры.Вставить("ТребуетсяСменитьПароль");
			БазоваяПодсистемаВызовСервера.СП_СкрытьРабочийСтолПриНачалеРаботыСистемы();
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(ОшибкаАвторизации) Тогда
		Параметры.Вставить("ОшибкаАвторизации", ОшибкаАвторизации);
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

Функция сП_КлючПредупрежденияБезопасностиПриЗапуске()
	Если ПустаяСтрока(ПользователиИнформационнойБазы.ТекущийПользователь().Имя) Тогда
		Возврат Неопределено; // В базе без пользователей предупреждение не требуется.
	КонецЕсли;

	Если ПривилегированныйРежим() Тогда
		Возврат Неопределено; // С ключом запуска "/UsePrivilegedMode" предупреждение не требуется.
	КонецЕсли;

	Если БазоваяПодсистемаСервер.ОН_ЭтоПодчиненныйУзелРИБ() Тогда
		// Зарезервировано для новых подсистем

		Возврат Неопределено; // В подчиненных узлах предупреждение не требуется.
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	Если Не ПривилегированныйРежим() Тогда
		Возврат Неопределено; // В безопасном режиме предупреждение не требуется.
	КонецЕсли;

	ПараметрыАдминистрирования = БазоваяПодсистемаСервер.СП_ПараметрыАдминистрирования();
	РешениеПринято = ПараметрыАдминистрирования.ПринятоРешениеПоОткрытиюВнешнихОтчетовИОбработок;
	Если ТипЗнч(РешениеПринято) <> Тип("Булево") Тогда
		РешениеПринято = Ложь;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);

	ЭтоАдминистраторСистемы = П_ЭтоПолноправныйПользователь(, Истина, Ложь);
	Если ЭтоАдминистраторСистемы И Не РешениеПринято Тогда
		Возврат "ПослеОбновления";
	КонецЕсли;

	Если РешениеПринято Тогда
		Если ПравоДоступа("ИнтерактивноеОткрытиеВнешнихОбработок", Метаданные)
		 Или ПравоДоступа("ИнтерактивноеОткрытиеВнешнихОтчетов", Метаданные) Тогда

			ПользовательОзнакомлен = БазоваяПодсистемаСервер.ОН_ХранилищеЗагрузить(
				ХранилищеОбщихНастроек,
				"ПредупреждениеБезопасности",
				"ПользовательОзнакомлен",
				Ложь,
				Неопределено,
				Неопределено);

			Если Не ПользовательОзнакомлен Тогда
				Возврат "ПослеПоявленияПрава";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

Функция сП_АвторизоватьТекущегоПользователя(ПриНачалеРаботыСистемы = Ложь, РегистрироватьВЖурнале = Ложь) Экспорт
	Если Не ПриНачалеРаботыСистемы Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	ТекущийПользовательИБ	= ПользователиИнформационнойБазы.ТекущийПользователь();
	ЭтоВнешнийПользователь	= ЗначениеЗаполнено(Справочники.ВнешниеПользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ТекущийПользовательИБ.УникальныйИдентификатор));
	сП_ПроверитьПраваПользователя(ТекущийПользовательИБ, "ПриЗапуске", ЭтоВнешнийПользователь);

	Если ПустаяСтрока(ТекущийПользовательИБ.Имя) Тогда
		// Авторизуется пользователь по умолчанию.
		Попытка
			Значения = сП_ЗначенияПараметровСеансаТекущийПользователь();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Возврат сП_КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(ИнформацияОбОшибке,
				"Не удалось установить параметр сеанса ТекущийПользователь по причине:
				           |""%1"".
				           |
				           |Обратитесь к администратору.",
				РегистрироватьВЖурнале);
		КонецПопытки;
		Если ТипЗнч(Значения) = Тип("Строка") Тогда
			Возврат сП_КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(Значения, , РегистрироватьВЖурнале);
		КонецЕсли;
		Возврат сП_РезультатУстановкиПараметровСеанса(РегистрироватьВЖурнале);
	КонецЕсли;

	НайденныйПользователь = Неопределено;
	Если сП_ПользовательПоИдентификаторуСуществует(ТекущийПользовательИБ.УникальныйИдентификатор, , НайденныйПользователь) Тогда
		// ПользовательИБ найден в справочнике.
		Если ПриНачалеРаботыСистемы И сП_РолиАдминистратораДоступны() Тогда
			ИнтеграцияПодсистемСервер.ПриСозданииАдминистратора(НайденныйПользователь, "При авторизации у пользователя найдены роли администратора.");
		КонецЕсли;
		Возврат сП_РезультатУстановкиПараметровСеанса(РегистрироватьВЖурнале);
	КонецЕсли;

	// Требуется либо создать администратора, либо сообщить об отказе авторизации.
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();

	Если ПользователиИБ.Количество() > 1
	   И Не сП_РолиАдминистратораДоступны()
	   И Не ПравоДоступа("Администрирование", Метаданные, ТекущийПользовательИБ) Тогда

		// Авторизуется обычный пользователь, созданный в конфигураторе.
		Возврат сП_КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(
			сП_ТекстСообщенияПользовательНеНайденВСправочнике(ТекущийПользовательИБ.Имя),
			, РегистрироватьВЖурнале);
	КонецЕсли;

	// Авторизуется администратор, созданный в конфигураторе.
	Если Не сП_РолиАдминистратораДоступны() Тогда
		Возврат сП_КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(
			"Запуск от имени пользователя с правом Администрирование невозможен,
			           |так как он не зарегистрирован в списке пользователей.
			           |
			           |Для ведения списка и настройки прав пользователей предназначен список Пользователи,
			           |режим конфигурирования 1С:Предприятия для этого использовать не следует.",
			, РегистрироватьВЖурнале);
	КонецЕсли;

	Попытка
		Пользователь = П_СоздатьАдминистратора(ТекущийПользовательИБ);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Возврат сП_КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(ИнформацияОбОшибке,
			"Не удалось выполнить автоматическую регистрацию администратора в списке по причине:
			           |""%1"".
			           |
			           |Для ведения списка и настройки прав пользователей предназначен список Пользователи,
			           |режим конфигурирования 1С:Предприятия для этого использовать не следует.",
			РегистрироватьВЖурнале);
	КонецПопытки;

	Комментарий =
		"Выполнен запуск от имени пользователя с ролью ""Полные права"",
		           |который не зарегистрирован в списке пользователей.
		           |Выполнена автоматическая регистрация в списке пользователей.
		           |
		           |Для ведения списка и настройки прав пользователей предназначен список Пользователи,
		           |режим конфигурирования 1С:Предприятия для этого использовать не следует.";

	ИнтеграцияПодсистемСервер.ПослеЗаписиАдминистратораПриАвторизации(Комментарий);

	ЗаписьЖурналаРегистрации(
		"Пользователи.Администратор зарегистрирован в справочнике Пользователи",
		УровеньЖурналаРегистрации.Предупреждение,
		Метаданные.Справочники.Пользователи,
		Пользователь,
		Комментарий);

	Возврат сП_РезультатУстановкиПараметровСеанса(РегистрироватьВЖурнале);
КонецФункции

Функция сП_ЗначенияПараметровСеансаТекущийПользователь()
	ЗаголовокОшибки = "Не удалось установить параметр сеанса ТекущийПользователь." + Символы.ПС;

	НачатьТранзакцию();
	Попытка
		СведенияОПользователе = сП_НайтиТекущегоПользователяВСправочнике();

		Если СведенияОПользователе.СоздатьПользователя Тогда
			сП_СоздатьТекущегоПользователяВСправочнике(СведенияОПользователе);
		КонецЕсли;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

	Если Не СведенияОПользователе.СоздатьПользователя
	   И Не СведенияОПользователе.ПользовательНайден Тогда

		Возврат ЗаголовокОшибки + сП_ТекстСообщенияПользовательНеНайденВСправочнике(
			СведенияОПользователе.ИмяПользователя);
	КонецЕсли;

	Если СведенияОПользователе.ТекущийПользователь        = Неопределено
	 Или СведенияОПользователе.ТекущийВнешнийПользователь = Неопределено Тогда

		Возврат ЗаголовокОшибки + сП_ТекстСообщенияПользовательНеНайденВСправочнике(
				СведенияОПользователе.ИмяПользователя) + Символы.ПС
			+ "Возникла внутренняя ошибка при поиске пользователя.";
	КонецЕсли;

	Значения = Новый Структура;
	Значения.Вставить("ТекущийПользователь",        СведенияОПользователе.ТекущийПользователь);
	Значения.Вставить("ТекущийВнешнийПользователь", СведенияОПользователе.ТекущийВнешнийПользователь);

	Возврат Значения;
КонецФункции

Функция сП_НайтиТекущегоПользователяВСправочнике()
	Результат = Новый Структура;
	Результат.Вставить("ИмяПользователя",             Неопределено);
	Результат.Вставить("ПолноеИмяПользователя",       Неопределено);
	Результат.Вставить("ИдентификаторПользователяИБ", Неопределено);
	Результат.Вставить("ПользовательНайден",          Ложь);
	Результат.Вставить("СоздатьПользователя",         Ложь);
	Результат.Вставить("СсылкаНового",                Неопределено);
	Результат.Вставить("Служебный",                   Ложь);
	Результат.Вставить("ТекущийПользователь",         Неопределено);
	Результат.Вставить("ТекущийВнешнийПользователь",  Справочники.ВнешниеПользователи.ПустаяСсылка());

	ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();

	Если ПустаяСтрока(ТекущийПользовательИБ.Имя) Тогда
		СвойстваНеуказанногоПользователя = сП_СвойстваНеуказанногоПользователя();

		Результат.ИмяПользователя       = СвойстваНеуказанногоПользователя.ПолноеИмя;
		Результат.ПолноеИмяПользователя = СвойстваНеуказанногоПользователя.ПолноеИмя;
		Результат.СсылкаНового          = СвойстваНеуказанногоПользователя.СтандартнаяСсылка;

		Если СвойстваНеуказанногоПользователя.Ссылка = Неопределено Тогда
			Результат.СоздатьПользователя			= Истина;
			Результат.Служебный						= Истина;
			Результат.ИдентификаторПользователяИБ	= "";
		Иначе
			Результат.ПользовательНайден	= Истина;
			Результат.ТекущийПользователь	= СвойстваНеуказанногоПользователя.Ссылка;
		КонецЕсли;

		Возврат Результат;
	КонецЕсли;

	Результат.ИмяПользователя             = ТекущийПользовательИБ.Имя;
	Результат.ИдентификаторПользователяИБ = ТекущийПользовательИБ.УникальныйИдентификатор;

	П_НайтиНеоднозначныхПользователейИБ(Неопределено, Результат.ИдентификаторПользователяИБ);

	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ИдентификаторПользователяИБ", Результат.ИдентификаторПользователяИБ);

	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВнешниеПользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|ГДЕ
	|	ВнешниеПользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВнешнихПользователей") Тогда
			Возврат НСтр("ru = 'Внешние пользователи отключены.'");
		КонецЕсли;

		Результат.ТекущийПользователь        = Справочники.Пользователи.ПустаяСсылка();
		Результат.ТекущийВнешнийПользователь = Выборка.Ссылка;

		Результат.ПользовательНайден = Истина;
		Возврат Результат;
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Результат.ТекущийПользователь	= Выборка.Ссылка;
		Результат.ПользовательНайден	= Истина;

		Возврат Результат;
	КонецЕсли;

	Если Не Результат.СоздатьПользователя
	   И Не сП_РолиАдминистратораДоступны() Тогда

		Возврат Результат;
	КонецЕсли;

	Результат.ИдентификаторПользователяИБ = ТекущийПользовательИБ.УникальныйИдентификатор;
	Результат.ПолноеИмяПользователя       = ТекущийПользовательИБ.ПолноеИмя;

	Если Результат.СоздатьПользователя Тогда
		Возврат Результат;
	КонецЕсли;

	ПользовательПоНаименованию = сП_СсылкаПользователяПоПолномуНаименованию(Результат.ПолноеИмяПользователя);

	Если ПользовательПоНаименованию <> Неопределено Тогда
		Результат.ПользовательНайден  = Истина;
		Результат.ТекущийПользователь = ПользовательПоНаименованию;
	Иначе
		Результат.СоздатьПользователя = Истина;
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция сП_СсылкаПользователяПоПолномуНаименованию(ПолноеИмя)
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка,
	|	Пользователи.ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Наименование = &ПолноеИмя";

	Запрос.УстановитьПараметр("ПолноеИмя", ПолноеИмя);

	Результат = Неопределено;

	НачатьТранзакцию();
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();

			Если НЕ П_ПользовательИБЗанят(Выборка.ИдентификаторПользователяИБ) Тогда
				Результат = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;

	Возврат Результат;
КонецФункции

Функция сП_ПользовательПоИдентификаторуСуществует(УникальныйИдентификатор, СсылкаНаТекущего = Неопределено, НайденныйПользователь = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаНаТекущего", СсылкаНаТекущего);
	Запрос.УстановитьПараметр("УникальныйИдентификатор", УникальныйИдентификатор);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ИдентификаторПользователяИБ = &УникальныйИдентификатор
	|	И Пользователи.Ссылка <> &СсылкаНаТекущего
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВнешниеПользователи.Ссылка
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|ГДЕ
	|	ВнешниеПользователи.ИдентификаторПользователяИБ = &УникальныйИдентификатор
	|	И ВнешниеПользователи.Ссылка <> &СсылкаНаТекущего";

	Результат = Ложь;
	НайденныйПользователь = Неопределено;

	РезультатЗапроса = Запрос.Выполнить();

	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка					= РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		НайденныйПользователь	= Выборка.Пользователь;
		Результат				= Истина;
		П_НайтиНеоднозначныхПользователейИБ(Неопределено, УникальныйИдентификатор);
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция сП_РолиАдминистратораДоступны(ПользовательИБ = Неопределено) Экспорт
	Если ПользовательИБ = Неопределено
		Или ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь() Тогда

		Возврат РольДоступна(Метаданные.Роли.ПолныеПрава)          // Не заменять на РолиДоступны.
		     И (РольДоступна(Метаданные.Роли.АдминистраторСистемы)); // Не заменять на РолиДоступны.
	КонецЕсли;

	Возврат ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава)
	     И (ПользовательИБ.Роли.Содержит(Метаданные.Роли.АдминистраторСистемы));
КонецФункции

Функция сП_СвойстваНеуказанногоПользователя() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	Свойства = Новый Структура;

	// Ссылка на найденный элемент справочника
	// соответствующий неуказанному пользователю.
	Свойства.Вставить("Ссылка", Неопределено);

	// Ссылка, используемая для поиска и создания
	// неуказанного пользователя в справочнике Пользователи.
	Свойства.Вставить("СтандартнаяСсылка", Справочники.Пользователи.ПолучитьСсылку(
		Новый УникальныйИдентификатор("aa00559e-ad84-4494-88fd-f0826edc46f0")));

	// Полное имя, которое устанавливается в элемент справочника Пользователи
	// при создании несуществующего неуказанного пользователя.
	Свойства.Вставить("ПолноеИмя", "<Не указан>");

	// Полное имя, которое используется для поиска неуказанного пользователя
	// старым способом, необходимым для поддержки старых версий
	// неуказанного пользователя. Это имя не требуется изменять.
	Свойства.Вставить("ПолноеИмяДляПоиска", "<Не указан>");

	// Поиск по уникальному идентификатору.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Свойства.СтандартнаяСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка = &Ссылка";

	НачатьТранзакцию();
	Попытка
		Если Запрос.Выполнить().Пустой() Тогда
			Запрос.УстановитьПараметр("ПолноеИмя", Свойства.ПолноеИмяДляПоиска);
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Пользователи.Ссылка
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|	Пользователи.Наименование = &ПолноеИмя";
			Результат = Запрос.Выполнить();

			Если НЕ Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				Свойства.Ссылка = Выборка.Ссылка;
			КонецЕсли;
		Иначе
			Свойства.Ссылка = Свойства.СтандартнаяСсылка;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;

	Возврат Свойства;
КонецФункции

Функция сП_ТекстСообщенияПользовательНеНайденВСправочнике(ИмяПользователя)
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВнешнихПользователей") Тогда
		ШаблонСообщенияОбОшибке =
			"Пользователь ""%1"" не найден в справочниках
			           |""Пользователи"" и ""Внешние пользователи"".
			           |
			           |Обратитесь к администратору.";
	Иначе
		ШаблонСообщенияОбОшибке =
			"Пользователь ""%1"" не найден в справочнике ""Пользователи"".
			           |
			           |Обратитесь к администратору.";
	КонецЕсли;

	Возврат СтрШаблон(ШаблонСообщенияОбОшибке, ИмяПользователя);
КонецФункции

Процедура сП_СоздатьТекущегоПользователяВСправочнике(СведенияОПользователе)
	НачатьТранзакцию();
	Попытка
		Если СведенияОПользователе.СсылкаНового = Неопределено Тогда
			СведенияОПользователе.СсылкаНового = Справочники.Пользователи.ПолучитьСсылку();
		КонецЕсли;

		СведенияОПользователе.ТекущийПользователь = СведенияОПользователе.СсылкаНового;

		ПараметрыСеанса.ТекущийПользователь			= СведенияОПользователе.ТекущийПользователь;
		ПараметрыСеанса.ТекущийВнешнийПользователь	= СведенияОПользователе.ТекущийВнешнийПользователь;
		ПараметрыСеанса.АвторизованныйПользователь	= СведенияОПользователе.ТекущийПользователь;

		НовыйПользователь				= Справочники.Пользователи.СоздатьЭлемент();
		НовыйПользователь.Служебный		= СведенияОПользователе.Служебный;
		НовыйПользователь.Наименование	= СведенияОПользователе.ПолноеИмяПользователя;
		НовыйПользователь.УстановитьСсылкуНового(СведенияОПользователе.СсылкаНового);

		Если ЗначениеЗаполнено(СведенияОПользователе.ИдентификаторПользователяИБ) Тогда
			ОписаниеПользователяИБ = Новый Структура;
			ОписаниеПользователяИБ.Вставить("Действие",					"Записать");
			ОписаниеПользователяИБ.Вставить("УникальныйИдентификатор",	СведенияОПользователе.ИдентификаторПользователяИБ);

			НовыйПользователь.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
		КонецЕсли;

		НовыйПользователь.Записать();

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ОчищаемыеПараметры = Новый Массив;
		ОчищаемыеПараметры.Добавить("ТекущийПользователь");
		ОчищаемыеПараметры.Добавить("ТекущийВнешнийПользователь");
		ОчищаемыеПараметры.Добавить("АвторизованныйПользователь");
		ПараметрыСеанса.Очистить(ОчищаемыеПараметры);

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

Функция сП_РезультатУстановкиПараметровСеанса(РегистрироватьВЖурнале)
	Попытка
		сП_АвторизованныйПользователь();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Возврат сП_КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(ИнформацияОбОшибке,, РегистрироватьВЖурнале);
	КонецПопытки;

	Возврат "";
КонецФункции

Функция сП_КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(ИнформацияОбОшибке, ШаблонОшибки = "", РегистрироватьВЖурнале = Истина)
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		КраткоеПредставление   = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ПодробноеПредставление = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	Иначе
		КраткоеПредставление   = ИнформацияОбОшибке;
		ПодробноеПредставление = ИнформацияОбОшибке;
	КонецЕсли;

	Если ЗначениеЗаполнено(ШаблонОшибки) Тогда
		КраткоеПредставление	= СтрШаблон(ШаблонОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		ПодробноеПредставление	= СтрШаблон(ШаблонОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецЕсли;

	КраткоеПредставление   = "Авторизация не выполнена. Работа системы будет завершена." + Символы.ПС + Символы.ПС + КраткоеПредставление;
	ПодробноеПредставление = "Авторизация не выполнена. Работа системы будет завершена." + Символы.ПС + Символы.ПС + ПодробноеПредставление;

	Если РегистрироватьВЖурнале Тогда
		ЗаписьЖурналаРегистрации("Пользователи.Ошибка входа в программу", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставление);
	КонецЕсли;

	Возврат КраткоеПредставление;
КонецФункции

Функция сП_ТребуетсяСменитьПароль(ОписаниеОшибки = "", ПриЗапуске = Ложь, РегистрироватьВЖурнале = Истина)
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	Если Не ЗначениеЗаполнено(ПользовательИБ.Имя) Тогда
		Возврат Ложь;
	КонецЕсли;

	// Обновление даты последнего входа пользователя.
	УстановитьПривилегированныйРежим(Истина);
	ТекущийПользователь = сП_АвторизованныйПользователь();
	НачалоДняТекущейДатыСеанса = НачалоДня(ТекущаяДатаСеанса());

	Блокировка			= Новый БлокировкаДанных;
	ЭлементБлокировки	= Блокировка.Добавить("РегистрСведений.СведенияОПользователях");
	ЭлементБлокировки.УстановитьЗначение("Пользователь", ТекущийПользователь);
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		НаборЗаписей = РегистрыСведений.СведенияОПользователях.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(ТекущийПользователь);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			СведенияОПользователе				= НаборЗаписей.Добавить();
			СведенияОПользователе.Пользователь	= ТекущийПользователь;
		Иначе
			СведенияОПользователе				= НаборЗаписей[0];
		КонецЕсли;
		Записать = Ложь;
		Если СведенияОПользователе.ДатаПоследнейАктивности <> НачалоДняТекущейДатыСеанса Тогда
			СведенияОПользователе.ДатаПоследнейАктивности = НачалоДняТекущейДатыСеанса;
			Записать = Истина;
		КонецЕсли;
		ИспользуемыйКлиент = БазоваяПодсистемаСервер.СП_ПараметрыКлиентаНаСервере().Получить("ИспользуемыйКлиент");
		Если СведенияОПользователе.ПоследнийИспользуемыйКлиент <> ИспользуемыйКлиент Тогда
			СведенияОПользователе.ПоследнийИспользуемыйКлиент	= ИспользуемыйКлиент;
			Записать											= Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СведенияОПользователе.ДатаНачалаИспользованияПароля)
		 Или СведенияОПользователе.ДатаНачалаИспользованияПароля > НачалоДняТекущейДатыСеанса Тогда
			СведенияОПользователе.ДатаНачалаИспользованияПароля	= НачалоДняТекущейДатыСеанса;
			Записать											= Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(СведенияОПользователе.ДатаАвтоматическогоЗапрещенияВхода) Тогда
			СведенияОПользователе.ДатаАвтоматическогоЗапрещенияВхода	= Неопределено;
			Записать													= Истина;
		КонецЕсли;
		Если Записать Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ШаблонТекстаОшибки = "Не удалось записать сведения о текущем пользователе по причине:
		           |%1
		           |
		           |Обратитесь к администратору.";
		Если ПриЗапуске Тогда
			ОписаниеОшибки = "Авторизация не выполнена. Работа системы будет завершена." + Символы.ПС + Символы.ПС
				+ СтрШаблон(ШаблонТекстаОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке));

			Если РегистрироватьВЖурнале Тогда
				ЗаписьЖурналаРегистрации(
					"Пользователи.Ошибка входа в программу",
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.НайтиПоТипу(ТипЗнч(ТекущийПользователь)),
					ТекущийПользователь,
					СтрШаблон(ШаблонТекстаОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
			КонецЕсли;
		Иначе
			Если РегистрироватьВЖурнале Тогда
				ЗаписьЖурналаРегистрации(
					"Пользователи.Ошибка обновления даты последней активности",
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.НайтиПоТипу(ТипЗнч(ТекущийПользователь)),
					ТекущийПользователь,
					СтрШаблон(ШаблонТекстаОшибки,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
			КонецЕсли;
		КонецЕсли;

		Возврат Ложь;
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("УчитыватьСвойствоЗапрещеноИзменятьПароль");
	ДополнительныеПараметры.Вставить("УчитыватьСвойствоАутентификацияСтандартная");
	Если Не сП_ВозможноИзменитьПароль(ТекущийПользователь, ДополнительныеПараметры) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если СведенияОПользователе.ПотребоватьСменуПароляПриВходе Тогда
		Возврат Истина;
	КонецЕсли;

	Если Не ПользователиСерверПовтИсп.сП_Настройки().ОбщиеНастройкиВхода Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		НастройкиВхода = ПользователиСерверПовтИсп.сП_Настройки().ВнешниеПользователи;
	Иначе
		НастройкиВхода = ПользователиСерверПовтИсп.сП_Настройки().Пользователи;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(НастройкиВхода.МаксимальныйСрокДействияПароля) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(СведенияОПользователе.ДатаНачалаИспользованияПароля) Тогда
		Возврат Ложь;
	КонецЕсли;

	ОстатокМаксимальногоСрокаДействияПароля = НастройкиВхода.МаксимальныйСрокДействияПароля
		- (НачалоДняТекущейДатыСеанса - СведенияОПользователе.ДатаНачалаИспользованияПароля) / (24*60*60);

	Возврат ОстатокМаксимальногоСрокаДействияПароля <= 0;
КонецФункции

Функция сП_НастройкиВхода() Экспорт
	Настройки = Новый Структура;
	// Требования сложности.
	Настройки.Вставить("ПарольДолженОтвечатьТребованиямСложности",		Ложь);
	Настройки.Вставить("МинимальнаяДлинаПароля",						0);
	// Требования срока действия.
	Настройки.Вставить("МаксимальныйСрокДействияПароля",				0);
	Настройки.Вставить("МинимальныйСрокДействияПароля",					0);
	Настройки.Вставить("ЗапретитьПовторениеПароляСредиПоследних",		0);
	// Требование периодической работы в программе.
	Настройки.Вставить("ПросрочкаРаботыВПрограммеДоЗапрещенияВхода",	0);
	Настройки.Вставить("ПросрочкаРаботыВПрограммеДатаВключения",		'00010101');

	КопияНастроек = Новый ФиксированнаяСтруктура(Настройки);

	ПодготовленныеНастройки = Новый Структура;
	ПодготовленныеНастройки.Вставить("Пользователи", Новый Структура(КопияНастроек));
	ПодготовленныеНастройки.Вставить("ВнешниеПользователи", Настройки);

	УстановитьПривилегированныйРежим(Истина);
	СохраненныеНастройки = Константы.НастройкиВходаПользователей.Получить().Получить();
	УстановитьПривилегированныйРежим(Ложь);
	Если ТипЗнч(СохраненныеНастройки) <> Тип("Структура") Тогда
		Возврат ПодготовленныеНастройки;
	КонецЕсли;

	Для Каждого ПодготовленнаяНастройка Из ПодготовленныеНастройки Цикл
		Если Не СохраненныеНастройки.Свойство(ПодготовленнаяНастройка.Ключ)
		 Или ТипЗнч(СохраненныеНастройки[ПодготовленнаяНастройка.Ключ]) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		НачальныеНастройки	= ПодготовленнаяНастройка.Значение;
		ТекущиеНастройки	= СохраненныеНастройки[ПодготовленнаяНастройка.Ключ];

		Если ТипЗнч(ТекущиеНастройки) = Тип("Структура") Тогда
			Для Каждого НачальнаяНастройка Из НачальныеНастройки Цикл
				Если Не ТекущиеНастройки.Свойство(НачальнаяНастройка.Ключ)
				 Или ТипЗнч(ТекущиеНастройки[НачальнаяНастройка.Ключ]) <> ТипЗнч(НачальнаяНастройка.Значение) Тогда

					Продолжить;
				КонецЕсли;

				НачальныеНастройки[НачальнаяНастройка.Ключ] = ТекущиеНастройки[НачальнаяНастройка.Ключ];
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	Возврат ПодготовленныеНастройки;
КонецФункции

Функция сП_ВозможноИзменитьПароль(Пользователь, ДополнительныеПараметры = Неопределено) Экспорт
	Если ТипЗнч(ДополнительныеПараметры) <> Тип("Структура") Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	РеквизитыПользователя = БазоваяПодсистемаСервер.ОН_ЗначенияРеквизитовОбъекта(Пользователь, "Ссылка, Недействителен, ИдентификаторПользователяИБ, Подготовлен");

	Если РеквизитыПользователя.Ссылка <> Пользователь Тогда
		РеквизитыПользователя.Ссылка						= БазоваяПодсистемаСервер.ОН_МенеджерОбъектаПоСсылке(Пользователь).ПустаяСсылка();
		РеквизитыПользователя.Недействителен				= Ложь;
		РеквизитыПользователя.Подготовлен					= Ложь;
		РеквизитыПользователя.ИдентификаторПользователяИБ	= Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	КонецЕсли;

	Если ДополнительныеПараметры.Свойство("ПроверятьДействительностьПользователя")
	   И РеквизитыПользователя.Недействителен <> Ложь Тогда

		ДополнительныеПараметры.Вставить("ТекстОшибки", СтрШаблон("Пользователь ""%1"" недействителен.", Пользователь));

		Возврат Ложь;
	КонецЕсли;

	ИдентификаторПользователяИБ	= РеквизитыПользователя.ИдентификаторПользователяИБ;
	ПользовательИБ				= ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);

	УстановитьПривилегированныйРежим(Ложь);

	Если ДополнительныеПараметры.Свойство("ПроверятьНаличиеПользователяИБ")
	   И ПользовательИБ = Неопределено Тогда

		ДополнительныеПараметры.Вставить("ТекстОшибки", СтрШаблон("Не найдена учетная запись пользователя ""%1"".", Пользователь));
		Возврат Ложь;
	КонецЕсли;

	ДополнительныеПараметры.Вставить("ИдентификаторПользователяИБ", ИдентификаторПользователяИБ);

	ИдентификаторТекущегоПользователяИБ = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
	ДополнительныеПараметры.Вставить("ЭтоТекущийПользовательИБ", ИдентификаторПользователяИБ = ИдентификаторТекущегоПользователяИБ);

	УровеньДоступа = сП_УровеньДоступаКСвойствамПользователя(РеквизитыПользователя);

	Если Не ДополнительныеПараметры.ЭтоТекущийПользовательИБ
	   И Не УровеньДоступа.НастройкиДляВхода Тогда

		ДополнительныеПараметры.Вставить("ТекстОшибки", СтрШаблон("Недостаточно прав для изменения пароля пользователя ""%1"".", Пользователь));
		Возврат Ложь;
	КонецЕсли;

	ДополнительныеПараметры.Вставить("ПарольУстановлен", ПользовательИБ <> Неопределено И ПользовательИБ.ПарольУстановлен);

	Если ПользовательИБ <> Неопределено И ПользовательИБ.ЗапрещеноИзменятьПароль Тогда
		Если УровеньДоступа.НастройкиДляВхода Тогда
			Если ДополнительныеПараметры.Свойство("УчитыватьСвойствоЗапрещеноИзменятьПароль") Тогда
				ДополнительныеПараметры.Вставить("ТекстОшибки", СтрШаблон("Установлен запрет изменения пароля пользователя ""%1"".", Пользователь));
				Возврат Ложь;
			КонецЕсли;
		Иначе
			ДополнительныеПараметры.Вставить("ТекстОшибки", СтрШаблон(
				"Установлен запрет изменения пароля пользователя ""%1"".
				           |Обратитесь к администратору.", Пользователь));
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	Если ДополнительныеПараметры.Свойство("УчитыватьСвойствоАутентификацияСтандартная")
	   И ПользовательИБ <> Неопределено
	   И Не ПользовательИБ.АутентификацияСтандартная Тогда
		Возврат Ложь;
	КонецЕсли;

	// Проверка минимального срока действия пароля.
	Если УровеньДоступа.НастройкиДляВхода Тогда
		Возврат Истина;
	КонецЕсли;

	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		НастройкиВхода = ПользователиСерверПовтИсп.сП_Настройки().ВнешниеПользователи;
	Иначе
		НастройкиВхода = ПользователиСерверПовтИсп.сП_Настройки().Пользователи;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(НастройкиВхода.МинимальныйСрокДействияПароля) Тогда
		Возврат Истина;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей = РегистрыСведений.СведенияОПользователях.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Прочитать();
	УстановитьПривилегированныйРежим(Ложь);

	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	СведенияОПользователе = НаборЗаписей[0];

	Если Не ЗначениеЗаполнено(СведенияОПользователе.ДатаНачалаИспользованияПароля) Тогда
		Возврат Истина;
	КонецЕсли;

	НачалоДняТекущейДатыСеанса				= НачалоДня(ТекущаяДатаСеанса());
	ОстатокМинимальногоСрокаДействияПароля	= НастройкиВхода.МинимальныйСрокДействияПароля
		- (НачалоДняТекущейДатыСеанса - СведенияОПользователе.ДатаНачалаИспользованияПароля) / (24*60*60);

	Если ОстатокМинимальногоСрокаДействияПароля <= 0 Тогда
		Возврат Истина;
	КонецЕсли;

	КоличествоДней = ОстатокМинимальногоСрокаДействияПароля;

	ЧислоИПредмет = СтрокаСЧислом(";%1 день;;%1 дня;%1 дней;%1 дня", КоличествоДней, ВидЧисловогоЗначения.Количественное, "L=ru");;

	ДополнительныеПараметры.Вставить("ТекстОшибки", СтрШаблон("Пароль можно будет сменить только через %1.", ЧислоИПредмет));

	Возврат Ложь;
КонецФункции

Функция сП_УровеньДоступаКСвойствамПользователя(ОписаниеОбъекта, ПараметрыОбработки = Неопределено) Экспорт
	УровеньДоступа = Новый Структура;

	// Администратор системы (системные данные).
	УровеньДоступа.Вставить("АдминистраторСистемы", П_ЭтоПолноправныйПользователь(, Истина));

	// Полноправный пользователь (основных данные).
	УровеньДоступа.Вставить("ПолныеПрава", П_ЭтоПолноправныйПользователь());

	Если ТипЗнч(ОписаниеОбъекта.Ссылка) = Тип("СправочникСсылка.Пользователи") Тогда
		// Ответственный за список пользователей.
		УровеньДоступа.Вставить("УправлениеСписком",
			ПравоДоступа("Добавление", Метаданные.Справочники.Пользователи)
			И (УровеньДоступа.ПолныеПрава Или Не П_ЭтоПолноправныйПользователь(ОписаниеОбъекта.Ссылка)));
		// Пользователь текущего пользователя ИБ.
		УровеньДоступа.Вставить("ИзменениеТекущего",
			УровеньДоступа.ПолныеПрава
			Или ПравоДоступа("Изменение", Метаданные.Справочники.Пользователи) И ОписаниеОбъекта.Ссылка = сП_АвторизованныйПользователь());
	ИначеЕсли ТипЗнч(ОписаниеОбъекта.Ссылка) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		// Ответственный за список внешних пользователей.
		УровеньДоступа.Вставить("УправлениеСписком",
			ПравоДоступа("Добавление", Метаданные.Справочники.ВнешниеПользователи)
			И (УровеньДоступа.ПолныеПрава Или Не П_ЭтоПолноправныйПользователь(ОписаниеОбъекта.Ссылка)));
		// Внешний пользователь текущего пользователя ИБ.
		УровеньДоступа.Вставить("ИзменениеТекущего",
			УровеньДоступа.ПолныеПрава
			Или ПравоДоступа("Изменение", Метаданные.Справочники.ВнешниеПользователи)
			  И ОписаниеОбъекта.Ссылка = сП_АвторизованныйПользователь());
	КонецЕсли;

	Если ПараметрыОбработки = Неопределено Тогда
		УстановитьПривилегированныйРежим(Истина);
		Если ЗначениеЗаполнено(ОписаниеОбъекта.ИдентификаторПользователяИБ) Тогда
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ОписаниеОбъекта.ИдентификаторПользователяИБ);
		Иначе
			ПользовательИБ = Неопределено;
		КонецЕсли;
		ПользовательБезНастроекДляВходаИлиПодготовлен =
			    ПользовательИБ = Неопределено
			Или ОписаниеОбъекта.Подготовлен
			    И Не П_ВходВПрограммуРазрешен(ПользовательИБ);
		УстановитьПривилегированныйРежим(Ложь);
	Иначе
		ПользовательБезНастроекДляВходаИлиПодготовлен =
			    Не ПараметрыОбработки.СтарыйПользовательИБСуществует
			Или ПараметрыОбработки.СтарыйПользователь.Подготовлен
			    И Не П_ВходВПрограммуРазрешен(ПараметрыОбработки.ОписаниеСтарогоПользователяИБ);
	КонецЕсли;

	УровеньДоступа.Вставить("ИзменениеРазрешенияНаВход",
		    УровеньДоступа.АдминистраторСистемы
		Или УровеньДоступа.ПолныеПрава
		  И Не П_ЭтоПолноправныйПользователь(ОписаниеОбъекта.Ссылка, Истина));

	УровеньДоступа.Вставить("ОтключениеРазрешенияНаВход",
		    УровеньДоступа.АдминистраторСистемы
		Или УровеньДоступа.ПолныеПрава
		  И Не П_ЭтоПолноправныйПользователь(ОписаниеОбъекта.Ссылка, Истина)
		Или УровеньДоступа.УправлениеСписком);

	УровеньДоступа.Вставить("НастройкиДляВхода",
		    УровеньДоступа.АдминистраторСистемы
		Или УровеньДоступа.ПолныеПрава
		  И Не П_ЭтоПолноправныйПользователь(ОписаниеОбъекта.Ссылка, Истина)
		Или УровеньДоступа.УправлениеСписком
		  И ПользовательБезНастроекДляВходаИлиПодготовлен);

	УровеньДоступа.Вставить("НетДоступа",
		  НЕ УровеньДоступа.АдминистраторСистемы
		И НЕ УровеньДоступа.ПолныеПрава
		И НЕ УровеньДоступа.УправлениеСписком
		И НЕ УровеньДоступа.ИзменениеТекущего
		И НЕ УровеньДоступа.НастройкиДляВхода);

	Возврат УровеньДоступа;
КонецФункции

Процедура сП_ПроверитьВходВПрограммуРазрешен(ОшибкаАвторизации)
	УстановитьПривилегированныйРежим(Истина);

	Идентификатор	= ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
	ПользовательИБ	= ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Идентификатор);

	Если ПользовательИБ = Неопределено
	 Или П_ВходВПрограммуРазрешен(ПользовательИБ) Тогда
		Возврат;
	КонецЕсли;

	ОшибкаАвторизации = "Авторизация не выполнена. Работа системы будет завершена." + Символы.ПС + Символы.ПС
		+ "Ваша учетная запись отключена. Обратитесь к администратору.";
КонецПроцедуры

Процедура сП_ОтключитьНеактивныхИПросроченныхПользователей(ТолькоДляАвторизованногоПользователя = Ложь, ОписаниеОшибки = "", РегистрироватьВЖурнале = Истина)
	УстановитьПривилегированныйРежим(Истина);

	Настройки = ПользователиСерверПовтИсп.сП_Настройки();
	Если Не Настройки.ОбщиеНастройкиВхода Тогда
		Если Не ТолькоДляАвторизованногоПользователя Тогда
			РегламентныеЗаданияСервер.РЗ_УстановитьИспользованиеПредопределенногоРегламентногоЗадания(
				Метаданные.РегламентныеЗадания.КонтрольАктивностиПользователей, Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустаяДата",                                 '00010101');
	Запрос.УстановитьПараметр("НачалоДняТекущейДатыСеанса",                 НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ДатаВключенияПросрочкиПользователей",        Настройки.Пользователи.ПросрочкаРаботыВПрограммеДатаВключения);
	Запрос.УстановитьПараметр("ПросрочкаРаботыПользователей",               Настройки.Пользователи.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода);
	Запрос.УстановитьПараметр("ДатаВключенияПросрочкиВнешнихПользователей", Настройки.ВнешниеПользователи.ПросрочкаРаботыВПрограммеДатаВключения);
	Запрос.УстановитьПараметр("ПросрочкаРаботыВнешнихПользователей",        Настройки.ВнешниеПользователи.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <> &ПустаяДата
	|			ТОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <= &НачалоДняТекущейДатыСеанса
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СрокДействияИстек
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
	|		ПО (СведенияОПользователях.Пользователь = Пользователи.Ссылка)
	|ГДЕ
	|	&ОтборПользователей
	|	И ЕСТЬNULL(СведенияОПользователях.СрокДействияНеОграничен, ЛОЖЬ) = ЛОЖЬ
	|	И ЕСТЬNULL(СведенияОПользователях.ДатаАвтоматическогоЗапрещенияВхода, &ПустаяДата) = &ПустаяДата
	|	И ВЫБОР
	|			КОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <> &ПустаяДата
	|				ТОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <= &НачалоДняТекущейДатыСеанса
	|			КОГДА ЕСТЬNULL(СведенияОПользователях.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода, 0) <> 0
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата) <= ЕСТЬNULL(СведенияОПользователях.ДатаРазрешенияВходаВПрограмму, &ПустаяДата)
	|							ТОГДА ВЫБОР
	|									КОГДА ЕСТЬNULL(СведенияОПользователях.ДатаРазрешенияВходаВПрограмму, &ПустаяДата) = &ПустаяДата
	|										ТОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(&ДатаВключенияПросрочкиПользователей, ДЕНЬ, СведенияОПользователях.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода)
	|									ИНАЧЕ &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(СведенияОПользователях.ДатаРазрешенияВходаВПрограмму, ДЕНЬ, СведенияОПользователях.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода)
	|								КОНЕЦ
	|						КОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата), ДЕНЬ, СведенияОПользователях.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода)
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА &ПросрочкаРаботыПользователей = 0
	|						ТОГДА ЛОЖЬ
	|					КОГДА ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата) <= ЕСТЬNULL(СведенияОПользователях.ДатаРазрешенияВходаВПрограмму, &ПустаяДата)
	|						ТОГДА ВЫБОР
	|								КОГДА ЕСТЬNULL(СведенияОПользователях.ДатаРазрешенияВходаВПрограмму, &ПустаяДата) = &ПустаяДата
	|									ТОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(&ДатаВключенияПросрочкиПользователей, ДЕНЬ, &ПросрочкаРаботыПользователей)
	|								ИНАЧЕ &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(СведенияОПользователях.ДатаРазрешенияВходаВПрограмму, ДЕНЬ, &ПросрочкаРаботыПользователей)
	|							КОНЕЦ
	|					КОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата), ДЕНЬ, &ПросрочкаРаботыПользователей)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВнешниеПользователи.Ссылка,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <> &ПустаяДата
	|			ТОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <= &НачалоДняТекущейДатыСеанса
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
	|		ПО (СведенияОПользователях.Пользователь = ВнешниеПользователи.Ссылка)
	|ГДЕ
	|	&ОтборВнешнихПользователей
	|	И ЕСТЬNULL(СведенияОПользователях.СрокДействияНеОграничен, ЛОЖЬ) = ЛОЖЬ
	|	И ЕСТЬNULL(СведенияОПользователях.ДатаАвтоматическогоЗапрещенияВхода, &ПустаяДата) = &ПустаяДата
	|	И ВЫБОР
	|			КОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <> &ПустаяДата
	|				ТОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <= &НачалоДняТекущейДатыСеанса
	|			КОГДА ЕСТЬNULL(СведенияОПользователях.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода, 0) <> 0
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата) <= ЕСТЬNULL(СведенияОПользователях.ДатаРазрешенияВходаВПрограмму, &ПустаяДата)
	|							ТОГДА ВЫБОР
	|									КОГДА ЕСТЬNULL(СведенияОПользователях.ДатаРазрешенияВходаВПрограмму, &ПустаяДата) = &ПустаяДата
	|										ТОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(&ДатаВключенияПросрочкиВнешнихПользователей, ДЕНЬ, СведенияОПользователях.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода)
	|									ИНАЧЕ &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(СведенияОПользователях.ДатаРазрешенияВходаВПрограмму, ДЕНЬ, СведенияОПользователях.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода)
	|								КОНЕЦ
	|						КОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата), ДЕНЬ, СведенияОПользователях.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода)
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА &ПросрочкаРаботыВнешнихПользователей = 0
	|						ТОГДА ЛОЖЬ
	|					КОГДА ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата) <= ЕСТЬNULL(СведенияОПользователях.ДатаРазрешенияВходаВПрограмму, &ПустаяДата)
	|						ТОГДА ВЫБОР
	|								КОГДА ЕСТЬNULL(СведенияОПользователях.ДатаРазрешенияВходаВПрограмму, &ПустаяДата) = &ПустаяДата
	|									ТОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(&ДатаВключенияПросрочкиВнешнихПользователей, ДЕНЬ, &ПросрочкаРаботыВнешнихПользователей)
	|								ИНАЧЕ &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(СведенияОПользователях.ДатаРазрешенияВходаВПрограмму, ДЕНЬ, &ПросрочкаРаботыВнешнихПользователей)
	|							КОНЕЦ
	|					КОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата), ДЕНЬ, &ПросрочкаРаботыВнешнихПользователей)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОНЕЦ";
	Если ТолькоДляАвторизованногоПользователя Тогда
		Запрос.УстановитьПараметр("Пользователь", сП_АвторизованныйПользователь());
		ОтборПользователей        = "Пользователи.Ссылка = &Пользователь";
		ОтборВнешнихПользователей = "ВнешниеПользователи.Ссылка = &Пользователь";
	Иначе
		ОтборПользователей        = "ИСТИНА";
		ОтборВнешнихПользователей = "ИСТИНА";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПользователей",        ОтборПользователей);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборВнешнихПользователей", ОтборВнешнихПользователей);

	Выборка = Запрос.Выполнить().Выбрать();

	ИнформацияОбОшибке = Неопределено;
	Пока Выборка.Следующий() Цикл
		Пользователь = Выборка.Пользователь;
		Если НЕ Выборка.СрокДействияИстек
		   И П_ЭтоПолноправныйПользователь(Пользователь,, Ложь) Тогда
			Продолжить;
		КонецЕсли;
		Блокировка			= Новый БлокировкаДанных;
		ЭлементБлокировки	= Блокировка.Добавить("РегистрСведений.СведенияОПользователях");
		ЭлементБлокировки.УстановитьЗначение("Пользователь", Пользователь);
		НачатьТранзакцию();
		Попытка
			Блокировка.Заблокировать();
			ИдентификаторПользователяИБ = БазоваяПодсистемаСервер.ОН_ЗначениеРеквизитаОбъекта(Пользователь,"ИдентификаторПользователяИБ");
			ПользовательИБ = Неопределено;
			Если ТипЗнч(ИдентификаторПользователяИБ) = Тип("УникальныйИдентификатор") Тогда
				ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);
			КонецЕсли;
			Если ПользовательИБ <> Неопределено
			   И (    ПользовательИБ.АутентификацияСтандартная
			      Или ПользовательИБ.АутентификацияОС
			      Или ПользовательИБ.АутентификацияOpenID) Тогда

				ОбновляемыеСвойства = Новый Структура;
				ОбновляемыеСвойства.Вставить("АутентификацияСтандартная", Ложь);
				ОбновляемыеСвойства.Вставить("АутентификацияОС",          Ложь);
				ОбновляемыеСвойства.Вставить("АутентификацияOpenID",      Ложь);

				П_УстановитьСвойстваПользователяИБ(ПользовательИБ.УникальныйИдентификатор,
					ОбновляемыеСвойства, Ложь, ТипЗнч(Пользователь) = Тип("СправочникСсылка.ВнешниеПользователи"));
			КонецЕсли;
			НаборЗаписей = РегистрыСведений.СведенияОПользователях.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				СведенияОПользователе				= НаборЗаписей.Добавить();
				СведенияОПользователе.Пользователь	= Пользователь;
			Иначе
				СведенияОПользователе				= НаборЗаписей[0];
			КонецЕсли;
			СведенияОПользователе.ДатаАвтоматическогоЗапрещенияВхода = НачалоДня(ТекущаяДатаСеанса());
			НаборЗаписей.Записать();

			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ИнформацияОбОшибке = ИнформацияОбОшибке();

			ШаблонТекстаОшибки = "Не удалось записать сведения о текущем пользователе по причине:
		           |%1
		           |
		           |Обратитесь к администратору.";
			ОписаниеОшибки = "Авторизация не выполнена. Работа системы будет завершена." + Символы.ПС + Символы.ПС
				+ СтрШаблон(ШаблонТекстаОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке));

			Если РегистрироватьВЖурнале Тогда
				Если Выборка.СрокДействияИстек Тогда
					ШаблонКомментария =
						"Не удалось снять пользователю ""%1"" признак
						           |""Вход в программу разрешен"" в связи с окончанием срока действия по причине:
						           |%2";
				Иначе
					ШаблонКомментария =
						"Не удалось снять пользователю ""%1"" признак
						           |""Вход в программу разрешен"" в связи с отсутствием работы
						           |в программе более установленного срока по причине:
						           |%2";
				КонецЕсли;
				ЗаписьЖурналаРегистрации(
					"Пользователи.Ошибка автоматического запрещения входа в программу",
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.НайтиПоТипу(ТипЗнч(Пользователь)),
					Пользователь,
					СтрШаблон(ШаблонКомментария, Пользователь, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
			КонецЕсли;
		КонецПопытки;
	КонецЦикла;

	Если ТолькоДляАвторизованногоПользователя Тогда
		Возврат;
	КонецЕсли;

	Если ИнформацияОбОшибке <> Неопределено
		Или ЗначениеЗаполнено(Настройки.Пользователи.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода)
		Или ЗначениеЗаполнено(Настройки.ВнешниеПользователи.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода) Тогда
		// Для проверки просрочки работы в программе, задание выключить нельзя.

		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
	|ГДЕ
	|	 СведенияОПользователях.СрокДействия <> &ПустаяДата
	|	И СведенияОПользователях.ДатаАвтоматическогоЗапрещенияВхода = &ПустаяДата";

	Если Запрос.Выполнить().Пустой() Тогда
		РегламентныеЗаданияСервер.РЗ_УстановитьИспользованиеПредопределенногоРегламентногоЗадания(
			Метаданные.РегламентныеЗадания.КонтрольАктивностиПользователей, Ложь);
	КонецЕсли;
КонецПроцедуры

Функция сП_СтарыйПарольСовпадаетССохраненным(Пароль, ИдентификаторПользователяИБ) Экспорт
	Если ТипЗнч(ИдентификаторПользователяИБ) <> Тип("УникальныйИдентификатор") Тогда
		Возврат Ложь;
	КонецЕсли;

	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);

	Если ТипЗнч(ПользовательИБ) <> Тип("ПользовательИнформационнойБазы") Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат сП_ХешСуммаПароляСовпадает(сП_СохраняемоеЗначениеСтрокиПароля(Пароль), ПользовательИБ.СохраняемоеЗначениеПароля);
КонецФункции

Функция сП_СохраняемоеЗначениеСтрокиПароля(Пароль, ДляЗаписи = Ложь) Экспорт
	Если Пароль = "" И Не ДляЗаписи Тогда
		СохраняемоеЗначениеПароля = "";
	Иначе
		ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA1);
		ХешированиеДанных.Добавить(Пароль);

		СохраняемоеЗначениеПароля = Base64Строка(ХешированиеДанных.ХешСумма);

		ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA1);
		ХешированиеДанных.Добавить(ВРег(Пароль));

		СохраняемоеЗначениеПароля = СохраняемоеЗначениеПароля + ","
			+ Base64Строка(ХешированиеДанных.ХешСумма);
	КонецЕсли;

	Возврат СохраняемоеЗначениеПароля;
КонецФункции

Функция сП_ХешСуммаПароляСовпадает(СохраняемоеЗначениеПервогоПароля, СохраняемоеЗначениеВторогоПароля)
	Если СохраняемоеЗначениеПервогоПароля = СохраняемоеЗначениеВторогоПароля Тогда
		Возврат Истина;
	КонецЕсли;

	ХешСуммыПервогоПароля = СтрРазделить(СохраняемоеЗначениеПервогоПароля, ",", Ложь);
	Если ХешСуммыПервогоПароля.Количество() <> 2 Тогда
		Возврат Ложь;
	КонецЕсли;

	ХешСуммыВторогоПароля = СтрРазделить(СохраняемоеЗначениеВторогоПароля, ",", Ложь);
	Если ХешСуммыВторогоПароля.Количество() <> 2 Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат ХешСуммыПервогоПароля[0] = ХешСуммыВторогоПароля[0]
		Или ХешСуммыПервогоПароля[1] = ХешСуммыВторогоПароля[1];
КонецФункции

Функция сП_ОшибкаДлиныИлиСложностиПароля(Пароль, Знач МинимальнаяДлинаПароля, СложныйПароль) Экспорт
	Если СложныйПароль И МинимальнаяДлинаПароля < 7 Тогда
		МинимальнаяДлинаПароля = 7;
	КонецЕсли;
	Если СтрДлина(Пароль) < МинимальнаяДлинаПароля Тогда
		Возврат СтрШаблон(
			"Количество символов нового пароля должно быть не менее %1.",
			Формат(МинимальнаяДлинаПароля, "ЧГ="));
	КонецЕсли;

	Если СложныйПароль И Не сП_ПарольОтвечаетТребованиямСложности(Пароль) Тогда
		Возврат "Пароль не отвечает требованиям сложности."
			+ Символы.ПС + Символы.ПС
			+ "Надежный пароль:
		           |- имеет не менее 7 символов;
		           |- содержит любые 3 из 4-х типов символов: заглавные
		           |  буквы, строчные буквы, цифры, специальные символы;
		           |- не совпадает с именем (для входа).";
	КонецЕсли;
КонецФункции

Функция сП_ПарольОтвечаетТребованиямСложности(Пароль)
	ДлинаПароля = СтрДлина(Пароль);

	Если ДлинаПароля < 7 Тогда
		Возврат Ложь;
	КонецЕсли;

	ЕстьСимволВВерхнемРегистре = 0;
	ЕстьСимволВНижнемРегистре  = 0;
	ЕстьСимволЦифры            = 0;
	ЕстьСимволСпециальный      = 0;

	ЕстьПоследовательность	= Истина;
	СостояниеСимвола		= "Первый";
	ПредыдущийСимвол		= "";

	Для НомерСимвола = 1 По ДлинаПароля Цикл
		Символ		= Сред(Пароль, НомерСимвола, 1);
		КодСимвола	= КодСимвола(Символ);

		Если КодСимвола > 31 И КодСимвола <> 127 Тогда
			Если СтрНайти("0123456789", Символ) > 0 Тогда
				ЕстьСимволЦифры = 1;
			ИначеЕсли НРег(Символ) <> ВРег(Символ) Тогда
				Если Символ = ВРег(Символ) Тогда
					ЕстьСимволВВерхнемРегистре = 1;
				Иначе
					ЕстьСимволВНижнемРегистре = 1;
				КонецЕсли;
			Иначе
				ЕстьСимволСпециальный = 1;
			КонецЕсли;
		КонецЕсли;

		Если Не ЕстьПоследовательность Тогда
			Продолжить;
		КонецЕсли;

		Если СостояниеСимвола = "Первый" Тогда
			СостояниеСимвола = "Второй";
		ИначеЕсли СостояниеСимвола = "Второй" Тогда
			Если ПредыдущийСимвол = Символ Тогда
				СостояниеСимвола = "ТотЖе";
			ИначеЕсли КодСимвола(ПредыдущийСимвол) = КодСимвола(Символ) - 1 Тогда
				СостояниеСимвола = "Убывает";
			ИначеЕсли КодСимвола(ПредыдущийСимвол) = КодСимвола(Символ) + 1 Тогда
				СостояниеСимвола = "Возрастает";
			Иначе
				ЕстьПоследовательность = Ложь;
			КонецЕсли;
		ИначеЕсли СостояниеСимвола = "ТотЖе" Тогда
			Если ПредыдущийСимвол <> Символ Тогда
				ЕстьПоследовательность = Ложь;
			КонецЕсли;
		ИначеЕсли СостояниеСимвола = "Убывает" Тогда
			Если КодСимвола(ПредыдущийСимвол) <> КодСимвола(Символ) - 1 Тогда
				ЕстьПоследовательность = Ложь;
			КонецЕсли;
		ИначеЕсли СостояниеСимвола = "Возрастает" Тогда
			Если КодСимвола(ПредыдущийСимвол) <> КодСимвола(Символ) + 1 Тогда
				ЕстьПоследовательность = Ложь;
			КонецЕсли;
		КонецЕсли;

		ПредыдущийСимвол = Символ;
	КонецЦикла;

	Возврат Не ЕстьПоследовательность
		  И   ЕстьСимволВВерхнемРегистре
			+ ЕстьСимволВНижнемРегистре
			+ ЕстьСимволЦифры
			+ ЕстьСимволСпециальный > 2;
КонецФункции

Процедура сП_УстановитьНачальныеНастройки(Знач ИмяПользователя, ЭтоВнешнийПользователь = Ложь) Экспорт
	НастройкиКлиента										= Новый НастройкиКлиентскогоПриложения;
	НастройкиКлиента.ОтображатьПанелиНавигацииИДействий		= Ложь;
	НастройкиКлиента.ОтображатьПанельРазделов				= Истина;
	НастройкиКлиента.РежимОткрытияФормПриложения			= РежимОткрытияФормПриложения.Закладки;
	НастройкиКлиента.ВариантИнтерфейсаКлиентскогоПриложения	= ВариантИнтерфейсаКлиентскогоПриложения.Такси;

	НастройкиИнтерфейса								= Новый НастройкиКомандногоИнтерфейса;
	НастройкиИнтерфейса.ОтображениеПанелиРазделов	= ОтображениеПанелиРазделов.КартинкаИТекст;

	НастройкиТакси		= Новый НастройкиИнтерфейсаКлиентскогоПриложения;
	НастройкиСостава	= Новый НастройкиСоставаИнтерфейсаКлиентскогоПриложения;
	ГруппаСлева			= Новый ГруппаНастройкиСоставаИнтерфейсаКлиентскогоПриложения;
	ГруппаСлева.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельИнструментов"));
	ГруппаСлева.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельРазделов"));
	НастройкиСостава.Лево.Добавить(ГруппаСлева);
	НастройкиТакси.УстановитьСостав(НастройкиСостава);

	НачальныеНастройки = Новый Структура;
	НачальныеНастройки.Вставить("НастройкиКлиента",			НастройкиКлиента);
	НачальныеНастройки.Вставить("НастройкиИнтерфейса",		НастройкиИнтерфейса);
	НачальныеНастройки.Вставить("НастройкиТакси",			НастройкиТакси);
	НачальныеНастройки.Вставить("ЭтоВнешнийПользователь",	ЭтоВнешнийПользователь);

	Если НачальныеНастройки.НастройкиКлиента <> Неопределено Тогда
		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиКлиентскогоПриложения", "",
			НачальныеНастройки.НастройкиКлиента, , ИмяПользователя);
	КонецЕсли;

	Если НачальныеНастройки.НастройкиИнтерфейса <> Неопределено Тогда
		ХранилищеСистемныхНастроек.Сохранить("Общее/ПанельРазделов/НастройкиКомандногоИнтерфейса", "",
			НачальныеНастройки.НастройкиИнтерфейса, , ИмяПользователя);
	КонецЕсли;

	Если НачальныеНастройки.НастройкиТакси <> Неопределено Тогда
		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиИнтерфейсаКлиентскогоПриложения", "",
			НачальныеНастройки.НастройкиТакси, , ИмяПользователя);
	КонецЕсли;
КонецПроцедуры

Процедура сП_СкопироватьНастройки(МенеджерНастроек, ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить)
	ТаблицаНастроек = сП_СписокНастроек(ИмяПользователяИсточник, МенеджерНастроек);

	Для Каждого Настройка Из ТаблицаНастроек Цикл
		КлючОбъекта			= Настройка.КлючОбъекта;
		КлючНастроек		= Настройка.КлючНастроек;
		Значение			= МенеджерНастроек.Загрузить(КлючОбъекта, КлючНастроек, , ИмяПользователяИсточник);
		ОписаниеНастроек	= МенеджерНастроек.ПолучитьОписание(КлючОбъекта, КлючНастроек, ИмяПользователяИсточник);
		МенеджерНастроек.Сохранить(КлючОбъекта, КлючНастроек, Значение,
			ОписаниеНастроек, ИмяПользователяПриемник);
		Если Переносить Тогда
			МенеджерНастроек.Удалить(КлючОбъекта, КлючНастроек, ИмяПользователяИсточник);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция сП_СписокНастроек(ИмяПользователяИБ, МенеджерНастроек)
	ТаблицаНастроек = Новый ТаблицаЗначений;
	ТаблицаНастроек.Колонки.Добавить("КлючОбъекта");
	ТаблицаНастроек.Колонки.Добавить("КлючНастроек");

	Отбор = Новый Структура;
	Отбор.Вставить("Пользователь", ИмяПользователяИБ);

	ВыборкаНастроек = МенеджерНастроек.Выбрать(Отбор);
	Пропустить = Ложь;
	Пока сП_СледующаяНастройка(ВыборкаНастроек, Пропустить) Цикл
		Если Пропустить Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока					= ТаблицаНастроек.Добавить();
		НоваяСтрока.КлючОбъекта		= ВыборкаНастроек.КлючОбъекта;
		НоваяСтрока.КлючНастроек	= ВыборкаНастроек.КлючНастроек;
	КонецЦикла;

	Возврат ТаблицаНастроек;
КонецФункции

Функция сП_СледующаяНастройка(ВыборкаНастроек, Пропустить)
	Попытка
		Пропустить = Ложь;

		Возврат ВыборкаНастроек.Следующий();
	Исключение
		Пропустить = Истина;

		Возврат Истина;
	КонецПопытки;
КонецФункции

Процедура сП_СкопироватьПрочиеПользовательскиеНастройки(ИмяПользователяИсточник, ИмяПользователяПриемник)
	ПользовательИсточникСсылка		= П_НайтиПоИмени(ИмяПользователяИсточник);
	ПользовательПриемникСсылка		= П_НайтиПоИмени(ИмяПользователяПриемник);
	СведенияОПользователеИсточнике	= Новый Структура;
	СведенияОПользователеИсточнике.Вставить("ПользовательСсылка", ПользовательИсточникСсылка);
	СведенияОПользователеИсточнике.Вставить("ИмяПользователяИнформационнойБазы", ИмяПользователяИсточник);

	СведенияОПользователеПриемнике	= Новый Структура;
	СведенияОПользователеПриемнике.Вставить("ПользовательСсылка", ПользовательПриемникСсылка);
	СведенияОПользователеПриемнике.Вставить("ИмяПользователяИнформационнойБазы", ИмяПользователяПриемник);

	// Получение прочих настроек.
	ПрочиеНастройкиПользователей = Новый Структура;
	ИнтеграцияПодсистемСервер.ПриПолученииПрочихНастроек(СведенияОПользователеИсточнике, ПрочиеНастройкиПользователей);
	Ключи = Новый СписокЗначений;

	Если ПрочиеНастройкиПользователей.Количество() <> 0 Тогда
		Для Каждого ПрочаяНастройка Из ПрочиеНастройкиПользователей Цикл
			ПрочиеНастройкиСтруктура = Новый Структура;
			Если ПрочаяНастройка.Ключ = "НастройкаБыстрогоДоступа" Тогда
				СписокНастроек = ПрочаяНастройка.Значение.СписокНастроек;
				Для Каждого Элемент Из СписокНастроек Цикл
					Ключи.Добавить(Элемент.Объект, Элемент.Идентификатор);
				КонецЦикла;
				ПрочиеНастройкиСтруктура.Вставить("ИдентификаторНастройки", "НастройкаБыстрогоДоступа");
				ПрочиеНастройкиСтруктура.Вставить("ЗначениеНастройки", Ключи);
			Иначе
				ПрочиеНастройкиСтруктура.Вставить("ИдентификаторНастройки", ПрочаяНастройка.Ключ);
				ПрочиеНастройкиСтруктура.Вставить("ЗначениеНастройки", ПрочаяНастройка.Значение.СписокНастроек);
			КонецЕсли;
			ИнтеграцияПодсистемСервер.ПриСохраненииПрочихНастроек(СведенияОПользователеПриемнике, ПрочиеНастройкиСтруктура);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура сП_СкопироватьНастройкиПользователя(ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить = Ложь) Экспорт
	// Перенос пользовательских настроек отчетов.
	сП_СкопироватьНастройки(ХранилищеПользовательскихНастроекОтчетов, ИмяПользователяИсточник,	ИмяПользователяПриемник, Переносить);
	// Перенос настроек внешнего вида.
	сП_СкопироватьНастройки(ХранилищеСистемныхНастроек,ИмяПользователяИсточник,					ИмяПользователяПриемник, Переносить);
	// Перенос произвольных настроек пользователей.
	сП_СкопироватьНастройки(ХранилищеОбщихНастроек, ИмяПользователяИсточник,					ИмяПользователяПриемник, Переносить);
	// Перенос настроек данных форм.
	сП_СкопироватьНастройки(ХранилищеНастроекДанныхФорм, ИмяПользователяИсточник,				ИмяПользователяПриемник, Переносить);
	// Перенос настроек быстрого доступа дополнительных отчетов и обработок.
	Если Не Переносить Тогда
		сП_СкопироватьПрочиеПользовательскиеНастройки(ИмяПользователяИсточник,					ИмяПользователяПриемник);
	КонецЕсли;
КонецПроцедуры

Процедура сП_ЗаписатьПользователяИнформационнойБазы(ПользовательИБ, ЭтоВнешнийПользователь = Ложь) Экспорт
	сП_ПроверитьПраваПользователя(ПользовательИБ, "ПередЗаписью", ЭтоВнешнийПользователь);
	ОбновлениеВерсииИБСервер.сОИБ_УстановитьФлагОтображенияОписанийДляНовогоПользователя(ПользовательИБ.Имя);
	ПользовательИБ.Записать();
КонецПроцедуры

Процедура сП_ПриВыполненииСтандартныхПериодическихПроверокНаСервере(Параметры) Экспорт
	Параметры.Вставить("ВходВПрограммуЗапрещен", Ложь);

	// Проверка, что срок действия учетной записи истек и нужно завершить работу.

	УстановитьПривилегированныйРежим(Истина);

	сП_ОтключитьНеактивныхИПросроченныхПользователей(Истина);

	сП_ТребуетсяСменитьПароль(); // Обновление даты последней активности.

	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);

	Если ПользовательИБ = Неопределено Тогда
		Параметры.ВходВПрограммуЗапрещен = Истина;
	ИначеЕсли ПользовательИБ.АутентификацияСтандартная = Ложь
	        И ПользовательИБ.АутентификацияОС          = Ложь
	        И ПользовательИБ.АутентификацияOpenID      = Ложь Тогда

		Параметры.ВходВПрограммуЗапрещен = Истина;
	КонецЕсли;
КонецПроцедуры

Функция сП_ОшибкаНедостаточноПравДляВходаВПрограмму(РегистрироватьВЖурнале = Истина) Экспорт
	Если РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда // Не заменять на РолиДоступны.
		Возврат "";
	КонецЕсли;

	Если ПользователиСерверПовтИсп.сП_ЭтоСеансВнешнегоПользователя() Тогда
		ИмяРолиБазовыеПрава = Метаданные.Роли.БазовыеПраваВнешнихПользователей.Имя;
	Иначе
		ИмяРолиБазовыеПрава = Метаданные.Роли.БазовыеПрава.Имя;
	КонецЕсли;

	Если РольДоступна(ИмяРолиБазовыеПрава) Тогда // Не заменять на РолиДоступны.
		Возврат "";
	КонецЕсли;

	Возврат сП_КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(
		"Недостаточно прав для входа в программу.
		           |
		           |Обратитесь к администратору.",
		, РегистрироватьВЖурнале);
КонецФункции

Процедура сП_ОбновитьРолиВнешнихПользователей(Знач МассивВнешнихПользователей = Неопределено) Экспорт
	Если ПользователиСерверПовтИсп.сП_Настройки().РедактированиеРолей <> Истина Тогда
		// Роли устанавливаются другим механизмом, например, механизмом подсистемы УправлениеДоступом.
		Возврат;
	КонецЕсли;

	Если ТипЗнч(МассивВнешнихПользователей) = Тип("Массив")
	   И МассивВнешнихПользователей.Количество() = 0 Тогда

		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	НачатьТранзакцию();
	Попытка
		Если ТипЗнч(МассивВнешнихПользователей) <> Тип("Массив") Тогда
			Если МассивВнешнихПользователей = Неопределено Тогда
				ГруппаВнешнихПользователей = Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи;
			Иначе
				ГруппаВнешнихПользователей = МассивВнешнихПользователей;
			КонецЕсли;

			Запрос			= Новый Запрос;
			Запрос.УстановитьПараметр("ГруппаВнешнихПользователей", ГруппаВнешнихПользователей);
			Запрос.Текст	=
			"ВЫБРАТЬ
			|	СоставыГруппПользователей.Пользователь
			|ИЗ
			|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
			|ГДЕ
			|	СоставыГруппПользователей.ГруппаПользователей = &ГруппаВнешнихПользователей";

			МассивВнешнихПользователей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
		КонецЕсли;

		П_НайтиНеоднозначныхПользователейИБ(Неопределено);

		ИдентификаторыПользователейИБ = Новый Соответствие;

		Запрос			= Новый Запрос;
		Запрос.УстановитьПараметр("ВнешниеПользователи", МассивВнешнихПользователей);
		Запрос.Текст	=
		"ВЫБРАТЬ
		|	ВнешниеПользователи.Ссылка КАК ВнешнийПользователь,
		|	ВнешниеПользователи.ИдентификаторПользователяИБ
		|ИЗ
		|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
		|ГДЕ
		|	ВнешниеПользователи.Ссылка В(&ВнешниеПользователи)
		|	И (НЕ ВнешниеПользователи.УстановитьРолиНепосредственно)";

		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ИдентификаторыПользователейИБ.Вставить(Выборка.ВнешнийПользователь, Выборка.ИдентификаторПользователяИБ);
		КонецЦикла;

		// Подготовка таблицы старых ролей внешних пользователей.
		СтарыеРолиВнешнихПользователей = Новый ТаблицаЗначений;

		СтарыеРолиВнешнихПользователей.Колонки.Добавить("ВнешнийПользователь", Новый ОписаниеТипов("СправочникСсылка.ВнешниеПользователи"));

		СтарыеРолиВнешнихПользователей.Колонки.Добавить("Роль", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200)));

		ТекущийНомер = МассивВнешнихПользователей.Количество() - 1;
		Пока ТекущийНомер >= 0 Цикл
			// Проверка необходимости обработки пользователя.
			ПользовательИБ = Неопределено;
			ИдентификаторПользователяИБ = ИдентификаторыПользователейИБ[МассивВнешнихПользователей[ТекущийНомер]];
			Если ИдентификаторПользователяИБ <> Неопределено Тогда
				ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);
			КонецЕсли;

			Если ПользовательИБ = Неопределено
			 ИЛИ ПустаяСтрока(ПользовательИБ.Имя) Тогда

				МассивВнешнихПользователей.Удалить(ТекущийНомер);
			Иначе
				Для каждого Роль Из ПользовательИБ.Роли Цикл
					СтараяРольВнешнегоПользователя						= СтарыеРолиВнешнихПользователей.Добавить();
					СтараяРольВнешнегоПользователя.ВнешнийПользователь	= МассивВнешнихПользователей[ТекущийНомер];
					СтараяРольВнешнегоПользователя.Роль					= Роль.Имя;
				КонецЦикла;
			КонецЕсли;
			ТекущийНомер = ТекущийНомер - 1;
		КонецЦикла;

		// Подготовка списка ролей отсутствующих в метаданных и которые нужно переустановить.
		Запрос							= Новый Запрос;
		Запрос.МенеджерВременныхТаблиц	= Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ВнешниеПользователи",				МассивВнешнихПользователей);
		Запрос.УстановитьПараметр("ВсеРоли",							ПользователиСерверПовтИсп.сП_ВсеРоли().Таблица.Получить());
		Запрос.УстановитьПараметр("СтарыеРолиВнешнихПользователей",		СтарыеРолиВнешнихПользователей);
		Запрос.УстановитьПараметр("ИспользоватьВнешнихПользователей",	ПолучитьФункциональнуюОпцию("ИспользоватьВнешнихПользователей"));
		// АПК:96-выкл - №434 Использование ОБЪЕДИНИТЬ допустимо, так как
		// строки не должны повторятся и объем данных небольшой (от единиц до тысяч).
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СтарыеРолиВнешнихПользователей.ВнешнийПользователь,
		|	СтарыеРолиВнешнихПользователей.Роль
		|ПОМЕСТИТЬ СтарыеРолиВнешнихПользователей
		|ИЗ
		|	&СтарыеРолиВнешнихПользователей КАК СтарыеРолиВнешнихПользователей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеРоли.Имя
		|ПОМЕСТИТЬ ВсеРоли
		|ИЗ
		|	&ВсеРоли КАК ВсеРоли
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоставыГруппПользователей.ГруппаПользователей КАК ГруппаВнешнихПользователей,
		|	СоставыГруппПользователей.Пользователь КАК ВнешнийПользователь,
		|	Роли.Роль.Имя КАК Роль
		|ПОМЕСТИТЬ ВсеНовыеРолиВнешнихПользователей
		|ИЗ
		|	Справочник.ГруппыВнешнихПользователей.Роли КАК Роли
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|		ПО (СоставыГруппПользователей.Пользователь В (&ВнешниеПользователи))
		|			И (СоставыГруппПользователей.ГруппаПользователей = Роли.Ссылка)
		|			И (&ИспользоватьВнешнихПользователей = ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВсеНовыеРолиВнешнихПользователей.ВнешнийПользователь,
		|	ВсеНовыеРолиВнешнихПользователей.Роль
		|ПОМЕСТИТЬ НовыеРолиВнешнихПользователей
		|ИЗ
		|	ВсеНовыеРолиВнешнихПользователей КАК ВсеНовыеРолиВнешнихПользователей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтарыеРолиВнешнихПользователей.ВнешнийПользователь
		|ПОМЕСТИТЬ ИзмененныеВнешниеПользователи
		|ИЗ
		|	СтарыеРолиВнешнихПользователей КАК СтарыеРолиВнешнихПользователей
		|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеРолиВнешнихПользователей КАК НовыеРолиВнешнихПользователей
		|		ПО (НовыеРолиВнешнихПользователей.ВнешнийПользователь = СтарыеРолиВнешнихПользователей.ВнешнийПользователь)
		|			И (НовыеРолиВнешнихПользователей.Роль = СтарыеРолиВнешнихПользователей.Роль)
		|ГДЕ
		|	НовыеРолиВнешнихПользователей.Роль ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	НовыеРолиВнешнихПользователей.ВнешнийПользователь
		|ИЗ
		|	НовыеРолиВнешнихПользователей КАК НовыеРолиВнешнихПользователей
		|		ЛЕВОЕ СОЕДИНЕНИЕ СтарыеРолиВнешнихПользователей КАК СтарыеРолиВнешнихПользователей
		|		ПО НовыеРолиВнешнихПользователей.ВнешнийПользователь = СтарыеРолиВнешнихПользователей.ВнешнийПользователь
		|			И НовыеРолиВнешнихПользователей.Роль = СтарыеРолиВнешнихПользователей.Роль
		|ГДЕ
		|	СтарыеРолиВнешнихПользователей.Роль ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеНовыеРолиВнешнихПользователей.ГруппаВнешнихПользователей,
		|	ВсеНовыеРолиВнешнихПользователей.ВнешнийПользователь,
		|	ВсеНовыеРолиВнешнихПользователей.Роль
		|ИЗ
		|	ВсеНовыеРолиВнешнихПользователей КАК ВсеНовыеРолиВнешнихПользователей
		|ГДЕ
		|	НЕ ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА КАК ЗначениеИстина
		|				ИЗ
		|					ВсеРоли КАК ВсеРоли
		|				ГДЕ
		|					ВсеРоли.Имя = ВсеНовыеРолиВнешнихПользователей.Роль)";
		// АПК:96-вкл.

		// Регистрация ошибок имен ролей в профилях групп доступа.
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ВнешнийПользователь = Выборка.ВнешнийПользователь; // СправочникСсылка.ВнешниеПользователи

			ТекстСообщения = СтрШаблон(
				"При обновлении ролей внешнего пользователя
				          |""%1""
				          |роль ""%2""
				          |группы внешних пользователей ""%3""
				          |не найдена в метаданных.",
				СокрЛП(ВнешнийПользователь.Наименование),
				Выборка.Роль,
				Строка(Выборка.ГруппаВнешнихПользователей));

			ЗаписьЖурналаРегистрации(
				"Пользователи.Роль не найдена в метаданных",
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ТекстСообщения,
				РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		КонецЦикла;

		// Обновление ролей пользователей ИБ.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ИзмененныеВнешниеПользователиИРоли.ВнешнийПользователь,
		|	ИзмененныеВнешниеПользователиИРоли.Роль
		|ИЗ
		|	(ВЫБРАТЬ
		|		НовыеРолиВнешнихПользователей.ВнешнийПользователь КАК ВнешнийПользователь,
		|		НовыеРолиВнешнихПользователей.Роль КАК Роль
		|	ИЗ
		|		НовыеРолиВнешнихПользователей КАК НовыеРолиВнешнихПользователей
		|	ГДЕ
		|		НовыеРолиВнешнихПользователей.ВнешнийПользователь В
		|				(ВЫБРАТЬ
		|					ИзмененныеВнешниеПользователи.ВнешнийПользователь
		|				ИЗ
		|					ИзмененныеВнешниеПользователи КАК ИзмененныеВнешниеПользователи)
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ВнешниеПользователи.Ссылка,
		|		""""
		|	ИЗ
		|		Справочник.ВнешниеПользователи КАК ВнешниеПользователи
		|	ГДЕ
		|		ВнешниеПользователи.Ссылка В
		|				(ВЫБРАТЬ
		|					ИзмененныеВнешниеПользователи.ВнешнийПользователь
		|				ИЗ
		|					ИзмененныеВнешниеПользователи КАК ИзмененныеВнешниеПользователи)) КАК ИзмененныеВнешниеПользователиИРоли
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИзмененныеВнешниеПользователиИРоли.ВнешнийПользователь,
		|	ИзмененныеВнешниеПользователиИРоли.Роль";
		Выборка = Запрос.Выполнить().Выбрать();

		ПользовательИБ = Неопределено;
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Роль) Тогда
				ПользовательИБ.Роли.Добавить(Метаданные.Роли[Выборка.Роль]);
				Продолжить;
			КонецЕсли;
			Если ПользовательИБ <> Неопределено Тогда
				ПользовательИБ.Записать();
			КонецЕсли;

			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторыПользователейИБ[Выборка.ВнешнийПользователь]);

			ПользовательИБ.Роли.Очистить();
		КонецЦикла;
		Если ПользовательИБ <> Неопределено Тогда
			ПользовательИБ.Записать();
		КонецЕсли;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

Процедура сП_ПриДобавленииПараметровРаботыКлиента(Параметры) Экспорт
	Параметры.Вставить("ЭтоПолноправныйПользователь", П_ЭтоПолноправныйПользователь());
	Параметры.Вставить("ЭтоАдминистраторСистемы", П_ЭтоПолноправныйПользователь(, Истина));
КонецПроцедуры

Процедура сП_ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	Обработчики.Вставить("ТекущийПользователь",        "ПользователиСервер.сП_УстановкаПараметровСеанса");
	Обработчики.Вставить("ТекущийВнешнийПользователь", "ПользователиСервер.сП_УстановкаПараметровСеанса");
	Обработчики.Вставить("АвторизованныйПользователь", "ПользователиСервер.сП_УстановкаПараметровСеанса");
КонецПроцедуры

Процедура сП_УстановкаПараметровСеанса(Знач ИмяПараметра, УстановленныеПараметры) Экспорт
	Если ИмяПараметра <> "ТекущийПользователь"
	   И ИмяПараметра <> "ТекущийВнешнийПользователь"
	   И ИмяПараметра <> "АвторизованныйПользователь" Тогда

		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	Попытка
		Значения =сП_ЗначенияПараметровСеансаТекущийПользователь();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ВызватьИсключение СтрШаблон(
			"Не удалось установить параметр сеанса ТекущийПользователь по причине:
			           |""%1"".
			           |
			           |Обратитесь к администратору.",
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;

	Если ТипЗнч(Значения) = Тип("Строка") Тогда
		ВызватьИсключение Значения;
	КонецЕсли;

	ПараметрыСеанса.ТекущийПользователь        = Значения.ТекущийПользователь;
	ПараметрыСеанса.ТекущийВнешнийПользователь = Значения.ТекущийВнешнийПользователь;

	Если ЗначениеЗаполнено(Значения.ТекущийПользователь) Тогда
		ПараметрыСеанса.АвторизованныйПользователь = Значения.ТекущийПользователь;
	Иначе
		ПараметрыСеанса.АвторизованныйПользователь = Значения.ТекущийВнешнийПользователь;
	КонецЕсли;

	УстановленныеПараметры.Добавить("ТекущийПользователь");
	УстановленныеПараметры.Добавить("ТекущийВнешнийПользователь");
	УстановленныеПараметры.Добавить("АвторизованныйПользователь");
КонецПроцедуры

#КонецОбласти

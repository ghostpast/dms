///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ВариантыОтчетов

Процедура ПриНачалеРаботыСистемы(Параметры) Экспорт
	Если Не СистемаВзаимодействия.ИспользованиеДоступно() Тогда
		Возврат;
	КонецЕсли;

	Обработчик	= Новый ОписаниеОповещения("ВО_ОбработатьДействияСообщения", ВариантыОтчетовКлиент);
	СистемаВзаимодействия.ПодключитьОбработчикДействияСообщения(Обработчик);
КонецПроцедуры

Процедура ВО_ОткрытьФормуОтчета(Знач ФормаВладелец, Знач Вариант, Знач ДополнительныеПараметры = Неопределено) Экспорт
	Тип	= ТипЗнч(Вариант);
	Если Тип = Тип("Структура") Тогда
		ПараметрыОткрытия = Вариант;
	ИначеЕсли Тип = Тип("СправочникСсылка.ВариантыОтчетов")  Или Тип = Неопределено Тогда
		// зарезервировано для новых подсистем

		ПараметрыОткрытия = Новый Структура("Ключ", Вариант);
		Если ДополнительныеПараметры <> Неопределено Тогда
			БазоваяПодсистемаКлиентСервер.ОН_ДополнитьСтруктуру(ПараметрыОткрытия, ДополнительныеПараметры, Истина);
		КонецЕсли;
		ОткрытьФорму("Справочник.ВариантыОтчетов.ФормаОбъекта", ПараметрыОткрытия, Неопределено, Истина);

		Возврат;
	Иначе
		ПараметрыОткрытия = Новый Структура("Ссылка, Отчет, ТипОтчета, ПолноеИмяОтчета, ИмяОтчета, КлючВарианта, КлючЗамеров");
		Если ТипЗнч(ФормаВладелец) = Тип("ФормаКлиентскогоПриложения") Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, ФормаВладелец);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, Вариант);
	КонецЕсли;

	Если ДополнительныеПараметры <> Неопределено Тогда
		БазоваяПодсистемаКлиентСервер.ОН_ДополнитьСтруктуру(ПараметрыОткрытия, ДополнительныеПараметры, Истина);
	КонецЕсли;

	ВариантыОтчетовКлиентСервер.ВО_ДополнитьСтруктуруКлючом(ПараметрыОткрытия, "ВыполнятьЗамеры", Ложь);

	ПараметрыОткрытия.ТипОтчета = ВариантыОтчетовКлиентСервер.ВО_ТипОтчетаСтрокой(ПараметрыОткрытия.ТипОтчета, ПараметрыОткрытия.Отчет);
	Если Не ЗначениеЗаполнено(ПараметрыОткрытия.ТипОтчета) Тогда
		ВызватьИсключение СтрШаблон("Не определен тип отчета в %1", "ВариантыОтчетовКлиент.ОткрытьФормуОтчета");
	КонецЕсли;

	Если ПараметрыОткрытия.ТипОтчета = "Внутренний" Или ПараметрыОткрытия.ТипОтчета = "Расширение" Тогда
		Вид = "Отчет";
		КлючЗамеров = БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(ПараметрыОткрытия, "КлючЗамеров");
		Если ЗначениеЗаполнено(КлючЗамеров) Тогда
			ПараметрыКлиента = БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(БазоваяПодсистемаКлиентПовтИсп.СП_ПараметрыРаботыКлиентаПриЗапуске(),"ВариантыОтчетов");
			Если ПараметрыКлиента.ВыполнятьЗамеры Тогда
				ПараметрыОткрытия.ВыполнятьЗамеры = Истина;
				ПараметрыОткрытия.Вставить("ИмяОперации", КлючЗамеров + ".Открытие");
				ПараметрыОткрытия.Вставить("КомментарийОперации", ПараметрыКлиента.ПрефиксЗамеров);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ПараметрыОткрытия.ТипОтчета = "Дополнительный" Тогда
		Вид = "ВнешнийОтчет";
		Если Не ПараметрыОткрытия.Свойство("Подключен") Тогда
			ВариантыОтчетовВызовСервера.ВО_ПриПодключенииОтчета(ПараметрыОткрытия);
		КонецЕсли;
		Если Не ПараметрыОткрытия.Подключен Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(, "Вариант внешнего отчета можно открыть только из формы отчета.");
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ПараметрыОткрытия.ИмяОтчета) Тогда
		ВызватьИсключение СтрШаблон("Не определено имя отчета в %1", "ВариантыОтчетовКлиент.ОткрытьФормуОтчета");
	КонецЕсли;

	ПолноеИмяОтчета = БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(ПараметрыОткрытия, "ПолноеИмяОтчета");

	Если Не ЗначениеЗаполнено(ПолноеИмяОтчета) Тогда
		ПолноеИмяОтчета = Вид + "." + ПараметрыОткрытия.ИмяОтчета;
	КонецЕсли;

	КлючУникальности = ВариантыОтчетовКлиентСервер.О_КлючУникальности(ПолноеИмяОтчета, ПараметрыОткрытия.КлючВарианта);
	ПараметрыОткрытия.Вставить("КлючПараметровПечати",        КлючУникальности);
	ПараметрыОткрытия.Вставить("КлючСохраненияПоложенияОкна", КлючУникальности);

	Если ПараметрыОткрытия.ВыполнятьЗамеры Тогда
		// зарезервировано для новых подсистем
	КонецЕсли;

	ОткрытьФорму(ПолноеИмяОтчета + ".Форма", ПараметрыОткрытия, Неопределено, Истина);

	Если ПараметрыОткрытия.ВыполнятьЗамеры Тогда
		// зарезервировано для новых подсистем
	КонецЕсли;
КонецПроцедуры

Процедура ВО_ОбработатьДействияСообщения(Сообщение, Действие, ДополнительныеПараметры) Экспорт
	Если Действие = "ПрименитьПереданныеНастройки" Тогда
		Оповестить(Действие, Сообщение.Данные);
	КонецЕсли;
КонецПроцедуры

Процедура ВО_ПоказатьНастройкиОтчета(Вариант) Экспорт
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПоказатьКарточку", Истина);
	ПараметрыФормы.Вставить("Ключ", Вариант);
	ОткрытьФорму("Справочник.ВариантыОтчетов.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры

Процедура ВО_ОбновитьОткрытыеФормы(Параметр = Неопределено, Источник = Неопределено) Экспорт
	Оповестить("Запись_ВариантыОтчетов", Параметр, Источник);
КонецПроцедуры

Процедура ВО_ОткрытьФормуВыбранногоВариантаОтчета(Ответ, ВариантОтчета) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВО_ОткрытьФормуОтчета(Неопределено, ВариантОтчета);
	КонецЕсли;
КонецПроцедуры

Процедура ВО_ОбновитьВариантОтчетаИзФайла(ОписаниеФайла, СвойстваВариантаОтчетаОснования) Экспорт
	Если ОписаниеФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если СвойстваВариантаОтчетаОснования = Неопределено Тогда
		СвойстваВариантаОтчетаОснования = Новый Структура("Ссылка, ИмяОтчета, ПредставлениеВарианта");
	КонецЕсли;

	СвойстваВариантОтчета = ВариантыОтчетовВызовСервера.ВО_СвойстваВариантОтчетаИзФайла(ОписаниеФайла, СвойстваВариантаОтчетаОснования.Ссылка);

	Если СвойстваВариантаОтчетаОснования.ИмяОтчета = СвойстваВариантОтчета.ИмяОтчета Тогда
		ПараметрыОбновленияФормы = Новый Структура("КлючВарианта");
		ЗаполнитьЗначенияСвойств(ПараметрыОбновленияФормы, СвойстваВариантОтчета);

		ВО_ОбновитьОткрытыеФормы(ПараметрыОбновленияФормы);
		ПоказатьОповещениеПользователя("Вариант отчета обновлен из файла");
	ИначеЕсли СвойстваВариантаОтчетаОснования.ПредставлениеВарианта = СвойстваВариантОтчета.ПредставлениеВарианта Тогда
		ВО_ОткрытьФормуОтчета(Неопределено, СвойстваВариантОтчета.Ссылка);
		ПоказатьОповещениеПользователя("Вариант отчета найден и обновлен из файла");
	Иначе
		Обработчик = Новый ОписаниеОповещения("ВО_ОткрытьФормуВыбранногоВариантаОтчета", ВариантыОтчетовКлиент, СвойстваВариантОтчета.Ссылка);

		ШаблонТекстаВопроса = "Выбраны настройки варианта отчета ""%1"",
			|которые не совпадают с ""%2"".
			|Замена настроек выбранного варианта отчета невозможна.
			|
			|Создать новый вариант отчета (или обновить существующий при наличии)?";

		ТекстВопроса = СтрШаблон(ШаблонТекстаВопроса, СвойстваВариантОтчета.ПредставлениеВарианта, СвойстваВариантаОтчетаОснования.ПредставлениеВарианта);

		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);

	КонецЕсли;
КонецПроцедуры

Процедура ВО_ОткрытьДиалогРазмещенияВариантовВРазделах(Варианты, Владелец = Неопределено) Экспорт
	Если ТипЗнч(Варианты) <> Тип("Массив") Или Варианты.Количество() < 1 Тогда
		ПоказатьПредупреждение(, "Выберите варианты отчетов, которые необходимо разместить в разделах.");

		Возврат;
	КонецЕсли;

	ПараметрыОткрытия = Новый Структура("Варианты", Варианты);

	ОткрытьФорму("Справочник.ВариантыОтчетов.Форма.РазмещениеВРазделах", ПараметрыОткрытия, Владелец);
КонецПроцедуры

Процедура ВО_ДеревоПодсистемИспользованиеПриИзменении(Форма, Элемент) Экспорт
	СтрокаДерева = Форма.Элементы.ДеревоПодсистем.ТекущиеДанные;
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Пропуск корневой строки
	Если СтрокаДерева.Приоритет = "" Тогда
		СтрокаДерева.Использование = 0;

		Возврат;
	КонецЕсли;

	Если СтрокаДерева.Использование = 2 Тогда
		СтрокаДерева.Использование = 0;
	КонецЕсли;

	СтрокаДерева.Модифицированность = Истина;
КонецПроцедуры

Процедура ВО_ДеревоПодсистемВажностьПриИзменении(Форма, Элемент) Экспорт
	ДеревоПодсистем = Форма.Элементы.ДеревоПодсистем;

	СтрокаДерева = ДеревоПодсистем.ТекущиеДанные;
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Пропуск корневой строки
	Если СтрокаДерева.Приоритет = "" Тогда
		СтрокаДерева.Важность = "";

		Возврат;
	КонецЕсли;

	Если СтрокаДерева.Важность <> "" Тогда
		СтрокаДерева.Использование = 1;
	КонецЕсли;

	СтрокаДерева.Модифицированность = Истина;
КонецПроцедуры

Процедура ВО_ОформитьПользователейВариантаОтчета(Форма, СбрасыватьПризнакИспользования = Истина) Экспорт
	Элементы	= Форма.Элементы;
	Объект		= Форма.Объект;

	ПараметрыКлиента		= БазоваяПодсистемаКлиентПовтИсп.СП_ПараметрыРаботыКлиента();
	ЦветНеактивныхЗначений	= ПараметрыКлиента.ЭлементыСтиля.ТекстЗапрещеннойЯчейкиЦвет;

	Если Не СбрасыватьПризнакИспользования Тогда
		Элементы.ПользователиВарианта.ЦветТекста = ?(Объект.ТолькоДляАвтора, ЦветНеактивныхЗначений, Новый Цвет);

		Возврат;
	КонецЕсли;

	КоличествоПомеченных = 0;

	Для Каждого Строка Из Форма.ПользователиВарианта Цикл
		КоличествоПомеченных = КоличествоПомеченных + Булево(Строка.Пометка);
	КонецЦикла;

	Объект.ТолькоДляАвтора	= (КоличествоПомеченных = 0);
	Форма.Доступен			= ?(Объект.ТолькоДляАвтора, "ТолькоДляАвтора", "УказаннымПользователям");

	Элементы.ПользователиВарианта.ЦветТекста = ?(Форма.Объект.ТолькоДляАвтора, ЦветНеактивныхЗначений, Новый Цвет);
КонецПроцедуры

Процедура ВО_ПользователиВариантаОтчетаОбработкаВыбора(Форма, ВыбранныеЗначения, СтандартнаяОбработка) Экспорт
	Если ТипЗнч(ВыбранныеЗначения) <> Тип("Массив") Или ВыбранныеЗначения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

	ПользователиВарианта = Форма.ПользователиВарианта;

	ОбщаяГруппаПользователей		= ПредопределенноеЗначение("Справочник.ГруппыПользователей.ВсеПользователи");
	ОбщаяГруппаВнешниеПользователи	= ПредопределенноеЗначение("Справочник.ГруппыВнешнихПользователей.ВсеВнешниеПользователи");

	Если ТипЗнч(ВыбранныеЗначения[0]) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
		ВО_ПодготовитьСписокКДобавлениюВнешнихПользователейВариантаОтчета(ПользователиВарианта, ВыбранныеЗначения, ОбщаяГруппаВнешниеПользователи);
	Иначе
		ВО_ПодготовитьСписокКДобавлениюПользователейВариантаОтчета(ПользователиВарианта, ВыбранныеЗначения, ОбщаяГруппаПользователей);
	КонецЕсли;

	Для Каждого Значение Из ВыбранныеЗначения Цикл
		Если ПользователиВарианта.НайтиПоЗначению(Значение) = Неопределено Тогда
			ПользователиВарианта.Добавить(Значение,, Истина, ВО_КартинкаПользователяВариантаОтчета(Значение));
		КонецЕсли;
	КонецЦикла;

	Если ПользователиВарианта.НайтиПоЗначению(ОбщаяГруппаПользователей) <> Неопределено И ПользователиВарианта.НайтиПоЗначению(ОбщаяГруппаВнешниеПользователи) <> Неопределено Тогда
		ПользователиВарианта.Очистить();
		ПользователиВарианта.Добавить(,, Истина, ВО_КартинкаПользователяВариантаОтчета());
	КонецЕсли;

	ВО_ОформитьПользователейВариантаОтчета(Форма);
КонецПроцедуры

Процедура ВО_ПодготовитьСписокКДобавлениюВнешнихПользователейВариантаОтчета(ПользователиВарианта, ВыбранныеЗначения, ОбщаяГруппаПользователей)
	Если ПользователиВарианта.НайтиПоЗначению(ОбщаяГруппаПользователей) <> Неопределено Или ПользователиВарианта.НайтиПоЗначению(Неопределено) <> Неопределено Тогда
		ВыбранныеЗначения.Очистить();

		Возврат;
	КонецЕсли;

	Если ВыбранныеЗначения.Найти(ОбщаяГруппаПользователей) = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТипыПользователей = Новый ОписаниеТипов("СправочникСсылка.ГруппыВнешнихПользователей");
	ВО_УдалитьПользователейВариантаОтчетаУказанныхТипов(ПользователиВарианта, ТипыПользователей);

	ВыбранныеЗначения.Очистить();
	ВыбранныеЗначения.Добавить(ОбщаяГруппаПользователей);
КонецПроцедуры

Процедура ВО_ПодготовитьСписокКДобавлениюПользователейВариантаОтчета(ПользователиВарианта, ВыбранныеЗначения, ОбщаяГруппаПользователей)
	Если ПользователиВарианта.НайтиПоЗначению(Неопределено) <> Неопределено Тогда
		ПользователиВарианта.Очистить();
	Иначе
		ТипыПользователей = Новый ОписаниеТипов("СправочникСсылка.ГруппыПользователей, СправочникСсылка.Пользователи");
		ВО_УдалитьПользователейВариантаОтчетаУказанныхТипов(ПользователиВарианта, ТипыПользователей);
	КонецЕсли;

	Если ВыбранныеЗначения.Найти(ОбщаяГруппаПользователей) = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ВыбранныеЗначения.Очистить();
	ВыбранныеЗначения.Добавить(ОбщаяГруппаПользователей);
КонецПроцедуры

Функция ВО_КартинкаПользователяВариантаОтчета(Пользователь = Неопределено)
	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
		Возврат БиблиотекаКартинок.СостояниеПользователя02;
	ИначеЕсли ТипЗнч(Пользователь) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
		Возврат БиблиотекаКартинок.СостояниеПользователя10;
	КонецЕсли;

	Возврат БиблиотекаКартинок.СостояниеПользователя04;
КонецФункции

Процедура ВО_УдалитьПользователейВариантаОтчетаУказанныхТипов(ПользователиВарианта, ТипыПользователей)
	ИндексЭлемента = ПользователиВарианта.Количество() - 1;

	Пока ИндексЭлемента >= 0 Цикл
		ЭлементСписка = ПользователиВарианта[ИндексЭлемента];

		Если ТипыПользователей.СодержитТип(ТипЗнч(ЭлементСписка.Значение)) Тогда
			ПользователиВарианта.Удалить(ЭлементСписка);
		КонецЕсли;

		ИндексЭлемента = ИндексЭлемента - 1;
	КонецЦикла;
КонецПроцедуры

Процедура ВО_ПодобратьПользователейВариантаОтчета(Форма, ПодборГруппПользователей = Ложь, ПодборГруппВнешнихПользователей = Ложь) Экспорт
	ПараметрыПодбора = ВО_ПараметрыПодбораПользователейВариантаОтчета(Форма, ПодборГруппПользователей, ПодборГруппВнешнихПользователей);

	Если ПодборГруппВнешнихПользователей Тогда
		ИмяФормыПодбора = "Справочник.ГруппыВнешнихПользователей.ФормаВыбора";
	Иначе
		ИмяФормыПодбора = "Справочник.Пользователи.ФормаВыбора";
	КонецЕсли;

	ОткрытьФорму(ИмяФормыПодбора, ПараметрыПодбора, Форма.Элементы.ПользователиВарианта);
КонецПроцедуры

Функция ВО_ПараметрыПодбораПользователейВариантаОтчета(Форма, ПодборГруппПользователей, ПодборГруппВнешнихПользователей = Ложь)
	ТекущиеДанные			= Форма.Элементы.ПользователиВарианта.ТекущиеДанные;
	ВыбранныеПользователи	= ВО_ВыбранныеПользователиВарианта(Форма.ПользователиВарианта, ПодборГруппВнешнихПользователей);

	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("РежимВыбора",				Истина);
	ПараметрыПодбора.Вставить("ТекущаяСтрока",				?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Значение));
	ПараметрыПодбора.Вставить("ЗакрыватьПриВыборе",			Ложь);
	ПараметрыПодбора.Вставить("МножественныйВыбор",			Истина);
	ПараметрыПодбора.Вставить("РасширенныйПодбор",			Истина);
	ПараметрыПодбора.Вставить("ЗаголовокФормыПодбора",		"Подбор пользователей варианта отчета");
	ПараметрыПодбора.Вставить("ВыборГруппПользователей",	ПодборГруппПользователей);
	ПараметрыПодбора.Вставить("ВыбранныеПользователи",		ВыбранныеПользователи);

	Возврат ПараметрыПодбора;
КонецФункции

Функция ВО_ВыбранныеПользователиВарианта(ПользователиВарианта, ПодборГруппВнешнихПользователей)
	ТипыВыбранныхПользователей = Новый ОписаниеТипов("СправочникСсылка.ГруппыПользователей, СправочникСсылка.Пользователи");

	Если ПодборГруппВнешнихПользователей Тогда
		ТипыВыбранныхПользователей = Новый ОписаниеТипов("СправочникСсылка.ГруппыВнешнихПользователей");
	КонецЕсли;

	ВыбранныеПользователи = Новый Массив;

	Для Каждого ЭлементСписка Из ПользователиВарианта Цикл
		Если ЭлементСписка.Пометка И ТипыВыбранныхПользователей.СодержитТип(ТипЗнч(ЭлементСписка.Значение)) Тогда
			ВыбранныеПользователи.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;

	Если ВыбранныеПользователи.Количество() = 1 И ВыбранныеПользователи[0] = Неопределено Тогда
		Если ПодборГруппВнешнихПользователей Тогда
			ВыбранныеПользователи[0] = ПредопределенноеЗначение("Справочник.ГруппыВнешнихПользователей.ВсеВнешниеПользователи");
		Иначе
			ВыбранныеПользователи[0] = ПредопределенноеЗначение("Справочник.ГруппыПользователей.ВсеПользователи");
		КонецЕсли;
	КонецЕсли;

	Возврат ВыбранныеПользователи;
КонецФункции

Процедура ВО_ПроверитьПользователейВариантаОтчета(Форма) Экспорт
	Объект = Форма.Объект;

	Если Не Объект.ТолькоДляАвтора Тогда
		Возврат;
	КонецЕсли;

	ПараметрыКлиента = БазоваяПодсистемаКлиентПовтИсп.СП_ПараметрыРаботыКлиентаПриЗапуске();

	ПользователиВарианта = Форма.ПользователиВарианта;
	ПользователиВарианта.Очистить();
	ПользователиВарианта.Добавить(ПараметрыКлиента.АвторизованныйПользователь, "[ЭтоТекущийПользователь]",, ВО_КартинкаПользователяВариантаОтчета(ПараметрыКлиента.АвторизованныйПользователь));
КонецПроцедуры

Процедура ВО_ПоделитьсяПользовательскимиНастройками(ОписаниеНастроек) Экспорт
	Если ОписаниеНастроек.Настройки.Элементы.Количество() = 0 Тогда
		БазоваяПодсистемаКлиентСервер.сОН_СообщитьПользователю("Настройки (пользовательские) не установлены.", Неопределено, "", "", Ложь);

		Возврат;
	КонецЕсли;

	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("РежимВыбора",							Истина);
	ПараметрыПодбора.Вставить("ЗакрыватьПриВыборе",						Ложь);
	ПараметрыПодбора.Вставить("МножественныйВыбор",						Истина);
	ПараметрыПодбора.Вставить("РасширенныйПодбор",						Истина);
	ПараметрыПодбора.Вставить("СкрытьПользователейБезПользователяИБ",	Истина);
	ПараметрыПодбора.Вставить("ВыбранныеПользователи",					Новый Массив);
	ПараметрыПодбора.Вставить("ЗаголовокФормыПодбора",					"Поделиться настройками отчета с пользователями");
	ПараметрыПодбора.Вставить("ЗаголовокКнопкиЗавершенияПодбора",		"Поделиться");

	Обработчик = Новый ОписаниеОповещения("ВО_ПоделитьсяПользовательскимиНастройкамиПослеВыбораПользователей", ВариантыОтчетовКлиент, ОписаниеНастроек);

	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыПодбора,,,,, Обработчик);
КонецПроцедуры

Процедура ВО_ПоделитьсяПользовательскимиНастройкамиПослеВыбораПользователей(ВыбранныеПользователи, ОписаниеНастроек) Экспорт
	Если ВыбранныеПользователи = Неопределено Или ВыбранныеПользователи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ВариантыОтчетовВызовСервера.ВО_ПоделитьсяПользовательскимиНастройками(ВыбранныеПользователи, ОписаниеНастроек);

	Предупреждение = БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(ОписаниеНастроек, "Предупреждение");

	Если ЗначениеЗаполнено(Предупреждение) Тогда
		ПоказатьПредупреждение(, Предупреждение);

		Возврат;
	КонецЕсли;

	Пояснение = БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(ОписаниеНастроек, "Пояснение", "");
	ПоказатьОповещениеПользователя("Настройки переданы",, Пояснение);
КонецПроцедуры

Процедура сВО_ПоказатьКонтекстнуюНастройкуОтчета(Форма, Элемент, Область, СтандартнаяОбработка) Экспорт
	Если ТипЗнч(Область) <> Тип("ОбластьЯчеекТабличногоДокумента") Или Область.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Или Область.Расшифровка <> Неопределено И ТипЗнч(Область.Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;

	НастройкиОтчета		= Форма.НастройкиОтчета; // см. ВариантыОтчетов.НастройкиФормыОтчета
	СвойстваРезультата	= НастройкиОтчета.СвойстваРезультата; // см. ВариантыОтчетовСлужебный.СвойстваРезультатаОтчета

	Заголовки			= СвойстваРезультата.Заголовки;

	Область				= Элемент.ТекущаяОбласть; // ОбластьЯчеекТабличногоДокумента
	СвойстваЗаголовка	= Заголовки[Область.Имя]; //

	Если ТипЗнч(СвойстваЗаголовка) <> Тип("Структура") Или ТипЗнч(СвойстваЗаголовка.Поле) <> Тип("ПолеКомпоновкиДанных") Или СвойстваЗаголовка.ТипЗначения.Типы().Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	КомпоновщикНастроек = сВО_КомпоновщикНастроекОтчета(Форма);

	КэшЗначенийОтборов = БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства, "КэшЗначенийОтборов", Новый Соответствие);

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкиОтчета",		НастройкиОтчета);
	ПараметрыФормы.Вставить("КомпоновщикНастроек",	КомпоновщикНастроек);
	ПараметрыФормы.Вставить("ДанныеРасшифровки",	Форма.ОтчетДанныеРасшифровки);
	ПараметрыФормы.Вставить("Документ",				Форма.ОтчетТабличныйДокумент);
	ПараметрыФормы.Вставить("Заголовки",			Заголовки);
	ПараметрыФормы.Вставить("СвойстваЗаголовка",	СвойстваЗаголовка);
	ПараметрыФормы.Вставить("КэшЗначенийОтборов",	КэшЗначенийОтборов);

	ОткрытьФорму("ХранилищеНастроек.ХранилищеВариантовОтчетов.Форма.КонтекстнаяНастройкаОтчета", ПараметрыФормы, Форма, Форма.УникальныйИдентификатор);

	СтандартнаяОбработка = Ложь
КонецПроцедуры

Процедура сВО_ОбработкаРасшифровки(Форма, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	НастройкиОтчета		= Форма.НастройкиОтчета; // см. ВариантыОтчетов.НастройкиФормыОтчета
	СвойстваРезультата	= НастройкиОтчета.СвойстваРезультата; // см. ВариантыОтчетовСлужебный.СвойстваРезультатаОтчета
	ТекущаяОбласть		= Элемент.ТекущаяОбласть; // ОбластьЯчеекТабличногоДокумента

	Заголовки = СвойстваРезультата.Заголовки[ТекущаяОбласть.Имя];

	Если ТипЗнч(Заголовки) = Тип("Структура") Тогда
		СтандартнаяОбработка										= Ложь;
		Форма.Элементы.КонтекстноеМенюОбластиЗаголовка.Видимость	= Истина;

		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура сВО_ОбработкаДополнительнойРасшифровки(Форма, Данные, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

	ОсновноеМеню		= Новый Массив;

	СвойстваОбласти		= сВО_СвойстваОбластиРасшифровки(Форма, Элемент.ТекущаяОбласть, Данные.Поле);

	Если СвойстваОбласти.ЭтоЗаголовок Тогда
		СвойстваЗаголовка = СвойстваОбласти.СвойстваЗаголовка;

		Если ТипЗнч(СвойстваЗаголовка.Поле) <> Тип("ПолеКомпоновкиДанных") Или СвойстваЗаголовка.ТипЗначения.Типы().Количество() = 0 Тогда
			Возврат;
		КонецЕсли;

		ДополнительноеМеню = сВО_КонтекстноеМенюОбластиЗаголовка();
	Иначе
		ОсновноеМеню.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать);
		ДополнительноеМеню = сВО_КонтекстноеМенюОбластиДанных(СвойстваОбласти.СвойстваЗаголовка, Данные.ДоступныеВидыСравнения);
	КонецЕсли;

	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(Форма.ОтчетДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(Форма.НастройкиОтчета.АдресСхемы));

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма",					Форма);
	ДополнительныеПараметры.Вставить("Данные",					Данные);
	ДополнительныеПараметры.Вставить("Расшифровка",				Расшифровка);
	ДополнительныеПараметры.Вставить("ОбработкаРасшифровки",	ОбработкаРасшифровки);
	ДополнительныеПараметры.Вставить("СвойстваОбласти",			СвойстваОбласти);
	ДополнительныеПараметры.Вставить("Меню",					ДополнительноеМеню);

	Обработчик = Новый ОписаниеОповещения("сВО_ВыполнитьРасшифровку", ЭтотОбъект, ДополнительныеПараметры);
	ОбработкаРасшифровки.ПоказатьВыборДействия(Обработчик, Расшифровка, ОсновноеМеню, ДополнительноеМеню);
КонецПроцедуры

Процедура сВО_СпроситьОУведомленииПользователей(ОписаниеОповещения, КоличествоПользователей) Экспорт
	ПредставлениеКоличестваПользователей = СтрокаСЧислом("; %1 пользователя; ; %1 пользователей; %1 пользователей; %1 пользователей", КоличествоПользователей, ВидЧисловогоЗначения.Количественное, "L=ru");

	ТекстВопроса = СтрШаблон("Уведомить в чате %1 о том, что этот вариант будет отображен на их панели отчетов?", ПредставлениеКоличестваПользователей);

	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
КонецПроцедуры

Процедура сВО_Сортировать(Форма, Команда, СвойстваЗаголовка = Неопределено) Экспорт
	Если СвойстваЗаголовка = Неопределено Тогда
		СвойстваЗаголовка = сВО_СвойстваЗаголовкаОтчета(Форма);
	КонецЕсли;

	Если Не сВО_ТипСортировкиРазделаДоступен(Команда, СвойстваЗаголовка) Тогда
		Возврат;
	КонецЕсли;

	Настройки = сВО_ИспользуемыеНастройки(Форма, СвойстваЗаголовка.ИдентификаторНастроек);

	сВО_СброситьСортировку(Настройки, СвойстваЗаголовка);

	Если СвойстваЗаголовка.КоличествоРазделов = 1 Тогда
		ЭлементыСортировки = Настройки.Порядок.Элементы;
	Иначе
		Раздел		= Настройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторРаздела);
		Группировка	= Настройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторГруппировки);

		Если ТипЗнч(Раздел) = Тип("ТаблицаКомпоновкиДанных") И Раздел.Строки.Количество() = 1 Тогда
			ОсновнаяГруппировка	= Раздел.Строки[0];
			ПолеГруппировки		= ВариантыОтчетовКлиентСервер.сВО_ПолеОтчета(ОсновнаяГруппировка.ПоляГруппировки, СвойстваЗаголовка.Поле);

			Если СвойстваЗаголовка.Ресурс Или ПолеГруппировки <> Неопределено Тогда
				Группировка = ОсновнаяГруппировка;
			КонецЕсли;
		КонецЕсли;

		ЭлементыСортировки = Группировка.Порядок.Элементы;
	КонецЕсли;

	ЭлементСортировки = сВО_ЭлементСортировкиРаздела(ЭлементыСортировки, СвойстваЗаголовка.Поле);

	Если ЭлементСортировки = Неопределено Тогда
		Индекс					= сВО_ИндексЭлементСортировкиРаздела(ЭлементыСортировки, СвойстваЗаголовка.Поле);
		ЭлементСортировки		= ЭлементыСортировки.Вставить(Индекс, Тип("ЭлементПорядкаКомпоновкиДанных"));
		ЭлементСортировки.Поле	= СвойстваЗаголовка.Поле;
	КонецЕсли;

	ЭлементСортировки.ТипУпорядочивания	= сВО_ТипСортировкиРаздела(Команда);
	ЭлементСортировки.Использование		= Истина;

	сВО_ОповеститьОЗавершенииКонтекстнойНастройки(Форма, сВО_ДействиеКоманды(Команда));
КонецПроцедуры

Функция сВО_ЗаголовкиОтчета(Форма)
	Если СтрЗаканчиваетсяНа(Форма.ИмяФормы, "Форма") Или СтрЗаканчиваетсяНа(Форма.ИмяФормы, "ФормаОтчета") Или СтрЗаканчиваетсяНа(Форма.ИмяФормы, "КонтекстнаяНастройкаОтчета") Тогда
		НастройкиОтчета		= Форма.НастройкиОтчета;
		СвойстваРезультата	= НастройкиОтчета.СвойстваРезультата;

		Возврат СвойстваРезультата.Заголовки;
	КонецЕсли;

	Возврат Форма.ЗаголовкиОтчета;
КонецФункции

Функция сВО_СвойстваЗаголовкаОтчета(Форма)
	Если СтрЗаканчиваетсяНа(Форма.ИмяФормы, "Форма") Или СтрЗаканчиваетсяНа(Форма.ИмяФормы, "ФормаОтчета") Тогда
		Заголовки	= сВО_ЗаголовкиОтчета(Форма);
		Поле		= Форма.ТекущийЭлемент; // ПолеФормы, РасширениеПоляФормыДляПоляТабличногоДокумента
		Область		= Поле.ТекущаяОбласть; // ОбластьЯчеекТабличногоДокумента

		Возврат Заголовки[Область.Имя];
	КонецЕсли;

	Возврат Форма.СвойстваЗаголовка;
КонецФункции

Процедура сВО_Фильтровать(Форма, ВидСравнения, СвойстваЗаголовка, ДанныеРасшифровки)
	Если ТипЗнч(ВидСравнения) = Тип("Строка") Тогда
		сВО_ПоказатьРасширеннуюНастройкуФильтра(Форма, СвойстваЗаголовка);

		Возврат;
	КонецЕсли;

	ЭтоГруппировка = (ДанныеРасшифровки.Тип = "Группировка");

	Настройки = сВО_ИспользуемыеНастройки(Форма, СвойстваЗаголовка.ИдентификаторНастроек);

	Фильтры	= ВариантыОтчетовКлиентСервер.сВО_ФильтрыРазделаОтчета(Настройки, СвойстваЗаголовка, ЭтоГруппировка);
	Фильтр	= ВариантыОтчетовКлиентСервер.сВО_ФильтрРазделаОтчета(Фильтры, СвойстваЗаголовка.Поле);

	Если Фильтр = Неопределено Тогда
		Фильтр					= Фильтры.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Фильтр.ЛевоеЗначение	= СвойстваЗаголовка.Поле;
	КонецЕсли;

	Фильтр.ВидСравнения		= ВидСравнения;
	Фильтр.ПравоеЗначение	= ДанныеРасшифровки.Значение;
	Фильтр.Использование	= Истина;

	сВО_ОповеститьОЗавершенииКонтекстнойНастройки(Форма, "Фильтровать");
КонецПроцедуры

Функция сВО_ТипСортировкиРазделаДоступен(Команда, СвойстваЗаголовка)
	ТекстПредупреждения		= "";
	ШаблонПредупреждения	= "Поле ""%1"" уже отсортировано по %2";

	Если СтрЗаканчиваетсяНа(сВО_ДействиеКоманды(Команда), "ПоВозрастанию") И Не СвойстваЗаголовка.СортироватьПоВозрастанию Тогда
		ТекстПредупреждения = СтрШаблон(ШаблонПредупреждения, СвойстваЗаголовка.Текст, "возрастанию");
	ИначеЕсли СтрЗаканчиваетсяНа(сВО_ДействиеКоманды(Команда), "ПоУбыванию") И Не СвойстваЗаголовка.СортироватьПоУбыванию Тогда
		ТекстПредупреждения = СтрШаблон(ШаблонПредупреждения, СвойстваЗаголовка.Текст, "убыванию");
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);

		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
КонецФункции

Функция сВО_ТипСортировкиРаздела(Команда)
	Если СтрЗаканчиваетсяНа(сВО_ДействиеКоманды(Команда), "ПоВозрастанию") Тогда
		Возврат НаправлениеСортировкиКомпоновкиДанных.Возр;
	КонецЕсли;

	Возврат НаправлениеСортировкиКомпоновкиДанных.Убыв;
КонецФункции

Функция сВО_КомпоновщикНастроекОтчета(Форма)
	Если СтрЗаканчиваетсяНа(Форма.ИмяФормы, "КонтекстнаяНастройкаОтчета") Или СтрЗаканчиваетсяНа(Форма.ИмяФормы, "КонтекстнаяНастройкаОтчета") Тогда
		Возврат Форма.КомпоновщикНастроек;
	КонецЕсли;

	НастройкиОтчета		= Форма.НастройкиОтчета;
	СвойстваРезультата	= НастройкиОтчета.СвойстваРезультата;

	Возврат СвойстваРезультата.КомпоновщикНастроек;
КонецФункции

Функция сВО_ИспользуемыеНастройки(Форма, ИдентификаторНастроек = Неопределено)
	КомпоновщикНастроек		= сВО_КомпоновщикНастроекОтчета(Форма);
	ИспользуемыеНастройки	= КомпоновщикНастроек.Настройки;

	Если ТипЗнч(ИдентификаторНастроек) <> Тип("ИдентификаторКомпоновкиДанных") Тогда
		Возврат ИспользуемыеНастройки;
	КонецЕсли;

	НастройкиПоИдентификатору = ИспользуемыеНастройки.ПолучитьОбъектПоИдентификатору(ИдентификаторНастроек);

	Если НастройкиПоИдентификатору = Неопределено Тогда
		Возврат ИспользуемыеНастройки;
	КонецЕсли;

	Возврат НастройкиПоИдентификатору;
КонецФункции

Функция сВО_ЭлементСортировкиРаздела(ЭлементыСортировки, Поле)
	ЭлементСортировки = Неопределено;

	Для Каждого Элемент Из ЭлементыСортировки Цикл
		Если ТипЗнч(Элемент) <> Тип("АвтоЭлементПорядкаКомпоновкиДанных") И Элемент.Поле = Поле Тогда
			ЭлементСортировки = Элемент;

			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат ЭлементСортировки;
КонецФункции

Функция сВО_ИндексЭлементСортировкиРаздела(ЭлементыСортировки, Поле)
	Для Каждого Элемент Из ЭлементыСортировки Цикл
		Если ТипЗнч(Элемент) = Тип("АвтоЭлементПорядкаКомпоновкиДанных") Тогда
			Возврат ЭлементыСортировки.Индекс(Элемент);
		КонецЕсли;
	КонецЦикла;

	Возврат ЭлементыСортировки.Количество();
КонецФункции

Функция сВО_ДействиеКоманды(Команда)
	Если Команда = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат ?(ЗначениеЗаполнено(Команда.Действие), Команда.Действие, Команда.Имя);
КонецФункции

Процедура сВО_ОповеститьОЗавершенииКонтекстнойНастройки(Форма, Действие)
	ЭтоФормОтчета = СтрЗаканчиваетсяНа(Форма.ИмяФормы, "Форма") Или СтрЗаканчиваетсяНа(Форма.ИмяФормы, "ФормаОтчета");

	ИспользуемыеНастройки	= сВО_ИспользуемыеНастройки(Форма);
	КомпоновщикНастроек		= сВО_КомпоновщикНастроекОтчета(Форма);
	КомпоновщикНастроек.ЗагрузитьНастройки(ИспользуемыеНастройки);

	ИдентификаторВладельца = ?(ЭтоФормОтчета, Форма.УникальныйИдентификатор, Форма.ВладелецФормы.УникальныйИдентификатор);

	Результат = сВО_СтандартныйРезультатНастройкиИзКонтекстногоМеню(КомпоновщикНастроек, Действие, ИдентификаторВладельца);

	Если ЭтоФормОтчета Тогда
		Оповестить(Действие, Результат, ЭтотОбъект);
	Иначе
		Форма.ОповеститьОВыборе(Результат);
	КонецЕсли;
КонецПроцедуры

Функция сВО_СтандартныйРезультатНастройкиИзКонтекстногоМеню(КомпоновщикНастроек, Действие, ИдентификаторВладельца) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("КомпоновщикНастроекКД",						КомпоновщикНастроек);
	Результат.Вставить("Действие",									Действие);
	Результат.Вставить("ИдентификаторВладельца",					ИдентификаторВладельца);
	Результат.Вставить("Переформировать",							СтрЗаканчиваетсяНа(Действие, "Сформировать"));
	Результат.Вставить("УчитыватьВремяФормирования",				Истина);
	Результат.Вставить("ВариантМодифицирован",						Истина);
	Результат.Вставить("ПользовательскиеНастройкиМодифицированы",	Истина);
	Результат.Вставить("СброситьПользовательскиеНастройки",			Истина);

	Возврат Результат;
КонецФункции

Процедура сВО_ВыбратьПолеОтчетаИзМеню(Форма, Команда, ИмяКоллекции = "ВыбранныеПоля") Экспорт
	Если Не сВО_ДействиеДоступно(Форма, Команда) Тогда
		Возврат;
	КонецЕсли;

	Обработчик	= сВО_ОбработчикВыбораПоляОтчета(Форма, сВО_ДействиеКоманды(Команда));
	сВО_УточнитьИмяКоллекции(ИмяКоллекции, Обработчик);

	ПоляОтчета = сВО_ПоляОтчета(Форма, Команда, ИмяКоллекции);

	Если ПоляОтчета = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ПоляОтчета.Количество() > 20 Или ПоляОтчета.Количество() = 1 И ПоляОтчета.НайтиПоЗначению("Еще") <> Неопределено Тогда
		сВО_ВыбратьПолеОтчета(Форма, сВО_ДействиеКоманды(Команда), ИмяКоллекции, Обработчик);

		Возврат;
	КонецЕсли;

	Форма.ПоказатьВыборИзМеню(Обработчик, ПоляОтчета, Форма.ТекущийЭлемент);
КонецПроцедуры

Процедура сВО_ПереместитьПолеГоризонтально(Форма, Команда) Экспорт
	Если Не сВО_ДействиеДоступно(Форма, Команда) Тогда
		Возврат;
	КонецЕсли;

	СвойстваЗаголовка = сВО_СвойстваЗаголовкаОтчета(Форма);

	КомпоновщикНастроек	= сВО_КомпоновщикНастроекОтчета(Форма);
	Настройки			= сВО_ИспользуемыеНастройки(Форма, СвойстваЗаголовка.ИдентификаторНастроек);
	Раздел				= Настройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторРаздела);
	Группировка			= Настройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторГруппировки);

	сВО_ОбновитьПоляРаздела(КомпоновщикНастроек, Настройки, Раздел);

	Поля		= Группировка.Выбор;
	ТекущееПоле	= ВариантыОтчетовКлиентСервер.сВО_ПолеОтчета(Поля, СвойстваЗаголовка.Поле);

	ИсходныйИндексПоля = Поля.Элементы.Индекс(ТекущееПоле);

	Если сВО_ДействиеКоманды(Команда) = "ПереместитьПолеВлево" Тогда
		НаправлениеСдвига = -1
	ИначеЕсли сВО_ДействиеКоманды(Команда) = "ПереместитьПолеВправо" Тогда
		НаправлениеСдвига = 1
	КонецЕсли;

	КонечныйИндексПоля = ИсходныйИндексПоля + НаправлениеСдвига;

	Если КонечныйИндексПоля >= 0 Тогда
		СоседнееПоле = Поля.Элементы[КонечныйИндексПоля];

		Пока КонечныйИндексПоля > 0 И Не СоседнееПоле.Использование Цикл
			КонечныйИндексПоля	= КонечныйИндексПоля + НаправлениеСдвига;
			СоседнееПоле		= Поля.Элементы[КонечныйИндексПоля];
		КонецЦикла;
	КонецЕсли;

	Поля.Элементы.Сдвинуть(ТекущееПоле, КонечныйИндексПоля - ИсходныйИндексПоля);

	сВО_ОповеститьОЗавершенииКонтекстнойНастройки(Форма, сВО_ДействиеКоманды(Команда));
КонецПроцедуры

Процедура сВО_ПереместитьПолеВертикально(Форма, Команда) Экспорт
	Если Не сВО_ДействиеДоступно(Форма, Команда) Тогда
		Возврат;
	КонецЕсли;

	СвойстваЗаголовка = сВО_СвойстваЗаголовкаОтчета(Форма);

	КомпоновщикНастроек	= сВО_КомпоновщикНастроекОтчета(Форма);
	Настройки			= сВО_ИспользуемыеНастройки(Форма, СвойстваЗаголовка.ИдентификаторНастроек);
	Раздел = Настройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторРаздела);
	Группировка = Настройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторГруппировки);

	Если сВО_ДоступноОбновлениеПолейРаздела(Группировка, Команда) Тогда
		сВО_ОбновитьПоляРаздела(КомпоновщикНастроек, Настройки, Раздел);
	КонецЕсли;

	ПолеГруппировки	= ВариантыОтчетовКлиентСервер.сВО_ПолеОтчета(Группировка.ПоляГруппировки, СвойстваЗаголовка.Поле);
	ВыбранноеПоле	= ВариантыОтчетовКлиентСервер.сВО_ПолеОтчета(Группировка.Выбор, СвойстваЗаголовка.Поле);

	СоседняяГруппировка = сВО_СоседняяГруппировка(Форма, Команда, Настройки, СвойстваЗаголовка.ПорядокГруппировки);

	Если СоседняяГруппировка = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИсходныйИндексПоля	= Группировка.Выбор.Элементы.Индекс(ВыбранноеПоле);

	Поля				= СоседняяГруппировка.ПоляГруппировки;
	КоличествоПолей		= Поля.Элементы.Количество();

	Если КоличествоПолей > 0 Тогда
		ИндексПоля	= ?(ИсходныйИндексПоля < КоличествоПолей, ИсходныйИндексПоля, КоличествоПолей);
		НовоеПоле	= Поля.Элементы.Вставить(ИндексПоля, Тип("ПолеГруппировкиКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(НовоеПоле, ?(ПолеГруппировки = Неопределено, ВыбранноеПоле, ПолеГруппировки));
	КонецЕсли;

	Поля		= СоседняяГруппировка.Выбор;
	ИндексПоля	= сВО_ИндексВыбранногоПоля(ИсходныйИндексПоля, Поля, СвойстваЗаголовка.Поле);
	НовоеПоле	= Поля.Элементы.Вставить(ИндексПоля, Тип("ВыбранноеПолеКомпоновкиДанных"));

	ЗаполнитьЗначенияСвойств(НовоеПоле, ?(ВыбранноеПоле = Неопределено, ПолеГруппировки, ВыбранноеПоле));

	сВО_УстановитьВыводРеквизитовГруппировкиОтдельно(СоседняяГруппировка);

	Если ПолеГруппировки <> Неопределено Тогда
		Группировка.ПоляГруппировки.Элементы.Удалить(ПолеГруппировки);
	КонецЕсли;

	Если ВыбранноеПоле <> Неопределено Тогда
		Если Группировка.ПоляГруппировки.Элементы.Количество() = 0 Тогда
			ВыбранноеПоле.Использование = Ложь;
			сВО_СкрытьГруппировку(Настройки, Группировка, СвойстваЗаголовка.Поле);
		Иначе
			Группировка.Выбор.Элементы.Удалить(ВыбранноеПоле);
		КонецЕсли;
	КонецЕсли;

	сВО_ОповеститьОЗавершенииКонтекстнойНастройки(Форма, сВО_ДействиеКоманды(Команда));
КонецПроцедуры

Процедура сВО_ОбновитьПоляРаздела(КомпоновщикНастроек, Настройки, Раздел)
	ГруппировкиРаздела = Новый Массив;

	Если ТипЗнч(Раздел) = Тип("ТаблицаКомпоновкиДанных") Тогда
		ГруппировкиРаздела.Добавить(Раздел.Строки);
		ГруппировкиРаздела.Добавить(Раздел.Колонки);
	Иначе
		сВО_ОбновитьПоляГруппировки(КомпоновщикНастроек, Настройки, Раздел);
		ГруппировкиРаздела.Добавить(Раздел.Структура);
	КонецЕсли;

	Для Каждого Группировки Из ГруппировкиРаздела Цикл
		Для Каждого Группировка Из Группировки Цикл
			сВО_ОбновитьПоляГруппировки(КомпоновщикНастроек, Настройки, Группировка);
			сВО_ОбновитьПоляРаздела(КомпоновщикНастроек, Настройки, Группировка);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура сВО_ОбновитьПоляГруппировки(КомпоновщикНастроек, Настройки, Группировка)
	Если ТипЗнч(Группировка) <> Тип("ГруппировкаКомпоновкиДанных") И ТипЗнч(Группировка) <> Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
		сВО_ОбновитьПоляРаздела(КомпоновщикНастроек, Настройки, Группировка);
	КонецЕсли;

	ДобавляемыеПоля			= сВО_СтандартныеДобавляемыеПоля();
	ИспользуемыеНастройки	= сВО_ИспользуемыеНастройкиГруппировки(Настройки, Группировка);

	сВО_НайтиПоляГруппировки(ИспользуемыеНастройки, Группировка, ДобавляемыеПоля);
	сВО_НайтиВыбранныеПоляГруппировки(КомпоновщикНастроек, ИспользуемыеНастройки, Группировка, Группировка.Выбор, ДобавляемыеПоля);

	Поля = Группировка.Выбор.Элементы;
	Поля.Очистить();

	сВО_СоздатьИерархиюПолейГруппировки(Поля, ДобавляемыеПоля.ИндексГрупп);

	Для Каждого СвойстваПоля Из ДобавляемыеПоля.Свойства Цикл
		СвойстваТекущегоПоля	= СвойстваПоля; // см. СвойстваПоля
		Родитель				= СвойстваТекущегоПоля.Родитель; // см. СвойстваПоля

		Если Родитель = Неопределено Тогда
			Если СвойстваТекущегоПоля.Индекс < Поля.Количество() Тогда
				ПолеОтчета = Поля.Вставить(СвойстваТекущегоПоля.Индекс, Тип("ВыбранноеПолеКомпоновкиДанных"));
			Иначе
				ПолеОтчета = Поля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			КонецЕсли;
		Иначе
			ГруппаПолейОтчета = ДобавляемыеПоля.ИндексГрупп[Родитель.Идентификатор]; // ГруппаВыбранныхПолейКомпоновкиДанных

			Если СвойстваТекущегоПоля.Индекс < ГруппаПолейОтчета.Элементы.Количество() Тогда
				ПолеОтчета = ГруппаПолейОтчета.Элементы.Вставить(СвойстваТекущегоПоля.Индекс, Тип("ВыбранноеПолеКомпоновкиДанных"));
			Иначе
				ПолеОтчета = ГруппаПолейОтчета.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			КонецЕсли;
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(ПолеОтчета, СвойстваТекущегоПоля);
	КонецЦикла;

	ПолеОтчета					= Поля.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ПолеОтчета.Использование	= Ложь;
КонецПроцедуры

Функция сВО_ОбработчикВыбораПоляОтчета(Форма, Действие)
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Форма",				Форма);
	ПараметрыОбработчика.Вставить("Действие",			Действие);
	ПараметрыОбработчика.Вставить("СвойстваЗаголовка",	сВО_СвойстваЗаголовкаОтчета(Форма));

	Возврат Новый ОписаниеОповещения("ПослеВыбораПоля", Форма, ПараметрыОбработчика);
КонецФункции

Процедура сВО_УточнитьИмяКоллекции(ИмяКоллекции, Обработчик)
	ДополнительныеПараметры	= Обработчик.ДополнительныеПараметры;
	СвойстваЗаголовка		= ДополнительныеПараметры.СвойстваЗаголовка;

	Если СвойстваЗаголовка = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если СвойстваЗаголовка.ТипПоля = Тип("ПолеГруппировкиКомпоновкиДанных") Тогда
		ИмяКоллекции = "ПоляГруппировки";
	КонецЕсли;

	ДополнительныеПараметры.Вставить("ИмяКоллекции", ИмяКоллекции);
КонецПроцедуры

Функция сВО_ПоляОтчета(Форма, Команда, ИмяКоллекции)
	ДоступныеПоля	= сВО_ДоступныеПоляОтчета(сВО_КомпоновщикНастроекОтчета(Форма), ИмяКоллекции);
	ПоляОтчета		= сВО_ОсновныеПоляОтчета(Форма.НастройкиОтчета.СвойстваРезультата, ДоступныеПоля);

	Если ПоляОтчета.Количество() = 0 Тогда
		сВО_ДобавитьДоступныеПоляОтчета(ПоляОтчета, ДоступныеПоля);
	КонецЕсли;

	сВО_ИсключитьИспользуемыеПоляОтчета(ПоляОтчета, Форма, Команда);
	сВО_ИсключитьНедоступныеПоляОтчета(ПоляОтчета, Форма, Команда);

	СвойстваЗаголовка = сВО_СвойстваЗаголовкаОтчета(Форма);

	Если СвойстваЗаголовка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если Не СвойстваЗаголовка.Ресурс И ПоляОтчета.НайтиПоЗначению("Еще") = Неопределено Тогда
		ПоляОтчета.Добавить("Еще", "Еще...");
	КонецЕсли;

	Возврат ПоляОтчета;
КонецФункции

Процедура сВО_ВыбратьПолеОтчета(Форма, Действие, ИмяКоллекции, Обработчик = Неопределено, Поле = Неопределено, ИдентификаторУзлаНастроек = Неопределено)
	Если Обработчик = Неопределено Тогда
		Обработчик = сВО_ОбработчикВыбораПоляОтчета(Форма, Действие);
	КонецЕсли;

	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("НастройкиОтчета",							Форма.НастройкиОтчета);
	ПараметрыВыбора.Вставить("КомпоновщикНастроек",						сВО_КомпоновщикНастроекОтчета(Форма));
	ПараметрыВыбора.Вставить("Режим",									ИмяКоллекции);
	ПараметрыВыбора.Вставить("ПолеКД",									Поле);
	ПараметрыВыбора.Вставить("ИдентификаторЭлементаСтруктурыНастроек",	сВО_ИдентификаторЭлементаСтруктурыНастроек(Форма, ИдентификаторУзлаНастроек));

	ОткрытьФорму("ХранилищеНастроек.ХранилищеВариантовОтчетов.Форма.ВыборПоляОтчета", ПараметрыВыбора, Форма, Форма.УникальныйИдентификатор,,, Обработчик);
КонецПроцедуры

Функция сВО_ДоступныеПоляОтчета(КомпоновщикНастроек, ИмяКоллекции = "Выбор")
	Если ИмяКоллекции = "Отборы" Тогда
		Возврат КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора;
	ИначеЕсли ИмяКоллекции = "Сортировка" Тогда
		Возврат КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка;
	ИначеЕсли ИмяКоллекции = "ПоляГруппировки" Тогда
		Возврат КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок;
	КонецЕсли;

	Возврат КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора;
КонецФункции

Функция сВО_ОсновныеПоляОтчета(СвойстваРезультата, ДоступныеПоля)
	ОсновныеПоляИзДоступных = Новый СписокЗначений;

	ОсновныеПоля = СвойстваРезультата.ОсновныеПоля;

	Для Каждого Поле Из ОсновныеПоля Цикл
		ДоступноеПоле = ДоступныеПоля.НайтиПоле(Новый ПолеКомпоновкиДанных(Поле));

		Если ДоступноеПоле <> Неопределено И ОсновныеПоляИзДоступных.НайтиПоЗначению(ДоступноеПоле) = Неопределено Тогда
			ОсновныеПоляИзДоступных.Добавить(ДоступноеПоле, ДоступноеПоле.Заголовок,, сВО_КартинкаПоля(ДоступноеПоле.ТипЗначения));
		КонецЕсли;
	КонецЦикла;

	Возврат ОсновныеПоляИзДоступных;
КонецФункции

Процедура сВО_ДобавитьДоступныеПоляОтчета(ПоляОтчета, ДоступныеПоля)
	Для Каждого ДоступноеПоле Из ДоступныеПоля.Элементы Цикл
		Если Не ДоступноеПоле.Папка Тогда
			ПоляОтчета.Добавить(ДоступноеПоле, ДоступноеПоле.Заголовок,, сВО_КартинкаПоля(ДоступноеПоле.ТипЗначения));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура сВО_ИсключитьИспользуемыеПоляОтчета(ОсновныеПоля, Форма, Команда)
	Владелец = Форма.ТекущийЭлемент;

	Если ТипЗнч(Владелец) <> Тип("КнопкаФормы") И (ТипЗнч(Владелец) <> Тип("ПолеФормы") Или Владелец.Вид <> ВидПоляФормы.ПолеТабличногоДокумента) Тогда
		Возврат;
	КонецЕсли;

	Если сВО_ДействиеКоманды(Команда) <> "ВставитьПолеСлева" И сВО_ДействиеКоманды(Команда) <> "ВставитьПолеСправа" Тогда
		Возврат;
	КонецЕсли;

	СвойстваЗаголовка	= сВО_СвойстваЗаголовкаОтчета(Форма);
	ИспользуемыеПоля	= сВО_ИспользуемыеПоляОтчета(СвойстваЗаголовка, Форма.НастройкиОтчета.СвойстваРезультата.ИндексПолей);

	Индекс = ОсновныеПоля.Количество() - 1;
	Пока Индекс >= 0 Цикл
		ДоступноеПоле = ОсновныеПоля[Индекс].Значение;

		Если ИспользуемыеПоля[ДоступноеПоле.Поле] <> Неопределено Тогда
			ОсновныеПоля.Удалить(Индекс);
		КонецЕсли;

		Индекс = Индекс - 1;
	КонецЦикла;
КонецПроцедуры

Функция сВО_ИспользуемыеПоляОтчета(СвойстваЗаголовка, ИндексПолей)
	ИндексПолейРаздела		= ИндексПолей[СвойстваЗаголовка.ПорядокРаздела];
	ИндексПолейГруппировки	= ИндексПолейРаздела[СвойстваЗаголовка.ПорядокГруппировки];

	Возврат ИндексПолейГруппировки;
КонецФункции

Функция сВО_КартинкаПоля(ТипЗначенияПоля)
	ДоступныеТипы = ТипЗначенияПоля.Типы();

	Если ДоступныеТипы.Количество() = 0 Тогда
		Возврат БиблиотекаКартинок.Пустая;
	КонецЕсли;

	Если ДоступныеТипы.Количество() > 1 Тогда
		Возврат БиблиотекаКартинок.ТипСоставной;
	КонецЕсли;

	Если ТипЗначенияПоля.СодержитТип(Тип("Число")) Тогда
		Возврат БиблиотекаКартинок.ТипЧисло;
	КонецЕсли;

	Если ТипЗначенияПоля.СодержитТип(Тип("Строка")) Тогда
		Возврат БиблиотекаКартинок.ТипСтрока;
	КонецЕсли;

	Если ТипЗначенияПоля.СодержитТип(Тип("Дата")) Тогда
		Возврат БиблиотекаКартинок.ТипДата;
	КонецЕсли;

	Если ТипЗначенияПоля.СодержитТип(Тип("Булево")) Тогда
		Возврат БиблиотекаКартинок.ТипБулево;
	КонецЕсли;

	Если ТипЗначенияПоля.СодержитТип(Тип("УникальныйИдентификатор")) Тогда
		Возврат БиблиотекаКартинок.ТипИдентификатор;
	КонецЕсли;

	Возврат БиблиотекаКартинок.ТипСсылка;
КонецФункции

Процедура сВО_ИсключитьНедоступныеПоляОтчета(ОсновныеПоля, Форма, Команда)
	Владелец = Форма.ТекущийЭлемент;

	Если ТипЗнч(Владелец) <> Тип("КнопкаФормы") И (ТипЗнч(Владелец) <> Тип("ПолеФормы") Или Владелец.Вид <> ВидПоляФормы.ПолеТабличногоДокумента) Тогда
		Возврат;
	КонецЕсли;

	Если сВО_ДействиеКоманды(Команда) <> "ВставитьПолеСлева" И сВО_ДействиеКоманды(Команда) <> "ВставитьПолеСправа" Тогда
		Возврат;
	КонецЕсли;

	СвойстваЗаголовка	= сВО_СвойстваЗаголовкаОтчета(Форма);
	РолиПолей			= Форма.НастройкиОтчета.СвойстваРезультата.РолиПолей;

	Индекс = ОсновныеПоля.Количество() - 1;

	Пока Индекс >= 0 Цикл
		ДоступноеПоле = ОсновныеПоля[Индекс].Значение;

		Если СвойстваЗаголовка.Ресурс И Не ДоступноеПоле.Ресурс Тогда
			ОсновныеПоля.Удалить(Индекс);
		ИначеЕсли СвойстваЗаголовка.Период И РолиПолей.Периоды[ДоступноеПоле.Поле] = Неопределено Тогда
			ОсновныеПоля.Удалить(Индекс);
		ИначеЕсли Не СвойстваЗаголовка.Период И РолиПолей.Периоды[ДоступноеПоле.Поле] <> Неопределено Тогда
			ОсновныеПоля.Удалить(Индекс);
		ИначеЕсли СвойстваЗаголовка.ИспользуетсяВПоляхГруппировки И СвойстваЗаголовка.ПереместитьПолеВправо И сВО_ДействиеКоманды(Команда) = "ВставитьПолеСправа" И ДоступноеПоле.Ресурс Тогда
			ОсновныеПоля.Удалить(Индекс);
		ИначеЕсли СвойстваЗаголовка.ИспользуетсяВПоляхГруппировки И сВО_ДействиеКоманды(Команда) = "ВставитьПолеСлева" И ДоступноеПоле.Ресурс Тогда
			ОсновныеПоля.Удалить(Индекс);
		КонецЕсли;

		Индекс = Индекс - 1;
	КонецЦикла;
КонецПроцедуры

Функция сВО_ИдентификаторЭлементаСтруктурыНастроек(Форма, ИдентификаторУзлаНастроек)
	Если ИдентификаторУзлаНастроек <> Неопределено Тогда
		Возврат ИдентификаторУзлаНастроек;
	КонецЕсли;

	Если СтрЗаканчиваетсяНа(Форма.ИмяФормы, "Форма") Или СтрЗаканчиваетсяНа(Форма.ИмяФормы, "ФормаОтчета") Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат Форма.ИдентификаторЭлементаСтруктурыНастроек;
КонецФункции

Функция сВО_ДоступноОбновлениеПолейРаздела(Группировка, Команда)
	КоличествоПолейГруппировки = Группировка.ПоляГруппировки.Элементы.Количество();

	ВыбранныеПоля				= Группировка.Выбор.Элементы;
	КоличествоВыбранныхПолей	= ВыбранныеПоля.Количество();

	ЭтоАвтоПоле = КоличествоВыбранныхПолей = 1 И ТипЗнч(ВыбранныеПоля[0]) = Тип("АвтоВыбранноеПолеКомпоновкиДанных");

	Возврат сВО_ДействиеКоманды(Команда) <> "ПереместитьПолеВыше" Или КоличествоПолейГруппировки = 1 Или КоличествоВыбранныхПолей > 0 И Не ЭтоАвтоПоле;
КонецФункции

Функция сВО_СоседняяГруппировка(Форма, Команда, Настройки, ПорядокГруппировки)
	СоседняяГруппировка = Неопределено;

	Если сВО_ДействиеКоманды(Команда) = "ПереместитьПолеВыше" Тогда
		ПорядокСоседнейГруппировки = ПорядокГруппировки - 1;
	Иначе
		ПорядокСоседнейГруппировки = ПорядокГруппировки + 1;
	КонецЕсли;

	Заголовки = сВО_ЗаголовкиОтчета(Форма);

	Для Каждого Свойства Из Заголовки Цикл
		Если Свойства.Значение.ПорядокГруппировки = ПорядокСоседнейГруппировки Тогда
			СоседняяГруппировка = Настройки.ПолучитьОбъектПоИдентификатору(Свойства.Значение.ИдентификаторГруппировки);

			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат СоседняяГруппировка;
КонецФункции

Функция сВО_ИндексВыбранногоПоля(ИсходныйИндексПоля, КонечнаяКоллекцияПолей, Поле)
	Граница = КонечнаяКоллекцияПолей.Элементы.Количество();

	НовоеПоле = ВариантыОтчетовКлиентСервер.сВО_ПолеОтчета(КонечнаяКоллекцияПолей, Поле);

	Если НовоеПоле <> Неопределено Тогда
		КонечнаяКоллекцияПолей.Элементы.Удалить(НовоеПоле);
	КонецЕсли;

	Для Каждого Элемент Из КонечнаяКоллекцияПолей.Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Или ТипЗнч(Элемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;

		ДоступноеПоле = КонечнаяКоллекцияПолей.ДоступныеПоляВыбора.НайтиПоле(Элемент.Поле);

		Если ДоступноеПоле <> Неопределено И ДоступноеПоле.Ресурс Тогда
			Граница = КонечнаяКоллекцияПолей.Элементы.Индекс(Элемент);

			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат ?(ИсходныйИндексПоля < Граница, ИсходныйИндексПоля, Граница);
КонецФункции

Функция сВО_СвойстваОбластиРасшифровки(Форма, Область, ИмяПоля)
	НастройкиОтчета		= Форма.НастройкиОтчета;
	СвойстваРезультата	= НастройкиОтчета.СвойстваРезультата;
	СвойстваЗаголовка	= СвойстваРезультата.Заголовки[Область.Имя];

	СвойстваОбласти = Новый Структура;
	СвойстваОбласти.Вставить("ЭтоЗаголовок",		ТипЗнч(СвойстваЗаголовка) = Тип("Структура"));
	СвойстваОбласти.Вставить("СвойстваЗаголовка",	СвойстваЗаголовка);

	Если СвойстваОбласти.ЭтоЗаголовок Тогда
		Возврат СвойстваОбласти;
	КонецЕсли;

	ПорядокРаздела			= 0;
	ГраницаТекущегоРаздела	= 0;

	Для Каждого Граница Из СвойстваРезультата.ГраницыРазделов Цикл
		ПорядокРаздела = ПорядокРаздела + 1;

		Если Область.Верх >= ГраницаТекущегоРаздела И Область.Верх < Граница.Значение Тогда
			Прервать;
		КонецЕсли;

		ГраницаТекущегоРаздела = Граница.Значение;
	КонецЦикла;

	Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);

	Для Каждого Элемент Из СвойстваРезультата.Заголовки Цикл
		СвойстваЗаголовка = Элемент.Значение;

		Если СвойстваЗаголовка.ПорядокРаздела = ПорядокРаздела И СвойстваЗаголовка.Поле = Поле Тогда
			СвойстваОбласти.СвойстваЗаголовка = СвойстваЗаголовка;

			Возврат СвойстваОбласти;
		КонецЕсли;
	КонецЦикла;

	Возврат СвойстваОбласти;
КонецФункции

Функция сВО_КонтекстноеМенюОбластиЗаголовка()
	КонтекстноеМеню = Новый СписокЗначений;
	КонтекстноеМеню.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение, "Открыть");

	// Фильтровать
	КонтекстноеМеню.Добавить("СнятьФильтр", "Снять фильтр");
	КонтекстноеМеню.Добавить("Фильтровать", "Фильтровать...",, БиблиотекаКартинок.ОтборКомпоновкиДанных);

	// Сортировать
	КонтекстноеМеню.Добавить(НаправлениеСортировкиКомпоновкиДанных.Возр, "Сортировать по возрастанию",,	БиблиотекаКартинок.СортироватьСтрокиПоВозрастанию);
	КонтекстноеМеню.Добавить(НаправлениеСортировкиКомпоновкиДанных.Убыв, "Сортировать по убыванию",,	БиблиотекаКартинок.СортироватьСтрокиПоУбыванию);

	// Оформить
	ПодменюОформления = Новый СписокЗначений;
	ПодменюОформления.Добавить("УстановитьВысотуСтроки",	"Высота строки...",,	БиблиотекаКартинок.ВысотаСтроки);
	ПодменюОформления.Добавить("УстановитьШиринуКолонки",	"Ширина колонки...",,	БиблиотекаКартинок.ШиринаКолонки);

	КонтекстноеМеню.Добавить(ПодменюОформления, "Оформить",, БиблиотекаКартинок.УсловноеОформлениеКомпоновкиДанных);

	Возврат КонтекстноеМеню;
КонецФункции

Функция сВО_КонтекстноеМенюОбластиДанных(СвойстваЗаголовка, ДоступныеВидыСравнения)
	КонтекстноеМеню = Новый СписокЗначений;
	КонтекстноеМеню.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение, "Открыть");

	Если ТипЗнч(СвойстваЗаголовка) <> Тип("Структура") Тогда
		Возврат КонтекстноеМеню;
	КонецЕсли;

	Информация = Новый СистемнаяИнформация;

	Если БазоваяПодсистемаКлиентСервер.ОН_СравнитьВерсии(Информация.ВерсияПриложения, "8.3.16.0") >= 0 Тогда
		КартинкиОформления = Новый Структура;
		КартинкиОформления.Вставить("ОформитьКрасным",	БиблиотекаКартинок["ОформлениеКругКрасный"]);
		КартинкиОформления.Вставить("ОформитьЖелтым",	БиблиотекаКартинок["ОформлениеКругЖелтый"]);
		КартинкиОформления.Вставить("ОформитьЗеленым",	БиблиотекаКартинок["ОформлениеКругЗеленый"]);
	Иначе
		ПустаяКартинка = БиблиотекаКартинок["Пустая"];

		КартинкиОформления = Новый Структура;
		КартинкиОформления.Вставить("ОформитьКрасным",	ПустаяКартинка);
		КартинкиОформления.Вставить("ОформитьЖелтым",	ПустаяКартинка);
		КартинкиОформления.Вставить("ОформитьЗеленым",	ПустаяКартинка);
	КонецЕсли;

	// Фильтровать
	сВО_УточнитьДоступныеВидыСравнения(ДоступныеВидыСравнения);
	КонтекстноеМеню.Добавить(ДоступныеВидыСравнения, "Фильтровать",, БиблиотекаКартинок.ОтборКомпоновкиДанных);

	// Сортировать
	КонтекстноеМеню.Добавить(НаправлениеСортировкиКомпоновкиДанных.Возр, "Сортировать по возрастанию",,	БиблиотекаКартинок.СортироватьСтрокиПоВозрастанию);
	КонтекстноеМеню.Добавить(НаправлениеСортировкиКомпоновкиДанных.Убыв, "Сортировать по убыванию",,	БиблиотекаКартинок.СортироватьСтрокиПоУбыванию);

	// Оформить
	ПодменюОформления = Новый СписокЗначений;
	ПодменюОформления.Добавить("ОформитьКрасным",			"Красным",,				КартинкиОформления.ОформитьКрасным);
	ПодменюОформления.Добавить("ОформитьЖелтым",			"Желтым",,				КартинкиОформления.ОформитьЖелтым);
	ПодменюОформления.Добавить("ОформитьЗеленым",			"Зеленым",,				КартинкиОформления.ОформитьЗеленым);
	ПодменюОформления.Добавить("ОформитьОтрицательные",		"Отрицательные красным");
	ПодменюОформления.Добавить("ОформитьПоложительные",		"Положительные зеленым");
	ПодменюОформления.Добавить("УстановитьВысотуСтроки",	"Высота строки...",,	БиблиотекаКартинок.ВысотаСтроки);
	ПодменюОформления.Добавить("УстановитьШиринуКолонки",	"Ширина колонки...",,	БиблиотекаКартинок.ШиринаКолонки);
	ПодменюОформления.Добавить("ОформитьЕще",				"Еще...");

	КонтекстноеМеню.Добавить(ПодменюОформления, "Оформить",, БиблиотекаКартинок.УсловноеОформлениеКомпоновкиДанных);

	Возврат КонтекстноеМеню;
КонецФункции

Процедура сВО_УточнитьДоступныеВидыСравнения(ДоступныеВидыСравнения)
	НедоступныеВидыСравнения = Новый Массив;
	НедоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.ВСписке);
	НедоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.НеВСписке);
	НедоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);
	НедоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии);

	Для Каждого Вид Из НедоступныеВидыСравнения Цикл
		НайденныйВид = ДоступныеВидыСравнения.НайтиПоЗначению(Вид);

		Если НайденныйВид <> Неопределено Тогда
			ДоступныеВидыСравнения.Удалить(НайденныйВид);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура сВО_УстановитьВыводРеквизитовГруппировкиОтдельно(Группировка)
	Если ТипЗнч(Группировка) <> Тип("ГруппировкаКомпоновкиДанных") И Не ТипЗнч(Группировка) <> Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;

	ВыводРеквизитов = Группировка.ПараметрыВывода.Элементы.Найти("РасположениеРеквизитов");

	Если Не ВыводРеквизитов.Использование Тогда
		ВыводРеквизитов.Значение		= РасположениеРеквизитовКомпоновкиДанных.Отдельно;
		ВыводРеквизитов.Использование	= Истина;
	КонецЕсли;
КонецПроцедуры

Процедура сВО_СкрытьГруппировку(Настройки, Группировка, Поле)
	Поля = Группировка.ПоляГруппировки;

	КоличествоИспользуемыхПолей = 0;

	Для Каждого Элемент Из Поля.Элементы Цикл
		Если Элемент.Использование Тогда
			КоличествоИспользуемыхПолей = КоличествоИспользуемыхПолей + 1;
		КонецЕсли;
	КонецЦикла;

	Если КоличествоИспользуемыхПолей > 0 Тогда
		Возврат;
	КонецЕсли;

	Группировка.Использование	= Ложь;
	РодительскаяГруппировка		= Группировка.Родитель;

	Если ТипЗнч(РодительскаяГруппировка) = Тип("ТаблицаКомпоновкиДанных") Тогда
		ИдентификаторГруппировки = Настройки.ПолучитьИдентификаторПоОбъекту(Группировка);

		Если СтрНайти(ИдентификаторГруппировки, "/row/") > 0 Тогда
			Группировки = РодительскаяГруппировка.Строки;
		Иначе
			Группировки = РодительскаяГруппировка.Колонки;
		КонецЕсли;
	Иначе
		Группировки = РодительскаяГруппировка.Структура;
	КонецЕсли;

	ИндексГруппировки = Группировки.Индекс(Группировка);

	Для Каждого ДочерняяГруппировка Из Группировка.Структура Цикл
		Если Не ДочерняяГруппировка.Использование Тогда
			Продолжить;
		КонецЕсли;

		ПоискЭлементов = Новый Соответствие;
		ВариантыОтчетовКлиентСервер.О_СкопироватьРекурсивно(Настройки, ДочерняяГруппировка, Группировки, ИндексГруппировки, ПоискЭлементов);

		ДочерняяГруппировка.Использование = Ложь;
	КонецЦикла;
КонецПроцедуры

Функция сВО_СтандартныеДобавляемыеПоля()
	ДобавляемыеПоля = Новый Структура;
	ДобавляемыеПоля.Вставить("Свойства",	Новый Массив);
	ДобавляемыеПоля.Вставить("ИндексПолей",	Новый Соответствие);
	ДобавляемыеПоля.Вставить("ИндексГрупп",	Новый Соответствие);

	Возврат ДобавляемыеПоля;
КонецФункции

Функция сВО_ИспользуемыеНастройкиГруппировки(Настройки, Группировка)
	Если ТипЗнч(Группировка.Родитель) = Тип("НастройкиКомпоновкиДанных") Тогда
		Возврат Группировка.Родитель;
	КонецЕсли;

	Возврат Настройки;
КонецФункции

Процедура сВО_НайтиПоляГруппировки(Настройки, Группировка, ДобавляемыеПоля)
	Если Не сВО_ИспользуетсяАвтоПоле(Группировка.Выбор) Тогда
		Возврат;
	КонецЕсли;

	ПоляГруппировки = Группировка.ПоляГруппировки;

	Для Каждого Элемент Из ПоляГруппировки.Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ПолеГруппировкиКомпоновкиДанных") И Элемент.Использование Тогда
			ВыбранноеПолеГруппировки	= ВариантыОтчетовКлиентСервер.сВО_ПолеОтчета(Группировка.Выбор, Элемент.Поле);
			ВыбранноеПолеНастроек		= ВариантыОтчетовКлиентСервер.сВО_ПолеОтчета(Настройки.Выбор, Элемент.Поле);

			Если ВыбранноеПолеГруппировки = Неопределено И ВыбранноеПолеНастроек = Неопределено Тогда
				сВО_ДобавитьПредыдущиеПоляГруппировки(ДобавляемыеПоля, Группировка, Элемент);
				сВО_ДобавитьПолеГруппировки(ДобавляемыеПоля, ПоляГруппировки, Элемент);
			ИначеЕсли ВыбранноеПолеГруппировки = Неопределено И ВыбранноеПолеНастроек <> Неопределено И Не ВыбранноеПолеНастроек.Использование Тогда
				сВО_ДобавитьПолеГруппировки(ДобавляемыеПоля, ПоляГруппировки, Элемент);
			ИначеЕсли ВыбранноеПолеНастроек = Неопределено И ВыбранноеПолеГруппировки <> Неопределено И Не ВыбранноеПолеГруппировки.Использование Тогда
				сВО_ДобавитьПолеГруппировки(ДобавляемыеПоля, ПоляГруппировки, Элемент);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура сВО_НайтиВыбранныеПоляГруппировки(КомпоновщикНастроек, Настройки, Группировка, Поля, ДобавляемыеПоля)
	Для Каждого Элемент Из Поля.Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
			сВО_НайтиВыбранныеПоляНастроек(КомпоновщикНастроек, Группировка, Настройки.Выбор, Настройки.Выбор, ДобавляемыеПоля);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			сВО_НайтиВыбранныеПоляГруппировки(КомпоновщикНастроек, Настройки, Группировка, Элемент, ДобавляемыеПоля);
		ИначеЕсли сВО_РазрешеноИспользоватьПолеВГруппировке(КомпоновщикНастроек, Группировка, Элемент.Поле) Тогда
			сВО_ДобавитьПолеГруппировки(ДобавляемыеПоля, Группировка.Выбор, Элемент);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура сВО_СоздатьИерархиюПолейГруппировки(Поля, ИндексГрупп)
	сВО_СоздатьОсновныеГруппыПолейГруппировки(Поля, ИндексГрупп);

	Для Каждого Индекс Из ИндексГрупп Цикл
		СвойстваГруппы = Индекс.Значение; // см. СвойстваГруппыПолей

		Если ТипЗнч(СвойстваГруппы) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;

		СвойстваРодителяГруппы = СвойстваГруппы.Родитель; // см. СвойстваГруппыПолей

		Если СвойстваРодителяГруппы <> Неопределено Тогда
			Родитель = ИндексГрупп[СвойстваРодителяГруппы.Идентификатор]; // ВыбранныеПоляКомпоновкиДанных

			Группа = Родитель.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(Группа, СвойстваГруппы);

			ИндексГрупп.Вставить(Индекс.Ключ, Группа);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура сВО_СоздатьОсновныеГруппыПолейГруппировки(Поля, ИндексГрупп)
	Для Каждого Индекс Из ИндексГрупп Цикл
		СвойстваГруппы = Индекс.Значение;

		Если ТипЗнч(СвойстваГруппы) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;

		Если СвойстваГруппы.Родитель = Неопределено Тогда
			Группа = Поля.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(Группа, СвойстваГруппы);

			ИндексГрупп.Вставить(Индекс.Ключ, Группа);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция сВО_ИспользуетсяАвтоПоле(Поля)
	Для Каждого Элемент Из Поля.Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Или ТипЗнч(Элемент) = Тип("АвтоПолеГруппировкиКомпоновкиДанных") Тогда
			Возврат Элемент.Использование;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
КонецФункции

Процедура сВО_ДобавитьПредыдущиеПоляГруппировки(ДобавляемыеПоля, Группировка, ТекущееПоле)
	ПоляГруппировки		= Группировка.ПоляГруппировки.Элементы;
	ИндексТекущегоПоля	= ПоляГруппировки.Индекс(ТекущееПоле);

	Если ИндексТекущегоПоля = 0 Тогда
		Возврат;
	КонецЕсли;

	Для Индекс = 0 По ИндексТекущегоПоля - 1 Цикл
		Поле = ПоляГруппировки[Индекс];

		Если ДобавляемыеПоля.ИндексПолей[Поле.Поле] = Неопределено Тогда
			сВО_ДобавитьПолеГруппировки(ДобавляемыеПоля, Группировка.ПоляГруппировки, Поле);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура сВО_ДобавитьПолеГруппировки(ДобавляемыеПоля, Узел, Поле)
	Если ДобавляемыеПоля.ИндексПолей[Поле.Поле] <> Неопределено Тогда
		Возврат;
	КонецЕсли;

	СвойстваПоля				= сВО_СвойстваПоля(Поле);
	СвойстваПоля.Идентификатор	= Узел.ПолучитьИдентификаторПоОбъекту(Поле);

	Если СвойстваПоля.Родитель = Неопределено Тогда
		СвойстваПоля.Индекс = Узел.Элементы.Индекс(Поле);
	Иначе
		СвойстваПоля.Индекс = Поле.Родитель.Элементы.Индекс(Поле);
	КонецЕсли;

	ДобавляемыеПоля.Свойства.Добавить(СвойстваПоля);
	ДобавляемыеПоля.ИндексПолей.Вставить(Поле.Поле, СвойстваПоля);

	сВО_ДобавитьГруппуПолей(ДобавляемыеПоля, Узел, СвойстваПоля);
КонецПроцедуры

Функция сВО_СвойстваПоля(Поле)
	СвойстваПоля = Новый Структура;
	СвойстваПоля.Вставить("Заголовок",			"");
	СвойстваПоля.Вставить("Использование",		Ложь);
	СвойстваПоля.Вставить("Поле",				Неопределено);
	СвойстваПоля.Вставить("РежимОтображения",	РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто);
	СвойстваПоля.Вставить("Родитель",			Неопределено);
	СвойстваПоля.Вставить("Идентификатор",		Неопределено);

	ЗаполнитьЗначенияСвойств(СвойстваПоля, Поле);

	СвойстваПоля.Вставить("Индекс",				-1);
	СвойстваПоля.Вставить("Тип",				ТипЗнч(Поле));

	Возврат СвойстваПоля;
КонецФункции

Процедура сВО_ДобавитьГруппуПолей(ДобавляемыеПоля, Узел, Элемент, Группа = Неопределено)
	Если Элемент.Тип = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Или Элемент.Тип = Тип("ВыбранноеПолеКомпоновкиДанных") И ТипЗнч(Элемент.Родитель) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
		Группа = Элемент.Родитель;
	КонецЕсли;

	Если ТипЗнч(Группа) <> Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;

	Идентификатор	= Узел.ПолучитьИдентификаторПоОбъекту(Группа);
	СвойстваГруппы	= ДобавляемыеПоля.ИндексГрупп[Идентификатор];

	Если СвойстваГруппы = Неопределено Тогда
		СвойстваГруппы = сВО_СвойстваГруппыПолей(Группа);
		СвойстваГруппы.Идентификатор = Идентификатор;

		ДобавляемыеПоля.ИндексГрупп.Вставить(Идентификатор, СвойстваГруппы);
	КонецЕсли;

	СвойстваГруппы.Элементы.Добавить(Элемент);
	Элемент.Родитель = СвойстваГруппы;

	Если ТипЗнч(Группа.Родитель) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
		сВО_ДобавитьГруппуПолей(ДобавляемыеПоля, Узел, СвойстваГруппы);
	КонецЕсли;
КонецПроцедуры

Функция сВО_СвойстваГруппыПолей(Группа)
	СвойстваГруппы = Новый Структура;
	СвойстваГруппы.Вставить("Заголовок",		"");
	СвойстваГруппы.Вставить("Использование",	Ложь);
	СвойстваГруппы.Вставить("Поле",				Неопределено);
	СвойстваГруппы.Вставить("Расположение",		РасположениеПоляКомпоновкиДанных.Авто);
	СвойстваГруппы.Вставить("РежимОтображения",	РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто);
	СвойстваГруппы.Вставить("Родитель",			Неопределено);
	СвойстваГруппы.Вставить("Идентификатор",	Неопределено);

	ЗаполнитьЗначенияСвойств(СвойстваГруппы, Группа);

	СвойстваГруппы.Вставить("Элементы",			Новый Массив);
	СвойстваГруппы.Вставить("Тип",				ТипЗнч(Группа));

	Возврат СвойстваГруппы;
КонецФункции

Процедура сВО_НайтиВыбранныеПоляНастроек(КомпоновщикНастроек, Группировка, Узел, Поля, ДобавляемыеПоля)
	Для Каждого Элемент Из Поля.Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			сВО_НайтиВыбранныеПоляНастроек(КомпоновщикНастроек, Группировка, Узел, Элемент, ДобавляемыеПоля);
		ИначеЕсли ТипЗнч(Элемент) <> Тип("АвтоВыбранноеПолеКомпоновкиДанных") И сВО_РазрешеноИспользоватьПолеВГруппировке(КомпоновщикНастроек, Группировка, Элемент.Поле) Тогда
			ПолеОтчета = ВариантыОтчетовКлиентСервер.сВО_ПолеОтчета(Группировка.Выбор, Элемент.Поле);

			Если ПолеОтчета = Неопределено Тогда
				сВО_ДобавитьПолеГруппировки(ДобавляемыеПоля, Узел, Элемент);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция сВО_РазрешеноИспользоватьПолеВГруппировке(КомпоновщикНастроек, Группировка, Поле)
	Элементы						= Группировка.ПоляГруппировки.Элементы;
	ЭтоГруппировкаДетальныхЗаписей	= (Элементы.Количество() = 0);

	Если ЭтоГруппировкаДетальныхЗаписей И (ВариантыОтчетовКлиентСервер.сВО_ПолеОтчета(Группировка.Выбор, Поле, Истина) <> Неопределено Или Не ВариантыОтчетовКлиентСервер.сВО_ПолеИспользуетсяВРодительскихГруппировкахОтчета(Группировка.Родитель, Поле)) Тогда
		Возврат Истина;
	КонецЕсли;

	ОписаниеПоля = сВО_ОписаниеПоляОтчета(КомпоновщикНастроек, Поле);

	Если ОписаниеПоля = Неопределено Тогда
		ОписаниеПоля = Группировка.ПоляГруппировки.ДоступныеПоляПолейГруппировок.НайтиПоле(Поле);
	КонецЕсли;

	Если ОписаниеПоля <> Неопределено И ОписаниеПоля.Ресурс Тогда
		Возврат Истина;
	КонецЕсли;

	Для Каждого Элемент Из Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ПолеГруппировкиКомпоновкиДанных") И Элемент.Использование И (Элемент.Поле = Поле Или СтрНайти(Строка(Элемент.Поле), Строка(Поле)) > 0 Или СтрНайти(Строка(Поле), Строка(Элемент.Поле)) > 0) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
КонецФункции

Функция сВО_ОписаниеПоляОтчета(КомпоновщикНастроек, Поле, ИмяКоллекции = "Выбор")
	ДоступныеПоля = сВО_ДоступныеПоляОтчета(КомпоновщикНастроек, ИмяКоллекции);

	Возврат ДоступныеПоля.НайтиПоле(Поле);
КонецФункции

Процедура сВО_СкрытьПоле(Форма, Команда) Экспорт
	Если Не сВО_ДействиеДоступно(Форма, Команда) Тогда
		Возврат;
	КонецЕсли;

	СвойстваЗаголовка = сВО_СвойстваЗаголовкаОтчета(Форма);

	Если СвойстваЗаголовка.ИдентификаторНастроек = Неопределено Тогда
		Возврат;
	КонецЕсли;

	КомпоновщикНастроек	= сВО_КомпоновщикНастроекОтчета(Форма);
	Настройки			= сВО_ИспользуемыеНастройки(Форма, СвойстваЗаголовка.ИдентификаторНастроек);
	Раздел				= Настройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторРаздела);

	сВО_ОбновитьПоляРаздела(КомпоновщикНастроек, Настройки, Раздел);

	Группировка		= Настройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторГруппировки);
	ОписаниеПоля	= сВО_ОписаниеПоляОтчета(КомпоновщикНастроек, СвойстваЗаголовка.Поле);

	ЭтоГруппировкаДетальныхЗаписей = Группировка.ПоляГруппировки.Элементы.Количество() = 0;

	Если ОписаниеПоля <> Неопределено И ОписаниеПоля.Ресурс Тогда
		сВО_СкрытьВыбранноеПолеРаздела(Раздел, СвойстваЗаголовка.Поле);
	Иначе
		сВО_СкрытьВыбранноеПолеГруппировки(Группировка, СвойстваЗаголовка.Поле);

		Если Не ЭтоГруппировкаДетальныхЗаписей Тогда
			сВО_СкрытьГруппировку(Настройки, Группировка, СвойстваЗаголовка.Поле);
		КонецЕсли;
	КонецЕсли;

	сВО_ОповеститьОЗавершенииКонтекстнойНастройки(Форма, сВО_ДействиеКоманды(Команда));
КонецПроцедуры

Процедура сВО_СкрытьВыбранноеПолеРаздела(Раздел, Поле)
	ГруппировкиРаздела = Новый Массив;

	Если ТипЗнч(Раздел) = Тип("ТаблицаКомпоновкиДанных") Тогда
		ГруппировкиРаздела.Добавить(Раздел.Строки);
		ГруппировкиРаздела.Добавить(Раздел.Колонки);
	Иначе
		ГруппировкиРаздела.Добавить(Раздел.Структура);
		сВО_СкрытьВыбранноеПолеГруппировки(Раздел, Поле);
	КонецЕсли;

	Для Каждого Группировки Из ГруппировкиРаздела Цикл
		Для Каждого Группировка Из Группировки Цикл
			сВО_СкрытьВыбранноеПолеГруппировки(Группировка, Поле);
			сВО_СкрытьВыбранноеПолеРаздела(Группировка, Поле);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура сВО_СкрытьВыбранноеПолеГруппировки(Группировка, Поле)
	Если ТипЗнч(Группировка) <> Тип("ГруппировкаКомпоновкиДанных") И ТипЗнч(Группировка) <> Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;

	ПоляОтчета = ВариантыОтчетовКлиентСервер.сВО_ПолеОтчета(Группировка.Выбор, Поле);

	Если ПоляОтчета <> Неопределено Тогда
		ПоляОтчета.Использование = Ложь;
	КонецЕсли;

	ПоляОтчета = ВариантыОтчетовКлиентСервер.сВО_ПолеОтчета(Группировка.ПоляГруппировки, Поле);

	Если ПоляОтчета <> Неопределено Тогда
		ПоляОтчета.Использование = Ложь;
	КонецЕсли;
КонецПроцедуры

Процедура сВО_ПереименоватьПоле(Форма, Команда, Заголовок = "") Экспорт
	Если Не сВО_ДействиеДоступно(Форма, Команда) Тогда
		Возврат;
	КонецЕсли;

	СвойстваЗаголовка = сВО_СвойстваЗаголовкаОтчета(Форма);

	КомпоновщикНастроек	= сВО_КомпоновщикНастроекОтчета(Форма);
	Настройки			= сВО_ИспользуемыеНастройки(Форма, СвойстваЗаголовка.ИдентификаторНастроек);
	Группировка			= Настройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторГруппировки);

	ОписаниеПоля		= сВО_ОписаниеПоляОтчета(КомпоновщикНастроек, СвойстваЗаголовка.Поле);

	ПолеОтчета			= ВариантыОтчетовКлиентСервер.сВО_ПолеОтчета(Группировка.Выбор, СвойстваЗаголовка.Поле);

	Если Не ЗначениеЗаполнено(Заголовок) Тогда
		ПараметрыОбработчика	= Новый Структура("Форма, Команда", Форма, Команда);
		Обработчик				= Новый ОписаниеОповещения("сВО_ПослеВводаЗаголовкаПоляОтчета", ЭтотОбъект, ПараметрыОбработчика);

		ТекущийЗаголовок = сВО_ТекущийЗаголовокПоляОтчета(ПолеОтчета, ОписаниеПоля);

		ЗаголовокДиалога = СтрШаблон("Заголовок поля: %1", ?(ОписаниеПоля = Неопределено, Строка(ПолеОтчета), ОписаниеПоля.Заголовок));

		ПоказатьВводСтроки(Обработчик, ТекущийЗаголовок, ЗаголовокДиалога);

		Возврат;
	КонецЕсли;

	Если ПолеОтчета = Неопределено Тогда
		Раздел		= Настройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторРаздела);
		сВО_ОбновитьПоляРаздела(КомпоновщикНастроек, Настройки, Раздел);
		ПолеОтчета	= ВариантыОтчетовКлиентСервер.сВО_ПолеОтчета(Группировка.Выбор, СвойстваЗаголовка.Поле);
	КонецЕсли;

	Если ПолеОтчета <> Неопределено Тогда
		сВО_УстановитьЗаголовокПоляОтчета(Заголовок, ПолеОтчета, ОписаниеПоля);
	КонецЕсли;

	сВО_ОповеститьОЗавершенииКонтекстнойНастройки(Форма, сВО_ДействиеКоманды(Команда));
КонецПроцедуры

Процедура сВО_ПослеВводаЗаголовкаПоляОтчета(Заголовок, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(Заголовок) Тогда
		сВО_ПереименоватьПоле(ДополнительныеПараметры.Форма, ДополнительныеПараметры.Команда, Заголовок);
	КонецЕсли;
КонецПроцедуры

Функция сВО_ТекущийЗаголовокПоляОтчета(Поле, ОписаниеПоля)
	ТекущийЗаголовок = "";

	Если Поле <> Неопределено И ЗначениеЗаполнено(Поле.Заголовок) Тогда
		ТекущийЗаголовок = Поле.Заголовок;
	ИначеЕсли ОписаниеПоля <> Неопределено Тогда
		ТекущийЗаголовок = ОписаниеПоля.Заголовок;
	ИначеЕсли Поле <> Неопределено Тогда
		ТекущийЗаголовок = Строка(Поле);
	КонецЕсли;

	Возврат ТекущийЗаголовок;
КонецФункции

Процедура сВО_УстановитьЗаголовокПоляОтчета(Заголовок, Поле, ОписаниеПоля)
	Если ОписаниеПоля <> Неопределено И Заголовок = ОписаниеПоля.Заголовок Тогда
		Поле.Заголовок = "";
	Иначе
		Поле.Заголовок = Заголовок;
	КонецЕсли;
КонецПроцедуры

Процедура сВО_ОформитьКрасным(Форма, Команда, СвойстваЗаголовка = Неопределено, Значение = Неопределено) Экспорт
	Если СвойстваЗаголовка = Неопределено Тогда
		СвойстваЗаголовка = сВО_СвойстваЗаголовкаОтчета(Форма);
	КонецЕсли;

	ДействиеКоманды								= сВО_ДействиеКоманды(Команда);

	ПараметрыРаскраски							= сВО_ПараметрыРаскраскиРазделаОтчета(ДействиеКоманды);
	ПараметрыРаскраски.Условие.ЛевоеЗначение	= СвойстваЗаголовка.Поле;

	Если ДействиеКоманды = "ОформитьОтрицательные" Тогда
		Если Не сВО_ДействиеНадПолемДоступно(ДействиеКоманды, СвойстваЗаголовка) Тогда
			Возврат;
		КонецЕсли;

		ПараметрыРаскраски.Условие.ВидСравнения		= ВидСравненияКомпоновкиДанных.Меньше;
		ПараметрыРаскраски.Условие.ПравоеЗначение	= 0;
	Иначе
		ПараметрыРаскраски.Условие.ВидСравнения		= сВО_ВидСравненияУсловияОформления(Значение);
		ПараметрыРаскраски.Условие.ПравоеЗначение	= Значение;
	КонецЕсли;

	ЭлементыСтиля		= БазоваяПодсистемаКлиент.СП_ЭлементыСтиля();

	Оформление			= сВО_СтандартныйПараметрРаскраскиРазделаОтчета();
	Оформление.Параметр	= "ЦветТекста";
	Оформление.Значение	= ЭлементыСтиля.ЦветТекстаОтрицательногоЗначения;

	ПараметрыРаскраски.Оформление.Добавить(Оформление);

	Оформление			= сВО_СтандартныйПараметрРаскраскиРазделаОтчета();
	Оформление.Параметр	= "ЦветФона";
	Оформление.Значение	= ЭлементыСтиля.ЦветФонаОтрицательногоЗначения;

	ПараметрыРаскраски.Оформление.Добавить(Оформление);

	сВО_РаскраситьРазделОтчета(Форма, ПараметрыРаскраски, СвойстваЗаголовка);

	сВО_ОповеститьОЗавершенииКонтекстнойНастройки(Форма, сВО_ДействиеКоманды(Команда));
КонецПроцедуры

Процедура сВО_ОформитьЗеленым(Форма, Команда, СвойстваЗаголовка = Неопределено, Значение = Неопределено) Экспорт
	Если СвойстваЗаголовка = Неопределено Тогда
		СвойстваЗаголовка = сВО_СвойстваЗаголовкаОтчета(Форма);
	КонецЕсли;

	ДействиеКоманды								= сВО_ДействиеКоманды(Команда);

	ПараметрыРаскраски							= сВО_ПараметрыРаскраскиРазделаОтчета(ДействиеКоманды);
	ПараметрыРаскраски.Условие.ЛевоеЗначение	= СвойстваЗаголовка.Поле;

	Если ДействиеКоманды = "ОформитьПоложительные" Тогда
		Если Не сВО_ДействиеНадПолемДоступно(ДействиеКоманды, СвойстваЗаголовка) Тогда
			Возврат;
		КонецЕсли;

		ПараметрыРаскраски.Условие.ВидСравнения		= ВидСравненияКомпоновкиДанных.Больше;
		ПараметрыРаскраски.Условие.ПравоеЗначение	= 0;
	Иначе
		ПараметрыРаскраски.Условие.ВидСравнения		= сВО_ВидСравненияУсловияОформления(Значение);
		ПараметрыРаскраски.Условие.ПравоеЗначение	= Значение;
	КонецЕсли;

	ЭлементыСтиля		= БазоваяПодсистемаКлиент.СП_ЭлементыСтиля();

	Оформление			= сВО_СтандартныйПараметрРаскраскиРазделаОтчета();
	Оформление.Параметр	= "ЦветТекста";
	Оформление.Значение	= ЭлементыСтиля.ЦветТекстаПоложительногоЗначения;

	ПараметрыРаскраски.Оформление.Добавить(Оформление);

	Оформление			= сВО_СтандартныйПараметрРаскраскиРазделаОтчета();
	Оформление.Параметр	= "ЦветФона";
	Оформление.Значение	= ЭлементыСтиля.ЦветФонаПоложительногоЗначения;

	ПараметрыРаскраски.Оформление.Добавить(Оформление);

	сВО_РаскраситьРазделОтчета(Форма, ПараметрыРаскраски, СвойстваЗаголовка);

	сВО_ОповеститьОЗавершенииКонтекстнойНастройки(Форма, сВО_ДействиеКоманды(Команда));
КонецПроцедуры

Процедура сВО_ОформитьЖелтым(Форма, Команда, СвойстваЗаголовка = Неопределено, Значение = Неопределено)
	Если СвойстваЗаголовка = Неопределено Тогда
		СвойстваЗаголовка = сВО_СвойстваЗаголовкаОтчета(Форма);
	КонецЕсли;

	ПараметрыРаскраски							= сВО_ПараметрыРаскраскиРазделаОтчета(сВО_ДействиеКоманды(Команда));
	ПараметрыРаскраски.Условие.ЛевоеЗначение	= СвойстваЗаголовка.Поле;
	ПараметрыРаскраски.Условие.ВидСравнения		= сВО_ВидСравненияУсловияОформления(Значение);
	ПараметрыРаскраски.Условие.ПравоеЗначение	= Значение;

	ЭлементыСтиля		= БазоваяПодсистемаКлиент.СП_ЭлементыСтиля();

	Оформление			= сВО_СтандартныйПараметрРаскраскиРазделаОтчета();
	Оформление.Параметр	= "ЦветТекста";
	Оформление.Значение	= ЭлементыСтиля.ЦветТекстаВнимание;

	ПараметрыРаскраски.Оформление.Добавить(Оформление);

	Оформление			= сВО_СтандартныйПараметрРаскраскиРазделаОтчета();
	Оформление.Параметр	= "ЦветФона";
	Оформление.Значение	= ЭлементыСтиля.ЦветФонаВнимание;

	ПараметрыРаскраски.Оформление.Добавить(Оформление);

	сВО_РаскраситьРазделОтчета(Форма, ПараметрыРаскраски, СвойстваЗаголовка);

	сВО_ОповеститьОЗавершенииКонтекстнойНастройки(Форма, сВО_ДействиеКоманды(Команда));
КонецПроцедуры

Функция сВО_ПараметрыРаскраскиРазделаОтчета(Действие)
	Условие = Новый Структура;
	Условие.Вставить("ЛевоеЗначение",	Неопределено);
	Условие.Вставить("ВидСравнения",	ВидСравненияКомпоновкиДанных.Равно);
	Условие.Вставить("ПравоеЗначение",	Неопределено);

	ПараметрыРаскраски = Новый Структура;
	ПараметрыРаскраски.Вставить("Условие",		Условие);
	ПараметрыРаскраски.Вставить("Оформление",	Новый Массив);

	Возврат ПараметрыРаскраски;
КонецФункции

Функция сВО_СтандартныйПараметрРаскраскиРазделаОтчета()
	Параметр = Новый Структура;
	Параметр.Вставить("Параметр",	"");
	Параметр.Вставить("Значение",	Неопределено);

	Возврат Параметр;
КонецФункции

Процедура сВО_РаскраситьРазделОтчета(Форма, ПараметрыРаскраски, СвойстваЗаголовка)
	Настройки	= сВО_ИспользуемыеНастройки(Форма, СвойстваЗаголовка.ИдентификаторНастроек);
	Раздел		= Настройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторРаздела);

	Если ТипЗнч(Раздел) = Тип("ТаблицаКомпоновкиДанных") Тогда
		сВО_РаскраситьГруппировкиРазделаОтчета(Раздел.Строки, ПараметрыРаскраски, СвойстваЗаголовка);
	Иначе
		сВО_РаскраситьГруппировкуРазделаОтчета(Раздел, ПараметрыРаскраски, СвойстваЗаголовка);
	КонецЕсли;
КонецПроцедуры

Процедура сВО_РаскраситьГруппировкиРазделаОтчета(Группировки, ПараметрыРаскраски, СвойстваЗаголовка)
	Для Каждого Группировка Из Группировки Цикл
		сВО_РаскраситьГруппировкуРазделаОтчета(Группировка, ПараметрыРаскраски, СвойстваЗаголовка);
	КонецЦикла;
КонецПроцедуры

Процедура сВО_РаскраситьГруппировкуРазделаОтчета(Группировка, ПараметрыРаскраски, СвойстваЗаголовка)
	Если ТипЗнч(Группировка) = Тип("ТаблицаКомпоновкиДанных") Тогда
		сВО_РаскраситьГруппировкиРазделаОтчета(Группировка.Строки, ПараметрыРаскраски, СвойстваЗаголовка);
	Иначе
		ПолеОформления				= БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(ПараметрыРаскраски.Условие, "ЛевоеЗначение");

		ПараметрыРаскраскиПрименимы	= сВО_ОформлениеПрименимоКГруппировке(Группировка, ПолеОформления, СвойстваЗаголовка.Ресурс);

		Если ПараметрыРаскраскиПрименимы Тогда
			Раскраска = сВО_РаскраскаГруппировкиОтчета(Группировка.УсловноеОформление, ПараметрыРаскраски);

			Если Раскраска = Неопределено Тогда
				сВО_ДобавитьРаскраскуГруппировкиОтчета(Группировка.УсловноеОформление, ПараметрыРаскраски);
			КонецЕсли;
		КонецЕсли;

		сВО_РаскраситьГруппировкиРазделаОтчета(Группировка.Структура, ПараметрыРаскраски, СвойстваЗаголовка)
	КонецЕсли;
КонецПроцедуры

Функция сВО_ОформлениеПрименимоКГруппировке(Группировка, Поле, ЭтоРесурс)
	ПоляГруппировки = Группировка.ПоляГруппировки;

	Возврат ЭтоРесурс Или Поле = Неопределено Или ПоляГруппировки.Элементы.Количество() = 0 Или ВариантыОтчетовКлиентСервер.сВО_ПолеОтчета(ПоляГруппировки, Поле) <> Неопределено;
КонецФункции

Функция сВО_РаскраскаГруппировкиОтчета(УсловноеОформление, ПараметрыРаскраски)
	 Для Каждого Элемент Из УсловноеОформление.Элементы Цикл
		Условие = сВО_УсловиеРаскраскиГруппировкиОтчета(Элемент.Отбор, ПараметрыРаскраски.Условие);

		Если Условие <> Неопределено Тогда
			сВО_ОбновитьРаскраскуГруппировкиОтчета(Элемент, Условие, ПараметрыРаскраски);

			Возврат Элемент;
		КонецЕсли;
	 КонецЦикла;

	Возврат Неопределено;
КонецФункции

Функция сВО_УсловиеРаскраскиГруппировкиОтчета(Отбор, Поиск)
	Условие = Неопределено;

	Для Каждого Элемент Из Отбор.Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ЭлементОтбораКомпоновкиДанных") И Элемент.ЛевоеЗначение = Поиск.ЛевоеЗначение И Элемент.ВидСравнения = Поиск.ВидСравнения И Элемент.ПравоеЗначение = Поиск.ПравоеЗначение Тогда
			Условие = Элемент;

			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Условие;
КонецФункции

Процедура сВО_ОбновитьРаскраскуГруппировкиОтчета(Оформление, Условие, ПараметрыРаскраски)
	Оформление.Использование	= Истина;
	Условие.Использование		= Истина;

	Оформление.Поля.Элементы.Очистить();

	Поле				= Оформление.Поля.Элементы.Добавить();
	Поле.Поле			= ПараметрыРаскраски.Условие.ЛевоеЗначение;
	Поле.Использование	= Истина;

	сВО_СброситьОформлениеГруппировкиОтчета(Оформление);

	Для Каждого Параметр Из ПараметрыРаскраски.Оформление Цикл
		Оформление.Оформление.УстановитьЗначениеПараметра(Параметр.Параметр, Параметр.Значение);
	КонецЦикла;

	сВО_УстановитьОбластьОформленияГруппировкиОтчета(Оформление);
КонецПроцедуры

Процедура сВО_ДобавитьРаскраскуГруппировкиОтчета(УсловноеОформление, ПараметрыРаскраски)
	Оформление = УсловноеОформление.Элементы.Добавить();

	Условие = Оформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЗаполнитьЗначенияСвойств(Условие, ПараметрыРаскраски.Условие);
	Условие.Использование = Истина;

	Поле				= Оформление.Поля.Элементы.Добавить();
	Поле.Поле			= ПараметрыРаскраски.Условие.ЛевоеЗначение;
	Поле.Использование	= Истина;

	Для Каждого Параметр Из ПараметрыРаскраски.Оформление Цикл
		Оформление.Оформление.УстановитьЗначениеПараметра(Параметр.Параметр, Параметр.Значение);
	КонецЦикла;

	сВО_УстановитьОбластьОформленияГруппировкиОтчета(Оформление);
КонецПроцедуры

Процедура сВО_УстановитьОбластьОформленияГруппировкиОтчета(ЭлементОформления)
	НеиспользуемыеОбласти = сВО_НеиспользуемыеОбластиОформления();

	Для Каждого Область Из НеиспользуемыеОбласти Цикл
		ЭлементОформления[Область] = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
	КонецЦикла;
КонецПроцедуры

Функция сВО_НеиспользуемыеОбластиОформления()

	НеиспользуемыеОбласти = Новый Массив;
	НеиспользуемыеОбласти.Добавить("ИспользоватьВЗаголовке");
	НеиспользуемыеОбласти.Добавить("ИспользоватьВЗаголовкеПолей");
	НеиспользуемыеОбласти.Добавить("ИспользоватьВОбщемИтоге");
	НеиспользуемыеОбласти.Добавить("ИспользоватьВОтборе");
	НеиспользуемыеОбласти.Добавить("ИспользоватьВПараметрах");

	ПараметрыКлиента = БазоваяПодсистемаКлиентПовтИсп.СП_ПараметрыРаботыКлиента();

	Если БазоваяПодсистемаКлиентСервер.ОН_СравнитьВерсии(ПараметрыКлиента.ВерсияРежимаСовместимости, "8.3.16.0") < 0 Тогда
		Возврат НеиспользуемыеОбласти;
	КонецЕсли;

	НеиспользуемыеОбласти.Добавить("ИспользоватьВЗаголовкеПолейРесурсов");
	НеиспользуемыеОбласти.Добавить("ИспользоватьВЗаголовкеОбщегоИтога");
	НеиспользуемыеОбласти.Добавить("ИспользоватьВЗаголовкеПолейРесурсовОбщегоИтога");

	Возврат НеиспользуемыеОбласти;
КонецФункции

Процедура сВО_СброситьОформлениеГруппировкиОтчета(ЭлементОформления, ТолькоПараметры = Истина)
	Для Каждого Элемент Из ЭлементОформления.Оформление.Элементы Цикл
		Элемент.Использование = Ложь;
	КонецЦикла;

	Если ТолькоПараметры Тогда
		Возврат;
	КонецЕсли;

	ЭлементОформления.Поля.Элементы.Очистить();
	ЭлементОформления.Отбор.Элементы.Очистить();
КонецПроцедуры

Функция сВО_ДействиеНадПолемДоступно(Действие, СвойстваЗаголовка)
	Если Не СвойстваЗаголовка[Действие] Тогда
		ТекстПредупреждения = СтрШаблон("Действие недоступно для поля %1", СвойстваЗаголовка.Текст);

		ПоказатьПредупреждение(, ТекстПредупреждения);

		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
КонецФункции

Процедура сВО_УстановитьВысотуСтроки(Форма, Команда, СвойстваЗаголовка = Неопределено, ВысотаСтроки = Неопределено, ПараметрыВысотыСтроки = Неопределено) Экспорт
	Если СвойстваЗаголовка = Неопределено Тогда
		СвойстваЗаголовка = сВО_СвойстваЗаголовкаОтчета(Форма);
	КонецЕсли;

	Если ВысотаСтроки = Неопределено Тогда
		ПараметрыВысотыСтроки = сВО_ПараметрыРазмераПоляОтчета(Форма, СвойстваЗаголовка);

		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("Форма",					Форма);
		ПараметрыОбработчика.Вставить("Команда",				Команда);
		ПараметрыОбработчика.Вставить("СвойстваЗаголовка",		СвойстваЗаголовка);
		ПараметрыОбработчика.Вставить("ПараметрыРазмераПоля",	ПараметрыВысотыСтроки);

		Обработчик = Новый ОписаниеОповещения("сВО_ПослеВводаВысотыСтрокиОтчета", ЭтотОбъект, ПараметрыОбработчика);
		ПоказатьВводЧисла(Обработчик, ПараметрыВысотыСтроки.Размер, "Высота строки", 5);

		Возврат;
	КонецЕсли;

	Если ПараметрыВысотыСтроки = Неопределено Или ПараметрыВысотыСтроки.Элемент = Неопределено Тогда
		сВО_ДобавитьПараметрыРазмераПоляОтчета(Форма, СвойстваЗаголовка, ВысотаСтроки);
	Иначе
		сВО_ОбновитьПараметрыРазмера(ПараметрыВысотыСтроки, ВысотаСтроки);
	КонецЕсли;

	сВО_ОповеститьОЗавершенииКонтекстнойНастройки(Форма, сВО_ДействиеКоманды(Команда));
КонецПроцедуры

Процедура сВО_УстановитьШиринуКолонки(Форма, Команда, СвойстваЗаголовка = Неопределено, ШиринаКолонки = Неопределено, ПараметрыШириныКолонки = Неопределено) Экспорт
	Если СвойстваЗаголовка = Неопределено Тогда
		СвойстваЗаголовка = сВО_СвойстваЗаголовкаОтчета(Форма);
	КонецЕсли;

	Если ШиринаКолонки = Неопределено Тогда
		ПараметрыШириныКолонки = сВО_ПараметрыРазмераПоляОтчета(Форма, СвойстваЗаголовка, "Ширина");

		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("Форма",					Форма);
		ПараметрыОбработчика.Вставить("Команда",				Команда);
		ПараметрыОбработчика.Вставить("СвойстваЗаголовка",		СвойстваЗаголовка);
		ПараметрыОбработчика.Вставить("ПараметрыРазмераПоля",	ПараметрыШириныКолонки);

		Обработчик = Новый ОписаниеОповещения("сВО_ПослеВводаШириныКолонкиОтчета", ЭтотОбъект, ПараметрыОбработчика);
		ПоказатьВводЧисла(Обработчик, ПараметрыШириныКолонки.Размер, "Ширина колонки", 5);

		Возврат;
	КонецЕсли;

	Если ПараметрыШириныКолонки = Неопределено Или ПараметрыШириныКолонки.Элемент = Неопределено Тогда
		сВО_ДобавитьПараметрыРазмераПоляОтчета(Форма, СвойстваЗаголовка, ШиринаКолонки, "Ширина");
	Иначе
		сВО_ОбновитьПараметрыРазмера(ПараметрыШириныКолонки, ШиринаКолонки);
	КонецЕсли;

	сВО_ОповеститьОЗавершенииКонтекстнойНастройки(Форма, сВО_ДействиеКоманды(Команда));
КонецПроцедуры

Процедура сВО_ПослеВводаВысотыСтрокиОтчета(ВысотаСтроки, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(ВысотаСтроки) Тогда
		сВО_УстановитьВысотуСтроки(ДополнительныеПараметры.Форма, ДополнительныеПараметры.Команда, ДополнительныеПараметры.СвойстваЗаголовка, ВысотаСтроки, ДополнительныеПараметры.ПараметрыРазмераПоля);
	КонецЕсли;
КонецПроцедуры

Процедура сВО_ПослеВводаШириныКолонкиОтчета(ШиринаКолонки, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(ШиринаКолонки) Тогда
		сВО_УстановитьШиринуКолонки(ДополнительныеПараметры.Форма, ДополнительныеПараметры.Команда, ДополнительныеПараметры.СвойстваЗаголовка, ШиринаКолонки, ДополнительныеПараметры.ПараметрыРазмераПоля);
	КонецЕсли;
КонецПроцедуры

Функция сВО_ПараметрыРазмераПоляОтчета(Форма, СвойстваЗаголовка, Ориентация = "Высота") Экспорт
	Если ТипЗнч(СвойстваЗаголовка.ИдентификаторНастроек) <> Тип("ИдентификаторКомпоновкиДанных") Тогда
		Возврат сВО_СтандартныеПараметрыРазмераПоляОтчета();
	КонецЕсли;

	Настройки	= сВО_ИспользуемыеНастройки(Форма, СвойстваЗаголовка.ИдентификаторНастроек);
	Группировка	= Настройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторГруппировки);

	Для Каждого Элемент Из Группировка.УсловноеОформление.Элементы Цикл
		ПараметрыОформления = Элемент.Оформление.Элементы;

		Идентификаторы		= сВО_ИдентификаторыПараметровРазмераПоля(Ориентация);
		МинимальныйРазмер	= ПараметрыОформления.Найти(Идентификаторы.МинимальныйРазмер);
		МаксимальныйРазмер	= ПараметрыОформления.Найти(Идентификаторы.МаксимальныйРазмер);

		Если МинимальныйРазмер.Использование Или МаксимальныйРазмер.Использование Тогда
			Параметры						= сВО_СтандартныеПараметрыРазмераПоляОтчета();
			Параметры.Поле					= СвойстваЗаголовка.Поле;
			Параметры.Элемент				= Элемент;
			Параметры.МинимальныйРазмер		= МинимальныйРазмер;
			Параметры.МаксимальныйРазмер	= МаксимальныйРазмер;
			Параметры.Размер				= Макс(МинимальныйРазмер.Значение, МаксимальныйРазмер.Значение);

			Возврат Параметры;
		КонецЕсли;
	КонецЦикла;

	Возврат сВО_СтандартныеПараметрыРазмераПоляОтчета();
КонецФункции

Процедура сВО_ОбновитьПараметрыРазмера(Параметры, Размер)
	Параметры.Элемент.Использование				= Истина;

	Параметры.МинимальныйРазмер.Значение		= Размер;
	Параметры.МинимальныйРазмер.Использование	= Истина;

	Параметры.МаксимальныйРазмер.Значение		= Размер;
	Параметры.МаксимальныйРазмер.Использование	= Истина;

	сВО_ПроверитьИзменяемоеПоле(Параметры.Элемент.Поля, Параметры.Поле);
	сВО_УстановитьОбластьИзмененияРазмера(Параметры.Элемент);
КонецПроцедуры

Функция сВО_ИдентификаторыПараметровРазмераПоля(Ориентация)
	Идентификаторы = Новый Структура;

	Если Ориентация = "Высота" Тогда
		Идентификаторы.Вставить("МинимальныйРазмер", "МинимальнаяВысота");
		Идентификаторы.Вставить("МаксимальныйРазмер", "МаксимальнаяВысота");
	Иначе
		Идентификаторы.Вставить("МинимальныйРазмер", "МинимальнаяШирина");
		Идентификаторы.Вставить("МаксимальныйРазмер", "МаксимальнаяШирина");
	КонецЕсли;

	Возврат Идентификаторы;
КонецФункции

Процедура сВО_ДобавитьПараметрыРазмераПоляОтчета(Форма, СвойстваЗаголовка, Размер, Ориентация = "Высота")
	Настройки			= сВО_ИспользуемыеНастройки(Форма, СвойстваЗаголовка.ИдентификаторНастроек);
	Группировка			= Настройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторГруппировки);

	Элемент				= Группировка.УсловноеОформление.Элементы.Добавить();

	ПараметрыОформления	= Элемент.Оформление.Элементы;

	Идентификаторы		= сВО_ИдентификаторыПараметровРазмераПоля(Ориентация);

	Параметры						= сВО_СтандартныеПараметрыРазмераПоляОтчета(Размер);
	Параметры.Поле					= СвойстваЗаголовка.Поле;
	Параметры.Элемент				= Элемент;
	Параметры.МинимальныйРазмер		= ПараметрыОформления.Найти(Идентификаторы.МинимальныйРазмер);
	Параметры.МаксимальныйРазмер	= ПараметрыОформления.Найти(Идентификаторы.МаксимальныйРазмер);

	сВО_ОбновитьПараметрыРазмера(Параметры, Размер);
КонецПроцедуры

Функция сВО_СтандартныеПараметрыРазмераПоляОтчета(Размер = 0)
	Параметры = Новый Структура;
	Параметры.Вставить("Поле",					Неопределено);
	Параметры.Вставить("Элемент",				Неопределено);
	Параметры.Вставить("МинимальныйРазмер",		Неопределено);
	Параметры.Вставить("МаксимальныйРазмер",	Неопределено);
	Параметры.Вставить("Размер",				Размер);

	Возврат Параметры;
КонецФункции

Процедура сВО_ПроверитьИзменяемоеПоле(Поля, ПолеИскомое)
	Поле = Неопределено;

	Для Каждого Элемент Из Поля.Элементы Цикл
		Если Элемент.Поле = ПолеИскомое Тогда
			Поле = Элемент;

			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если Поле = Неопределено Тогда
		Поле		= Поля.Элементы.Добавить();
		Поле.Поле	= ПолеИскомое;
	КонецЕсли;

	Поле.Использование = Истина;
КонецПроцедуры

Процедура сВО_УстановитьОбластьИзмененияРазмера(Элемент)
	НеиспользуемыеОбласти = Новый Массив;
	НеиспользуемыеОбласти.Добавить("ИспользоватьВОбщемИтоге");
	НеиспользуемыеОбласти.Добавить("ИспользоватьВОтборе");
	НеиспользуемыеОбласти.Добавить("ИспользоватьВПараметрах");

	ПараметрыКлиента = БазоваяПодсистемаКлиентПовтИсп.СП_ПараметрыРаботыКлиента();

	Если БазоваяПодсистемаКлиентСервер.ОН_СравнитьВерсии(ПараметрыКлиента.ВерсияРежимаСовместимости, "8.3.16.0") >= 0 Тогда
		НеиспользуемыеОбласти.Добавить("ИспользоватьВЗаголовкеОбщегоИтога");
	КонецЕсли;

	Для Каждого Область Из НеиспользуемыеОбласти Цикл
		Элемент[Область] = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
	КонецЦикла;
КонецПроцедуры

Процедура сВО_ОформитьЕще(Форма, Команда, СвойстваЗаголовка = Неопределено, Значение = Неопределено) Экспорт
	Если СвойстваЗаголовка = Неопределено Тогда
		СвойстваЗаголовка = сВО_СвойстваЗаголовкаОтчета(Форма);
	КонецЕсли;

	ИспользуемыеНастройки		= сВО_ИспользуемыеНастройки(Форма, СвойстваЗаголовка.ИдентификаторНастроек);

	Раздел						= ИспользуемыеНастройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторРаздела);
	Группировка					= ИспользуемыеНастройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторГруппировки);

	ИдентификаторГруппировки	= ИспользуемыеНастройки.ПолучитьИдентификаторПоОбъекту(Группировка);
	ИдентификаторОформления		= сВО_ИдентификаторЭлементаОформленияГруппировкиОтчета(Группировка, СвойстваЗаголовка.Поле);

	ПараметрыОформления = Новый Структура;
	ПараметрыОформления.Вставить("КомпоновщикНастроек",						сВО_КомпоновщикНастроекОтчета(Форма));
	ПараметрыОформления.Вставить("НастройкиОтчета",							Форма.НастройкиОтчета);
	ПараметрыОформления.Вставить("ИдентификаторЭлементаСтруктурыНастроек",	ИдентификаторГруппировки);
	ПараметрыОформления.Вставить("ИдентификаторКД",							ИдентификаторОформления);
	ПараметрыОформления.Вставить("Наименование",							"");
	ПараметрыОформления.Вставить("Поле",									СвойстваЗаголовка.Поле);
	ПараметрыОформления.Вставить("Условие",									сВО_УсловиеОформленияГруппировкиОтчета(СвойстваЗаголовка.Поле, Значение));

	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Форма",			Форма);
	ПараметрыОбработчика.Вставить("Раздел",			Раздел);
	ПараметрыОбработчика.Вставить("Группировка",	Группировка);
	ПараметрыОбработчика.Вставить("Поле",			СвойстваЗаголовка.Поле);
	ПараметрыОбработчика.Вставить("Ресурс",			СвойстваЗаголовка.Ресурс);
	ПараметрыОбработчика.Вставить("Действие",		сВО_ДействиеКоманды(Команда));

	Обработчик = Новый ОписаниеОповещения("сВО_ПослеИзмененияЭлементаОформленияГруппировкиОтчета", ЭтотОбъект, ПараметрыОбработчика);

	ОткрытьФорму("ХранилищеНастроек.ХранилищеВариантовОтчетов.Форма.ЭлементУсловногоОформленияОтчета", ПараметрыОформления, Форма, Форма.УникальныйИдентификатор,,, Обработчик);
КонецПроцедуры

Процедура сВО_ПослеИзмененияЭлементаОформленияГруппировкиОтчета(Результат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	сВО_ОформитьРазделОтчета(ДополнительныеПараметры.Раздел, Результат.ЭлементКД, ДополнительныеПараметры.Поле, ДополнительныеПараметры.Ресурс);

	сВО_ОповеститьОЗавершенииКонтекстнойНастройки(ДополнительныеПараметры.Форма, ДополнительныеПараметры.Действие);
КонецПроцедуры

Процедура сВО_ОформитьРазделОтчета(Раздел, ОбразецОформления, Поле, ЭтоРесурс)
	Если ТипЗнч(Раздел) = Тип("ТаблицаКомпоновкиДанных") Тогда
		сВО_ОформитьГруппировкиРазделаОтчета(Раздел.Строки, ОбразецОформления, Поле, ЭтоРесурс);
	Иначе
		сВО_ОформитьГруппировкуРазделаОтчета(Раздел, ОбразецОформления, Поле, ЭтоРесурс);
	КонецЕсли;
КонецПроцедуры

Процедура сВО_ОформитьГруппировкиРазделаОтчета(Группировки, ОбразецОформления, Поле, ЭтоРесурс)
	Для Каждого Группировка Из Группировки Цикл
		сВО_ОформитьГруппировкуРазделаОтчета(Группировка, ОбразецОформления, Поле, ЭтоРесурс);
	КонецЦикла;
КонецПроцедуры

Процедура сВО_ОформитьГруппировкуРазделаОтчета(Группировка, ОбразецОформления, Поле, ЭтоРесурс)
	Если ТипЗнч(Группировка) = Тип("ТаблицаКомпоновкиДанных") Тогда
		сВО_ОформитьГруппировкиРазделаОтчета(Группировка.Строки, ОбразецОформления, Поле, ЭтоРесурс);
	Иначе
		ОформлениеПрименимоКГруппировке = сВО_ОформлениеПрименимоКГруппировке(Группировка, Поле, ЭтоРесурс);

		Если ОформлениеПрименимоКГруппировке Тогда
			Оформление			= Группировка.УсловноеОформление;
			ЭлементОформления	= сВО_ЭлементОформленияГруппировкиОтчета(Группировка, Поле);

			Если ЭлементОформления = Неопределено Тогда
				ЭлементОформления = Оформление.Элементы.Добавить();
			Иначе
				сВО_СброситьОформлениеГруппировкиОтчета(ЭлементОформления, Ложь);
			КонецЕсли;

			ВариантыОтчетовКлиентСервер.О_ЗаполнитьСвойстваРекурсивно(Оформление, ЭлементОформления, ОбразецОформления);

			сВО_УстановитьОбластьОформленияГруппировкиОтчета(ЭлементОформления);
		КонецЕсли;

		сВО_ОформитьГруппировкиРазделаОтчета(Группировка.Структура, ОбразецОформления, Поле, ЭтоРесурс);
	КонецЕсли;
КонецПроцедуры

Функция сВО_ЭлементОформленияГруппировкиОтчета(Группировка, Поле)
	Оформление = Группировка.УсловноеОформление;

	Для Каждого ЭлементОформления Из Оформление.Элементы Цикл
		Для Каждого ПолеОформления Из ЭлементОформления.Поля.Элементы Цикл
			Если ПолеОформления.Поле = Поле Тогда
				Возврат ЭлементОформления;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат Неопределено;
КонецФункции

Функция сВО_ИдентификаторЭлементаОформленияГруппировкиОтчета(Группировка, Поле)
	ЭлементОформления = сВО_ЭлементОформленияГруппировкиОтчета(Группировка, Поле);

	Если ЭлементОформления <> Неопределено Тогда
		Возврат Группировка.УсловноеОформление.ПолучитьИдентификаторПоОбъекту(ЭлементОформления);
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

Функция сВО_УсловиеОформленияГруппировкиОтчета(Поле, Значение)
	Если Значение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Условие = Новый Структура;
	Условие.Вставить("ЛевоеЗначение",	Поле);
	Условие.Вставить("ВидСравнения",	сВО_ВидСравненияУсловияОформления(Значение));
	Условие.Вставить("ПравоеЗначение",	Значение);

	Возврат Условие;
КонецФункции

Процедура сВО_ПослеВыбораПоля(ВыбранноеПоле, ДополнительныеПараметры) Экспорт
	Если ВыбранноеПоле = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Форма = ДополнительныеПараметры.Форма;
	Поле = ?(ТипЗнч(ВыбранноеПоле) = Тип("ЭлементСпискаЗначений"), ВыбранноеПоле.Значение, ВыбранноеПоле);

	Если Поле = "Еще" Тогда
		сВО_ВыбратьПолеОтчета(Форма, ДополнительныеПараметры.Действие, ДополнительныеПараметры.ИмяКоллекции);

		Возврат;
	КонецЕсли;

	СвойстваЗаголовка	= ДополнительныеПараметры.СвойстваЗаголовка;

	КомпоновщикНастроек	= сВО_КомпоновщикНастроекОтчета(Форма);
	Настройки			= сВО_ИспользуемыеНастройки(Форма, СвойстваЗаголовка.ИдентификаторНастроек);
	Действие			= ДополнительныеПараметры.Действие;
	РолиПолей			= Форма.НастройкиОтчета.СвойстваРезультата.РолиПолей;

	Если СтрНачинаетсяС(Действие, "ВставитьПоле") Тогда
		сВО_ВставитьПоле(КомпоновщикНастроек, Настройки, Поле, Действие, СвойстваЗаголовка, РолиПолей);
	ИначеЕсли СтрНачинаетсяС(Действие, "ВставитьГруппировку") Тогда
		сВО_ВставитьГруппировку(Настройки, Действие, Поле, СвойстваЗаголовка);
	КонецЕсли;

	сВО_ОповеститьОЗавершенииКонтекстнойНастройки(Форма, Действие);
КонецПроцедуры

Процедура сВО_ВставитьПоле(КомпоновщикНастроек, Настройки, ВыбранноеПоле, Действие, СвойстваЗаголовка, РолиПолей)
	Раздел		= Настройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторРаздела);
	Группировка	= Настройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторГруппировки);

	сВО_ОбновитьПоляРаздела(КомпоновщикНастроек, Настройки, Раздел);

	сВО_ВставитьПолеВПоляГруппировки(Группировка.ПоляГруппировки, ВыбранноеПоле, СвойстваЗаголовка.Поле, Действие, РолиПолей);
	сВО_ВставитьПолеВГруппировкуРаздела(Группировка, ВыбранноеПоле, СвойстваЗаголовка.Поле, Действие, РолиПолей)
КонецПроцедуры

Процедура сВО_ВставитьПолеВПоляГруппировки(Поля, ВыбранноеПоле, ТекущееПоле, Действие, РолиПолей)
	Если ВыбранноеПоле.Ресурс Тогда
		Возврат;
	КонецЕсли;

	НайденноеТекущееПоле = ВариантыОтчетовКлиентСервер.сВО_ПолеОтчета(Поля, ТекущееПоле);

	Если НайденноеТекущееПоле = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущееПолеЯвляетсяПериодом		= (РолиПолей.Периоды[ТекущееПоле] <> Неопределено);
	ВыбранноеПолеЯвляетсяПериодом	= (РолиПолей.Периоды[ВыбранноеПоле.Поле] <> Неопределено);

	Если ТекущееПолеЯвляетсяПериодом И Не ВыбранноеПолеЯвляетсяПериодом Или Не ТекущееПолеЯвляетсяПериодом И ВыбранноеПолеЯвляетсяПериодом Тогда
		Возврат;
	КонецЕсли;

	ИндексПоля = Поля.Элементы.Индекс(НайденноеТекущееПоле);

	Если Действие = "ВставитьПолеСправа" Тогда
		ИндексПоля = ИндексПоля + 1;
	КонецЕсли;

	НайденноеПоле	= ВариантыОтчетовКлиентСервер.сВО_ПолеОтчета(Поля, ВыбранноеПоле.Поле);
	ВставляемоеПоле	= Неопределено;

	Если НайденноеПоле <> Неопределено Тогда
		Если Поля.Элементы.Индекс(НайденноеПоле) = ИндексПоля Тогда
			ВставляемоеПоле					= НайденноеПоле;
			ВставляемоеПоле.Использование	= Истина;
		Иначе
			Поля.Элементы.Удалить(НайденноеПоле);
		КонецЕсли;
	КонецЕсли;

	Если ВставляемоеПоле <> Неопределено Тогда
		Возврат;
	КонецЕсли;

	ВставляемоеПоле = Поля.Элементы.Вставить(ИндексПоля, Тип("ПолеГруппировкиКомпоновкиДанных"));
	ЗаполнитьЗначенияСвойств(ВставляемоеПоле, ВыбранноеПоле);
КонецПроцедуры

Процедура сВО_ВставитьПолеВГруппировкуРаздела(Группировка, ВыбранноеПоле, ТекущееПоле, Действие, РолиПолей)
	Если ТипЗнч(Группировка) <> Тип("ГруппировкаКомпоновкиДанных") И ТипЗнч(Группировка) <> Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;

	Поля					= Группировка.Выбор;
	НайденноеТекущееПоле	= ВариантыОтчетовКлиентСервер.сВО_ПолеОтчета(Поля, ТекущееПоле);

	Если НайденноеТекущееПоле = Неопределено Тогда
		ИндексПоля = 0;
	Иначе
		ИндексПоля = Поля.Элементы.Индекс(НайденноеТекущееПоле);

		Если Действие = "ВставитьПолеСправа" Тогда
			ИндексПоля = ИндексПоля + 1;
		КонецЕсли;
	КонецЕсли;

	НайденноеПоле	= ВариантыОтчетовКлиентСервер.сВО_ПолеОтчета(Поля, ВыбранноеПоле.Поле, Ложь);
	ВставляемоеПоле	= Неопределено;
	ЗаголовокПоля	= ВыбранноеПоле.Заголовок;

	Если НайденноеПоле <> Неопределено Тогда
		Если Поля.Элементы.Индекс(НайденноеПоле) = ИндексПоля Тогда
			ВставляемоеПоле					= НайденноеПоле;
			ВставляемоеПоле.Использование	= Истина;
		Иначе
			ЗаголовокПоля	= НайденноеПоле.Заголовок;
			Поля.Элементы.Удалить(НайденноеПоле);
			ИндексПоля		= ИндексПоля - 1;
		КонецЕсли;
	КонецЕсли;

	Если ВставляемоеПоле = Неопределено Тогда
		ВставляемоеПоле = Поля.Элементы.Вставить(ИндексПоля, Тип("ВыбранноеПолеКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(ВставляемоеПоле, ВыбранноеПоле);
		ВставляемоеПоле.Заголовок = ЗаголовокПоля;
	КонецЕсли;

	сВО_УстановитьВыводРеквизитовГруппировкиОтдельно(Группировка);

	сВО_ВставитьПолеВГруппировкиРаздела(Группировка, ВыбранноеПоле, ТекущееПоле, Действие, РолиПолей);
КонецПроцедуры

Процедура сВО_ВставитьПолеВГруппировкиРаздела(Родитель, ВыбранноеПоле, ТекущееПоле, Действие, РолиПолей)
	Если Не ВыбранноеПоле.Ресурс Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Родитель) = Тип("ТаблицаКомпоновкиДанных") Тогда
		Группировки = Родитель.Строки;
	Иначе
		Группировки = Родитель.Структура;
	КонецЕсли;

	Для Каждого Группировка Из Группировки Цикл
		сВО_ВставитьПолеВГруппировкуРаздела(Группировка, ВыбранноеПоле, ТекущееПоле, Действие, РолиПолей);
	КонецЦикла;
КонецПроцедуры

Процедура сВО_ВставитьГруппировку(Настройки, Действие, Поле, СвойстваЗаголовка)
	Раздел		= Настройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторРаздела);
	Группировка	= Настройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторГруппировки);

	КоллекцияГруппировок = сВО_КоллекцияГруппировокРаздела(Раздел, Группировка, СвойстваЗаголовка.ИдентификаторГруппировки, Действие);

	ПеремещаемыеГруппировки = Новый Массив;

	Для Каждого Элемент Из КоллекцияГруппировок.Группировки Цикл
		ПеремещаемыеГруппировки.Добавить(Элемент);
	КонецЦикла;

	Если ТипЗнч(КоллекцияГруппировок.Группировки) = Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") Тогда
		НоваяГруппировка = КоллекцияГруппировок.Группировки.Вставить(КоллекцияГруппировок.ИндексГруппировки, Тип("ГруппировкаКомпоновкиДанных")); // ГруппировкаКомпоновкиДанных
	Иначе
		НоваяГруппировка = КоллекцияГруппировок.Группировки.Вставить(КоллекцияГруппировок.ИндексГруппировки);
	КонецЕсли;

	НовоеПоле				= НоваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	НовоеПоле.Поле			= ?(ТипЗнч(Поле) = Тип("ПолеКомпоновкиДанных"), Поле, Поле.Поле);
	НовоеПоле.Использование	= Истина;

	НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	НоваяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));

	Для Каждого Группировка Из ПеремещаемыеГруппировки Цикл
		ПоискЭлементов = Новый Соответствие;
		ВариантыОтчетовКлиентСервер.О_СкопироватьРекурсивно(Настройки, Группировка, НоваяГруппировка.Структура, КоллекцияГруппировок.ИндексГруппировки, ПоискЭлементов);

		КоллекцияГруппировок.Группировки.Удалить(Группировка);
	КонецЦикла;
КонецПроцедуры

Функция сВО_КоллекцияГруппировокРаздела(Раздел, Группировка, ИдентификаторГруппировки, Действие)
	Коллекция = Новый Структура;
	Коллекция.Вставить("Группировки", Неопределено);
	Коллекция.Вставить("ИндексГруппировки", 0);

	Если Действие = "ВставитьГруппировкуНиже" Тогда
		Коллекция.Группировки = Группировка.Структура;

		Возврат Коллекция;
	КонецЕсли;

	Родитель = Группировка.Родитель; // ГруппировкаКомпоновкиДанных, ГруппировкаТаблицыКомпоновкиДанных

	Если Родитель <> Раздел Тогда
		Группировки					= Родитель.Структура; // КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных, КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных
		Коллекция.Группировки		= Группировки;
		Коллекция.ИндексГруппировки = Группировки.Индекс(Группировка);

		Возврат Коллекция;
	КонецЕсли;

	Если ТипЗнч(Раздел) = Тип("ТаблицаКомпоновкиДанных") Тогда
		Коллекция.Группировки = ?(СтрНайти(ИдентификаторГруппировки, "/row/") > 0, Раздел.Строки, Раздел.Колонки);
	Иначе
		Коллекция.Группировки = Раздел.Структура;
	КонецЕсли;

	Группировки					= Коллекция.Группировки; // КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных, КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных 
	Коллекция.ИндексГруппировки	= Группировки.Индекс(Группировка);

	Возврат Коллекция;
КонецФункции

Процедура сВО_ПоказатьРасширеннуюНастройкуФильтра(Форма, СвойстваЗаголовка) Экспорт
	НастройкиОтчета = Форма.НастройкиОтчета;

	Поле			= Форма.Элементы.ОтчетТабличныйДокумент; // ПолеТабличногоДокумента
	ТекущаяОбласть	= Поле.ТекущаяОбласть;

	Ячейка = Новый Структура("Текст, Расшифровка", "");

	Если ТекущаяОбласть.Верх <> СвойстваЗаголовка.Верх Или ТекущаяОбласть.Низ <> СвойстваЗаголовка.Низ Или ТекущаяОбласть.Лево <> СвойстваЗаголовка.Лево Или ТекущаяОбласть.Право <> СвойстваЗаголовка.Право Тогда
		ЗаполнитьЗначенияСвойств(Ячейка, ТекущаяОбласть);
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючТекущегоВарианта",	Форма.КлючТекущегоВарианта);
	ПараметрыФормы.Вставить("НастройкиОтчета",		НастройкиОтчета);
	ПараметрыФормы.Вставить("КомпоновщикНастроек",	сВО_КомпоновщикНастроекОтчета(Форма));
	ПараметрыФормы.Вставить("СвойстваЗаголовка",	СвойстваЗаголовка);
	ПараметрыФормы.Вставить("ДанныеРасшифровки",	Форма.ОтчетДанныеРасшифровки);
	ПараметрыФормы.Вставить("Ячейка",				Ячейка);

	ОткрытьФорму("ХранилищеНастроек.ХранилищеВариантовОтчетов.Форма.РасширеннаяНастройкаФильтраОтчета", ПараметрыФормы, Форма, Форма.УникальныйИдентификатор);
КонецПроцедуры

Процедура сВО_СнятьФильтр(Форма, СвойстваЗаголовка, ДанныеРасшифровки = Неопределено) Экспорт
	ЭтоГруппировка = (ДанныеРасшифровки <> Неопределено И ДанныеРасшифровки.Тип = "Группировка");

	Настройки = сВО_ИспользуемыеНастройки(Форма, СвойстваЗаголовка.ИдентификаторНастроек);

	Фильтры = ВариантыОтчетовКлиентСервер.сВО_ФильтрыРазделаОтчета(Настройки, СвойстваЗаголовка, ЭтоГруппировка);
	Фильтр = ВариантыОтчетовКлиентСервер.сВО_ФильтрРазделаОтчета(Фильтры, СвойстваЗаголовка.Поле);

	Если Фильтр = Неопределено Тогда
		Фильтры	= ВариантыОтчетовКлиентСервер.сВО_ФильтрыРазделаОтчета(Настройки, СвойстваЗаголовка, Не ЭтоГруппировка);
		Фильтр	= ВариантыОтчетовКлиентСервер.сВО_ФильтрРазделаОтчета(Фильтры, СвойстваЗаголовка.Поле);
	КонецЕсли;

	Если Фильтр = Неопределено Тогда
		ТекстПредупреждения = СтрШаблон("По полю ""%1"" отсутствуют фильтры", СвойстваЗаголовка.Текст);

		ПоказатьПредупреждение(, ТекстПредупреждения);

		Возврат;
	КонецЕсли;

	Фильтры.Элементы.Удалить(Фильтр);

	сВО_ОповеститьОЗавершенииКонтекстнойНастройки(Форма, "СнятьФильтр");
КонецПроцедуры

Процедура сВО_СброситьСортировку(Настройки, СвойстваЗаголовка, ЭлементыСтруктуры = Неопределено)
	Если ЭлементыСтруктуры = Неопределено Тогда
		сВО_УдалитьЭлементыСортировки(Настройки.Порядок.Элементы);

		Если СвойстваЗаголовка.КоличествоРазделов = 1 Тогда
			сВО_СброситьСортировку(Настройки, СвойстваЗаголовка, Настройки.Структура);
		Иначе
			Раздел = Настройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторРаздела);

			Если ТипЗнч(Раздел) = Тип("ГруппировкаКомпоновкиДанных") Тогда
				сВО_УдалитьЭлементыСортировки(Раздел.Порядок.Элементы);
				сВО_СброситьСортировку(Настройки, СвойстваЗаголовка, Раздел.Структура);
			ИначеЕсли ТипЗнч(Раздел) = Тип("ТаблицаКомпоновкиДанных") Тогда
				сВО_СброситьСортировку(Настройки, СвойстваЗаголовка, Раздел.Строки);
				сВО_СброситьСортировку(Настройки, СвойстваЗаголовка, Раздел.Колонки);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Для Каждого Элемент Из ЭлементыСтруктуры Цикл
			ТипЭлемента = ТипЗнч(Элемент);

			Если ТипЭлемента = Тип("ТаблицаКомпоновкиДанных") Тогда
				сВО_СброситьСортировку(Настройки, СвойстваЗаголовка, Элемент.Строки);
				сВО_СброситьСортировку(Настройки, СвойстваЗаголовка, Элемент.Колонки);
			ИначеЕсли ТипЭлемента = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
				сВО_СброситьСортировку(Настройки.Настройки, СвойстваЗаголовка);
			ИначеЕсли ТипЭлемента = Тип("ГруппировкаКомпоновкиДанных") Или ТипЭлемента = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
				сВО_УдалитьЭлементыСортировки(Элемент.Порядок.Элементы);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура сВО_УдалитьЭлементыСортировки(ЭлементыСортировки)
	Индекс = ЭлементыСортировки.Количество() - 1;

	Пока Индекс >= 0 Цикл
		Элемент = ЭлементыСортировки[Индекс];

		Если ТипЗнч(Элемент) <> Тип("АвтоЭлементПорядкаКомпоновкиДанных") Тогда
			ЭлементыСортировки.Удалить(Элемент);
		КонецЕсли;

		Индекс = Индекс - 1;
	КонецЦикла;
КонецПроцедуры

Функция сВО_ВидСравненияУсловияОформления(Значение)
	Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
		Возврат ВидСравненияКомпоновкиДанных.ВСписке;
	КонецЕсли;

	Возврат ВидСравненияКомпоновкиДанных.Равно;
КонецФункции

Функция сВО_ДействиеДоступно(Форма, Команда = Неопределено)
	СвойстваЗаголовка	= сВО_СвойстваЗаголовкаОтчета(Форма);
	ДействиеКоманды		= сВО_ДействиеКоманды(Команда);

	Если ТипЗнч(СвойстваЗаголовка) <> Тип("Структура") Или ДействиеКоманды <> Неопределено И Не СвойстваЗаголовка[ДействиеКоманды] Тогда
		ПоказатьПредупреждение(, "Действие недоступно");

		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
КонецФункции

Процедура сВО_ВыполнитьРасшифровку(ВыполненноеДействие, ПараметрВыполненногоДействия, ДополнительныеПараметры) Экспорт
	Если ВыполненноеДействие = Неопределено Или ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет Тогда
		Возврат;
	КонецЕсли;

	Форма			= ДополнительныеПараметры.Форма;
	Данные			= ДополнительныеПараметры.Данные;
	СвойстваОбласти	= ДополнительныеПараметры.СвойстваОбласти;
	Меню			= ДополнительныеПараметры.Меню;

	Если СвойстваОбласти.ЭтоЗаголовок Тогда
		СвойстваЗаголовка = СвойстваОбласти.СвойстваЗаголовка;

		Если ТипЗнч(ВыполненноеДействие) = Тип("Строка") И СвойстваЗаголовка.Свойство(ВыполненноеДействие) И Не СвойстваЗаголовка[ВыполненноеДействие] Тогда
			ТекстСообщения = СтрШаблон("Действие ""%1"" недоступно", Меню.НайтиПоЗначению(ВыполненноеДействие));

			ПоказатьПредупреждение(, ТекстСообщения);
		КонецЕсли;

		Если СтрНайти(СвойстваЗаголовка.ИдентификаторГруппировки, "/column/") = 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ТипЗнч(ВыполненноеДействие) = Тип("Строка") И ВыполненноеДействие = "СнятьФильтр" Тогда
		сВО_СнятьФильтр(Форма, СвойстваОбласти.СвойстваЗаголовка, Данные);

		Возврат;
	КонецЕсли;

	Если ТипЗнч(ВыполненноеДействие) = Тип("ВидСравненияКомпоновкиДанных") Или ТипЗнч(ВыполненноеДействие) = Тип("Строка") И СтрНачинаетсяС(ВыполненноеДействие, "Фильтровать") Тогда
		сВО_Фильтровать(Форма, ВыполненноеДействие, СвойстваОбласти.СвойстваЗаголовка, Данные);

		Возврат;
	КонецЕсли;

	Если ТипЗнч(ВыполненноеДействие) = Тип("НаправлениеСортировкиКомпоновкиДанных") Тогда
		Если ВыполненноеДействие = НаправлениеСортировкиКомпоновкиДанных.Возр Тогда
			Команда = Форма.Команды.Найти("СортироватьПоВозрастанию");
		Иначе
			Команда = Форма.Команды.Найти("СортироватьПоУбыванию");
		КонецЕсли;

		сВО_Сортировать(Форма, Команда, СвойстваОбласти.СвойстваЗаголовка);

		Возврат;
	КонецЕсли;

	Если ТипЗнч(ВыполненноеДействие) = Тип("Строка") И (ВыполненноеДействие = "ОформитьКрасным" Или ВыполненноеДействие = "ОформитьЖелтым" Или ВыполненноеДействие = "ОформитьЗеленым" Или ВыполненноеДействие = "ОформитьОтрицательные" Или ВыполненноеДействие = "ОформитьПоложительные" Или ВыполненноеДействие = "УстановитьВысотуСтроки" Или ВыполненноеДействие = "УстановитьШиринуКолонки" Или ВыполненноеДействие = "ОформитьЕще") Тогда
		Команда = Форма.Команды.Найти(ВыполненноеДействие);

		Если ВыполненноеДействие = "ОформитьКрасным" Или ВыполненноеДействие = "ОформитьОтрицательные" Тогда
			сВО_ОформитьКрасным(Форма, Команда, СвойстваОбласти.СвойстваЗаголовка, Данные.Значения);
		ИначеЕсли ВыполненноеДействие = "ОформитьЖелтым" Тогда
			сВО_ОформитьЖелтым(Форма, Команда, СвойстваОбласти.СвойстваЗаголовка, Данные.Значения);
		ИначеЕсли ВыполненноеДействие = "ОформитьЗеленым" Или ВыполненноеДействие = "ОформитьПоложительные" Тогда
			сВО_ОформитьЗеленым(Форма, Команда, СвойстваОбласти.СвойстваЗаголовка, Данные.Значения);
		ИначеЕсли ВыполненноеДействие = "УстановитьВысотуСтроки" Тогда
			сВО_УстановитьВысотуСтроки(Форма, Команда, СвойстваОбласти.СвойстваЗаголовка);
		ИначеЕсли ВыполненноеДействие = "УстановитьШиринуКолонки" Тогда
			сВО_УстановитьШиринуКолонки(Форма, Команда, СвойстваОбласти.СвойстваЗаголовка);
		ИначеЕсли ВыполненноеДействие = "ОформитьЕще" Тогда
			сВО_ОформитьЕще(Форма, Команда, СвойстваОбласти.СвойстваЗаголовка, Данные.Значения);
		КонецЕсли;

		Возврат;
	КонецЕсли;

	Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
		ПоказатьЗначение(, Данные.Значение);

		Возврат;
	КонецЕсли;

	Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать Тогда
		ДополнительныеПараметры.Вставить("Настройки", ПараметрВыполненногоДействия);

		сВО_ОткрытьФормуОтчета(Форма, ДополнительныеПараметры);
	КонецЕсли;
КонецПроцедуры

Процедура сВО_ОткрытьФормуОтчета(Форма, ПараметрыОткрытия)
	НастройкиОтчета	= Форма.НастройкиОтчета;
	Расшифровка		= ПараметрыОткрытия.Расшифровка;

	СтандартнаяОбработка = Истина;

	Если СтандартнаяОбработка Тогда
		Расшифровка = Новый ОписаниеОбработкиРасшифровкиКомпоновкиДанных(Форма.ОтчетДанныеРасшифровки, ПараметрыОткрытия.Расшифровка, ПараметрыОткрытия.Настройки); 

		ПредставлениеВарианта = СтрШаблон("%1 (Расшифровка)", Форма.ПредставлениеТекущегоВарианта);

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Расшифровка",				Расшифровка);
		ПараметрыФормы.Вставить("СформироватьПриОткрытии",	Истина);
		ПараметрыФормы.Вставить("ПредставлениеВарианта",	ПредставлениеВарианта);
		ПараметрыФормы.Вставить("НастройкиОтчета",			НастройкиОтчета);

		ОткрытьФорму(НастройкиОтчета.ПолноеИмя + ".Форма", ПараметрыФормы, Форма, Форма.УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

Процедура сВО_ПриАктивизацииРезультатаОтчета(Форма, Элемент) Экспорт
	Область = Элемент.ТекущаяОбласть; // ОбластьЯчеекТабличногоДокумента

	Если ТипЗнч(Область) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		Возврат;
	КонецЕсли;

	НастройкиОтчета		= Форма.НастройкиОтчета;
	СвойстваРезультата	= НастройкиОтчета.СвойстваРезультата;
	Элементы			= Форма.Элементы;

	Заголовки			= СвойстваРезультата.Заголовки[Область.Имя];

	Элементы.КонтекстноеМенюОбластиЗаголовка.Видимость = (ТипЗнч(Заголовки) = Тип("Структура")) И ТипЗнч(Заголовки.Поле) = Тип("ПолеКомпоновкиДанных");

	Элементы.КонтекстноеМенюОбластиДанных.Видимость = Не Элементы.КонтекстноеМенюОбластиЗаголовка.Видимость И Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТипЗнч(Область.Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных");

	ВариантыОтчетовКлиентСервер.сВО_ОпределитьДоступностьДействийКонтекстногоМеню(Форма, Заголовки);
КонецПроцедуры

Функция сВО_ЭтоСобытиеКонтекстнойНастройки(Событие) Экспорт
	События = сВО_СобытияКонтекстнойНастройки();

	Возврат События[Событие] = Истина;
КонецФункции

Функция сВО_СобытияКонтекстнойНастройки()
	События = Новый Соответствие;
	События.Вставить("ВставитьПолеСправа",			Истина);
	События.Вставить("ВставитьПолеСправа",			Истина);
	События.Вставить("ВставитьГруппировкуВыше",		Истина);
	События.Вставить("ВставитьГруппировкуНиже",		Истина);

	События.Вставить("ПереместитьПолеВлево",		Истина);
	События.Вставить("ПереместитьПолеВправо",		Истина);
	События.Вставить("ПереместитьПолеВыше",			Истина);
	События.Вставить("ПереместитьПолеНиже",			Истина);

	События.Вставить("СкрытьПоле",					Истина);
	События.Вставить("ПереименоватьПоле",			Истина);

	События.Вставить("СнятьФильтр",					Истина);
	События.Вставить("Фильтровать",					Истина);
	События.Вставить("ФильтроватьИСформировать",	Истина);

	События.Вставить("СортироватьПоВозрастанию",	Истина);
	События.Вставить("СортироватьПоУбыванию",		Истина);

	События.Вставить("ОформитьКрасным",				Истина);
	События.Вставить("ОформитьЖелтым",				Истина);
	События.Вставить("ОформитьЗеленым",				Истина);

	События.Вставить("ОформитьОтрицательные",		Истина);
	События.Вставить("ОформитьПоложительные",		Истина);

	События.Вставить("УстановитьВысотуСтроки",		Истина);
	События.Вставить("УстановитьШиринуКолонки",		Истина);

	События.Вставить("ОформитьЕще",					Истина);

	Возврат События;
КонецФункции

#КонецОбласти

#Область ОтчетыКлиент

Процедура О_СформироватьОтчет(ФормаОтчета, ОбработчикЗавершения = Неопределено) Экспорт
	Если ТипЗнч(ОбработчикЗавершения) = Тип("ОписаниеОповещения") Тогда
		ФормаОтчета.ОбработчикПослеФормированияНаКлиенте = ОбработчикЗавершения;
	КонецЕсли;
	ФормаОтчета.ПодключитьОбработчикОжидания("Сформировать", 0.1, Истина);
КонецПроцедуры

Функция О_ЗначениеТипаИспользованиеГруппИЭлементов(ИсходноеЗначение, Условие = Неопределено) Экспорт
	Если Условие <> Неопределено Тогда
		Если Условие = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Или Условие = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
			Если ИсходноеЗначение = ГруппыИЭлементы.Группы Или ИсходноеЗначение = ИспользованиеГруппИЭлементов.Группы Тогда
				Возврат ИспользованиеГруппИЭлементов.Группы;
			Иначе
				Возврат ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
			КонецЕсли;
		ИначеЕсли Условие = ВидСравненияКомпоновкиДанных.ВИерархии Или Условие = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
			Возврат ИспользованиеГруппИЭлементов.Группы;
		КонецЕсли;
	КонецЕсли;

	Если ТипЗнч(ИсходноеЗначение) = Тип("ИспользованиеГруппИЭлементов") Тогда
		Возврат ИсходноеЗначение;
	ИначеЕсли ИсходноеЗначение = ГруппыИЭлементы.Элементы Тогда
		Возврат ИспользованиеГруппИЭлементов.Элементы;
	ИначеЕсли ИсходноеЗначение = ГруппыИЭлементы.ГруппыИЭлементы Тогда
		Возврат ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
	ИначеЕсли ИсходноеЗначение = ГруппыИЭлементы.Группы Тогда
		Возврат ИспользованиеГруппИЭлементов.Группы;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

Процедура О_КэшироватьЗначениеОтбора(КомпоновщикНастроек, ЭлементОтбора, ЗначениеОтбора) Экспорт
	ДополнительныеСвойства = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;

	КэшЗначенийОтборов = БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(ДополнительныеСвойства, "КэшЗначенийОтборов", Новый Соответствие);

	ЭлементОтбораОсновныхНастроек = Неопределено;

	Если ЗначениеЗаполнено(ЭлементОтбора.ИдентификаторПользовательскойНастройки) Тогда
		КэшЗначенийОтборов.Вставить(ЭлементОтбора.ИдентификаторПользовательскойНастройки, ЗначениеОтбора);

		НайденныеЭлементыНастроек = КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьОсновныеНастройкиПоИдентификаторуПользовательскойНастройки(ЭлементОтбора.ИдентификаторПользовательскойНастройки);

		Если НайденныеЭлементыНастроек.Количество() > 0 Тогда
			ЭлементОтбораОсновныхНастроек = НайденныеЭлементыНастроек[0];
		КонецЕсли;
	Иначе
		ЭлементОтбораОсновныхНастроек = ЭлементОтбора;
	КонецЕсли;

	Если ТипЗнч(ЭлементОтбораОсновныхНастроек) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		КэшЗначенийОтборов.Вставить(ЭлементОтбораОсновныхНастроек.ЛевоеЗначение, ЗначениеОтбора);
	КонецЕсли;

	ДополнительныеСвойства.Вставить("КэшЗначенийОтборов", КэшЗначенийОтборов);
КонецПроцедуры

Функция О_ПолныйПутьКЭлементуНастроек(Знач Настройки, Знач ЭлементНастроек) Экспорт
	Результат					= Новый Массив;
	РодительЭлементаНастроек	= ЭлементНастроек;

	Пока РодительЭлементаНастроек <> Неопределено И РодительЭлементаНастроек <> Настройки Цикл
		ЭлементНастроек				= РодительЭлементаНастроек;
		РодительЭлементаНастроек	= РодительЭлементаНастроек.Родитель;
		ТипРодителя					= ТипЗнч(РодительЭлементаНастроек);

		Если ТипРодителя = Тип("ТаблицаКомпоновкиДанных") Тогда
			СтрокиТаблицы = РодительЭлементаНастроек.Строки; // КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных
			Индекс = СтрокиТаблицы.Индекс(ЭлементНастроек);
			Если Индекс = -1 Тогда
				КолонкиТаблицы	= РодительЭлементаНастроек.Колонки; // КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных
				Индекс			= КолонкиТаблицы.Индекс(ЭлементНастроек);
				ИмяКоллекции	= "Колонки";
			Иначе
				ИмяКоллекции	= "Строки";
			КонецЕсли;
		ИначеЕсли ТипРодителя = Тип("ДиаграммаКомпоновкиДанных") Тогда
			СерииДиаграммы	= РодительЭлементаНастроек.Серии; // КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных
			Индекс			= СерииДиаграммы.Индекс(ЭлементНастроек);
			Если Индекс = -1 Тогда
				ТочкиДиаграммы	= РодительЭлементаНастроек.Точки; // КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных
				Индекс			= ТочкиДиаграммы.Индекс(ЭлементНастроек);
				ИмяКоллекции	= "Точки";
			Иначе
				ИмяКоллекции	= "Серии";
			КонецЕсли;
		ИначеЕсли ТипРодителя = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
			ИмяКоллекции	= "Настройки";
			Индекс			= Неопределено;
		Иначе
			ИмяКоллекции	= "Структура";
			Индекс			= РодительЭлементаНастроек.Структура.Индекс(ЭлементНастроек);
		КонецЕсли;

		Если Индекс = -1 Тогда
			Возврат Неопределено;
		КонецЕсли;

		Если Индекс <> Неопределено Тогда
			Результат.Вставить(0, Индекс);
		КонецЕсли;

		Результат.Вставить(0, ИмяКоллекции);
	КонецЦикла;

	Возврат СтрСоединить(Результат, "/");
КонецФункции

Процедура О_ВыбратьПериод(Форма, ИмяКоманды) Экспорт
	Путь		= СтрЗаменить(ИмяКоманды, "ВыбратьПериод", "Период");
	Значение	= Форма[Путь];

	Контекст	= Новый Структура("Форма, Путь", Форма, Путь);
	Обработчик	= Новый ОписаниеОповещения("О_ВыбратьПериодЗавершение", ЭтотОбъект, Контекст);

	СтандартнаяОбработка = Истина;
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;

	Диалог			= Новый ДиалогРедактированияСтандартногоПериода;
	Диалог.Период	= Значение;
	Диалог.Показать(Обработчик);
КонецПроцедуры

Процедура О_ВыбратьПериодЗавершение(ВыбранныйПериод, Контекст) Экспорт
	Если ВыбранныйПериод = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Контекст.Форма[Контекст.Путь] = ВыбранныйПериод;
	О_УстановитьПериод(Контекст.Форма, Контекст.Путь);

	ВариантыОтчетовКлиентСервер.О_ОповеститьОИзмененииНастроек(Контекст.Форма);
КонецПроцедуры

Процедура О_УстановитьПериод(Форма, Знач Путь) Экспорт
	КомпоновщикНастроек = Форма.Отчет.КомпоновщикНастроек;

	Свойства = СтрРазделить("ДатаНачала, ДатаОкончания", ", ", Ложь);
	Для Каждого Свойство Из Свойства Цикл
		Путь = СтрЗаменить(Путь, Свойство, "");
	КонецЦикла;

	Индекс = Форма.ПутьКДаннымЭлементов.ПоИмени[Путь];
	Если Индекс = Неопределено Тогда
		Путь	= Путь + "Период";
		Индекс	= Форма.ПутьКДаннымЭлементов.ПоИмени[Путь];
	КонецЕсли;

	ЭлементПользовательскойНастройки				= КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[Индекс];
	ЭлементПользовательскойНастройки.Использование	= Истина;

	Если ТипЗнч(ЭлементПользовательскойНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ЭлементПользовательскойНастройки.Значение = Форма[Путь];
	Иначе // Элемент отбора.
		ЭлементПользовательскойНастройки.ПравоеЗначение = Форма[Путь];
	КонецЕсли;

	ВариантыОтчетовКлиентСервер.О_ОповеститьОИзмененииНастроек(Форма);
КонецПроцедуры

Функция О_ТипЗначенияОграниченныйСвязьюПоТипу(Настройки, ПользовательскиеНастройки, ЭлементНастройки, ОписаниеЭлементаНастройки, ТипЗначения = Неопределено) Экспорт
	Если ОписаниеЭлементаНастройки = Неопределено Тогда
		Возврат ?(ТипЗначения = Неопределено, Новый ОписаниеТипов("Неопределено"), ТипЗначения);
	КонецЕсли;

	Если ТипЗначения = Неопределено Тогда
		ТипЗначения = ОписаниеЭлементаНастройки.ТипЗначения;
	КонецЕсли;

	СвязьПоТипу = ОписаниеЭлементаНастройки.СвязьПоТипу;

	СвязанныйЭлементНастройки = О_ЭлементНастройкиПоПолю(Настройки, ПользовательскиеНастройки, СвязьПоТипу.Поле);
	Если СвязанныйЭлементНастройки = Неопределено Тогда
		Возврат ТипЗначения;
	КонецЕсли;

	ДопустимыеВидыСравнения = Новый Массив;
	ДопустимыеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.Равно);
	ДопустимыеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.ВИерархии);

	Если ТипЗнч(СвязанныйЭлементНастройки) = Тип("ЭлементОтбораКомпоновкиДанных")
		И (Не СвязанныйЭлементНастройки.Использование
		Или ДопустимыеВидыСравнения.Найти(СвязанныйЭлементНастройки.ВидСравнения) = Неопределено) Тогда
		Возврат ТипЗначения;
	КонецЕсли;

	ОписаниеСвязанногоЭлементаНастройки = ВариантыОтчетовКлиентСервер.О_НайтиДоступнуюНастройку(Настройки, СвязанныйЭлементНастройки);
	Если ОписаниеСвязанногоЭлементаНастройки = Неопределено Тогда
		Возврат ТипЗначения;
	КонецЕсли;

	Если ТипЗнч(СвязанныйЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И (ОписаниеСвязанногоЭлементаНастройки.Использование <> ИспользованиеПараметраКомпоновкиДанных.Всегда Или Не СвязанныйЭлементНастройки.Использование) Тогда
		Возврат ТипЗначения;
	КонецЕсли;

	Если ТипЗнч(СвязанныйЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ЗначениеСвязанногоЭлементаНастройки = СвязанныйЭлементНастройки.Значение;
	ИначеЕсли ТипЗнч(СвязанныйЭлементНастройки) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		ЗначениеСвязанногоЭлементаНастройки = СвязанныйЭлементНастройки.ПравоеЗначение;
	КонецЕсли;

	ТипСубконто = ВариантыОтчетовВызовСервера.ВО_ТипСубконто(ЗначениеСвязанногоЭлементаНастройки, СвязьПоТипу.ЭлементСвязи);
	Если ТипЗнч(ТипСубконто) = Тип("ОписаниеТипов") Тогда
		СвязанныеТипы = ТипСубконто.Типы();
	Иначе
		СвязанныеТипы = ОписаниеСвязанногоЭлементаНастройки.ТипЗначения.Типы();
	КонецЕсли;

	ВычитаемыеТипы	= ТипЗначения.Типы();
	Индекс			= ВычитаемыеТипы.ВГраница();
	Пока Индекс >= 0 Цикл
		Если СвязанныеТипы.Найти(ВычитаемыеТипы[Индекс]) <> Неопределено Тогда
			ВычитаемыеТипы.Удалить(Индекс);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;

	Возврат Новый ОписаниеТипов(ТипЗначения,, ВычитаемыеТипы);
КонецФункции

Функция О_ЭлементНастройкиПоПолю(Настройки, ПользовательскиеНастройки, Поле)
	ЭлементНастройки = О_ЭлементПараметровДанныхПоПолю(Настройки, ПользовательскиеНастройки, Поле);

	Если ЭлементНастройки = Неопределено Тогда
		О_НайтиЭлементОтбораПоПолю(Поле, Настройки.Отбор.Элементы, ПользовательскиеНастройки, ЭлементНастройки);
	КонецЕсли;

	Возврат ЭлементНастройки;
КонецФункции

Функция О_ЭлементПараметровДанныхПоПолю(Настройки, ПользовательскиеНастройки, Поле)
	Если ТипЗнч(Настройки) <> Тип("НастройкиКомпоновкиДанных") Тогда
		Возврат Неопределено;
	КонецЕсли;

	ЭлементыНастроек = Настройки.ПараметрыДанных.Элементы;
	Для Каждого Элемент Из ЭлементыНастроек Цикл
		ЭлементПользовательский	= ПользовательскиеНастройки.Найти(Элемент.ИдентификаторПользовательскойНастройки);
		ЭлементАнализируемый	= ?(ЭлементПользовательский = Неопределено, Элемент, ЭлементПользовательский);

		Поля = Новый Массив;
		Поля.Добавить(Новый ПолеКомпоновкиДанных(Строка(Элемент.Параметр)));
		Поля.Добавить(Новый ПолеКомпоновкиДанных("ПараметрыДанных." + Строка(Элемент.Параметр)));

		Если ЭлементАнализируемый.Использование И (Поля[0] = Поле Или Поля[1] = Поле) Тогда
			Возврат ЭлементАнализируемый;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;
КонецФункции

Процедура О_НайтиЭлементОтбораПоПолю(Поле, ЭлементыОтбора, ПользовательскиеНастройки, ЭлементНастройки)
	Для Каждого Элемент Из ЭлементыОтбора Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			О_НайтиЭлементОтбораПоПолю(Поле, Элемент.Элементы, ПользовательскиеНастройки, ЭлементНастройки)
		Иначе
			ЭлементПользовательский	= ПользовательскиеНастройки.Найти(Элемент.ИдентификаторПользовательскойНастройки);
			ЭлементАнализируемый	= ?(ЭлементПользовательский = Неопределено, Элемент, ЭлементПользовательский);

			Если ЭлементАнализируемый.Использование И Элемент.ЛевоеЗначение = Поле Тогда
				ЭлементНастройки = ЭлементАнализируемый;

				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция О_СведенияОЭлементеНастройки(КомпоновщикНастроек, Идентификатор) Экспорт
	Настройки					= КомпоновщикНастроек.Настройки;
	ПользовательскиеНастройки	= КомпоновщикНастроек.ПользовательскиеНастройки;

	Если ТипЗнч(Идентификатор) = Тип("Число") Тогда
		Индекс = Идентификатор;
	Иначе
		Индекс = ВариантыОтчетовКлиентСервер.О_ИндексЭлементаНастройкиПоПути(Идентификатор);
	КонецЕсли;

	ЭлементПользовательскойНастройки = ПользовательскиеНастройки.Элементы[Индекс];

	ИерархияНастроек	= Новый Массив;
	Элемент				= ВариантыОтчетовКлиентСервер.О_ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки, ЭлементПользовательскойНастройки.ИдентификаторПользовательскойНастройки, ИерархияНастроек, ПользовательскиеНастройки);

	Настройки	= ?(ИерархияНастроек.Количество() > 0, ИерархияНастроек[ИерархияНастроек.ВГраница()], Настройки);
	Описание	= ВариантыОтчетовКлиентСервер.О_НайтиДоступнуюНастройку(Настройки, Элемент);

	Сведения = Новый Структура;
	Сведения.Вставить("Настройки",							Настройки);
	Сведения.Вставить("Индекс",								Индекс);
	Сведения.Вставить("ЭлементПользовательскойНастройки",	ЭлементПользовательскойНастройки);
	Сведения.Вставить("Элемент",							Элемент);
	Сведения.Вставить("Описание",							Описание);

	Возврат Сведения;
КонецФункции

Функция О_ЭтоВыборОбъектовМетаданных(ДоступныеТипы, Знач ОтмеченныеЗначения, Обработчик) Экспорт
	СоставТипов = ДоступныеТипы.Типы();

	Индекс = СоставТипов.ВГраница();
	Пока Индекс >= 0 Цикл
		Если СоставТипов.Найти(Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных")) <> Неопределено Или СоставТипов.Найти(Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений")) <> Неопределено Тогда
			СоставТипов.Удалить(Индекс);
		КонецЕсли;

		Индекс = Индекс - 1;
	КонецЦикла;

	ЭтоВыборОбъектовМетаданных = (СоставТипов.Количество() = 0);

	Если ЭтоВыборОбъектовМетаданных Тогда
		О_ПроверитьОтмеченныеЗначения(ОтмеченныеЗначения);

		ПараметрыПодбора = Новый Структура;
		ПараметрыПодбора.Вставить("ВыбранныеОбъектыМетаданных",	ОтмеченныеЗначения);
		ПараметрыПодбора.Вставить("ВыбиратьСсылки",				Истина);
		ПараметрыПодбора.Вставить("Заголовок",					"Подбор таблиц");

		ОткрытьФорму("ОбщаяФорма.ВыборОбъектовМетаданных", ПараметрыПодбора,,,,, Обработчик);
	КонецЕсли;

	Возврат ЭтоВыборОбъектовМетаданных;
КонецФункции

Функция О_ЭтоВыборПользователей(ДоступныеТипы, Знач ОтмеченныеЗначения, ПараметрыВыбора, Обработчик) Экспорт
	КоличествоТипов = ДоступныеТипы.Типы().Количество();

	ЭтоВыборПользователей = КоличествоТипов = 1 И ДоступныеТипы.СодержитТип(Тип("СправочникСсылка.Пользователи")) Или КоличествоТипов = 2 И ДоступныеТипы.СодержитТип(Тип("СправочникСсылка.Пользователи")) И ДоступныеТипы.СодержитТип(Тип("СправочникСсылка.ГруппыПользователей"));

	Если ЭтоВыборПользователей Тогда
		О_ПроверитьОтмеченныеЗначения(ОтмеченныеЗначения);
		О_ВыбратьПользователей(ДоступныеТипы, ОтмеченныеЗначения, ПараметрыВыбора, Обработчик);
	КонецЕсли;

	Возврат ЭтоВыборПользователей;
КонецФункции

Процедура О_ПроверитьОтмеченныеЗначения(ОтмеченныеЗначения)
	Индекс = ОтмеченныеЗначения.Количество() - 1;

	Пока Индекс >= 0 Цикл
		Элемент	= ОтмеченныеЗначения[Индекс];
		Индекс	= Индекс - 1;

		Если Не ЗначениеЗаполнено(Элемент.Значение) Тогда
			ОтмеченныеЗначения.Удалить(Элемент);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура О_ВыбратьПользователей(ДоступныеТипы, ОтмеченныеЗначения, ПараметрыВыбора, Обработчик)
	ВыборГруппПользователей = ДоступныеТипы.СодержитТип(Тип("СправочникСсылка.ГруппыПользователей"));
	ВыбранныеПользователи = ОтмеченныеЗначения.ВыгрузитьЗначения();

	Если ДоступныеТипы.СодержитТип(Тип("СправочникСсылка.ГруппыПользователей")) Тогда
		ЗаголовокФормыПодбора = "Подбор групп и пользователей";
	Иначе
		ЗаголовокФормыПодбора = "Подбор пользователей";
	КонецЕсли;

	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("РежимВыбора",				Истина);
	ПараметрыПодбора.Вставить("ЗакрыватьПриВыборе",			Ложь);
	ПараметрыПодбора.Вставить("МножественныйВыбор",			Истина);
	ПараметрыПодбора.Вставить("РасширенныйПодбор",			Истина);
	ПараметрыПодбора.Вставить("ВыборГруппПользователей",	ВыборГруппПользователей);
	ПараметрыПодбора.Вставить("ПараметрыВыбора",			ПараметрыВыбора);
	ПараметрыПодбора.Вставить("ЗаголовокФормыПодбора",		ЗаголовокФормыПодбора);
	ПараметрыПодбора.Вставить("ВыбранныеПользователи",		ВыбранныеПользователи);

	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыПодбора, ЭтотОбъект,,,, Обработчик);
КонецПроцедуры

Функция О_ПриДобавленииВКоллекциюНужноУказыватьТипЭлемента(ТипКоллекции) Экспорт
	Возврат ТипКоллекции <> Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных")
		И ТипКоллекции <> Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных")
		И ТипКоллекции <> Тип("КоллекцияЭлементовУсловногоОформленияКомпоновкиДанных");
КонецФункции

Функция О_КэшЗначенияОтбора(КомпоновщикНастроек, ЭлементОтбора) Экспорт
	ЗначениеОтбора = Неопределено;

	ДополнительныеСвойства = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;

	КэшЗначенийОтборов = БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(ДополнительныеСвойства, "КэшЗначенийОтборов", Новый Соответствие);

	Если ЗначениеЗаполнено(ЭлементОтбора.ИдентификаторПользовательскойНастройки) Тогда
		ЗначениеОтбора = КэшЗначенийОтборов[ЭлементОтбора.ИдентификаторПользовательскойНастройки];
	КонецЕсли;

	Если ЗначениеОтбора <> Неопределено Тогда
		Возврат ЗначениеОтбора;
	КонецЕсли;

	ЭлементОтбораОсновныхНастроек = Неопределено;

	Если ЗначениеЗаполнено(ЭлементОтбора.ИдентификаторПользовательскойНастройки) Тогда
		НайденныеЭлементыНастроек = КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьОсновныеНастройкиПоИдентификаторуПользовательскойНастройки(ЭлементОтбора.ИдентификаторПользовательскойНастройки);

		Если НайденныеЭлементыНастроек.Количество() > 0 Тогда
			ЭлементОтбораОсновныхНастроек = НайденныеЭлементыНастроек[0];
		КонецЕсли;
	Иначе
		ЭлементОтбораОсновныхНастроек = ЭлементОтбора;
	КонецЕсли;

	Если ТипЗнч(ЭлементОтбораОсновныхНастроек) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		ЗначениеОтбора = КэшЗначенийОтборов[ЭлементОтбораОсновныхНастроек.ЛевоеЗначение];
	КонецЕсли;

	Возврат ЗначениеОтбора;
КонецФункции

#КонецОбласти

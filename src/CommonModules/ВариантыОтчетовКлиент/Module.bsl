///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ВариантыОтчетов

Процедура ПриНачалеРаботыСистемы(Параметры) Экспорт
	Если Не СистемаВзаимодействия.ИспользованиеДоступно() Тогда
		Возврат;
	КонецЕсли;

	Обработчик	= Новый ОписаниеОповещения("ВО_ОбработатьДействияСообщения", ВариантыОтчетовКлиент);
	СистемаВзаимодействия.ПодключитьОбработчикДействияСообщения(Обработчик);
КонецПроцедуры

Процедура ВО_ОткрытьФормуОтчета(Знач ФормаВладелец, Знач Вариант, Знач ДополнительныеПараметры = Неопределено) Экспорт
	Тип	= ТипЗнч(Вариант);
	Если Тип = Тип("Структура") Тогда
		ПараметрыОткрытия = Вариант;
	ИначеЕсли Тип = Тип("СправочникСсылка.ВариантыОтчетов")  Или Тип = Неопределено Тогда
		// зарезервировано для новых подсистем

		ПараметрыОткрытия = Новый Структура("Ключ", Вариант);
		Если ДополнительныеПараметры <> Неопределено Тогда
			БазоваяПодсистемаКлиентСервер.ОН_ДополнитьСтруктуру(ПараметрыОткрытия, ДополнительныеПараметры, Истина);
		КонецЕсли;
		ОткрытьФорму("Справочник.ВариантыОтчетов.ФормаОбъекта", ПараметрыОткрытия, Неопределено, Истина);

		Возврат;
	Иначе
		ПараметрыОткрытия = Новый Структура("Ссылка, Отчет, ТипОтчета, ПолноеИмяОтчета, ИмяОтчета, КлючВарианта, КлючЗамеров");
		Если ТипЗнч(ФормаВладелец) = Тип("ФормаКлиентскогоПриложения") Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, ФормаВладелец);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, Вариант);
	КонецЕсли;

	Если ДополнительныеПараметры <> Неопределено Тогда
		БазоваяПодсистемаКлиентСервер.ОН_ДополнитьСтруктуру(ПараметрыОткрытия, ДополнительныеПараметры, Истина);
	КонецЕсли;

	ВариантыОтчетовКлиентСервер.ВО_ДополнитьСтруктуруКлючом(ПараметрыОткрытия, "ВыполнятьЗамеры", Ложь);

	ПараметрыОткрытия.ТипОтчета = ВариантыОтчетовКлиентСервер.ВО_ТипОтчетаСтрокой(ПараметрыОткрытия.ТипОтчета, ПараметрыОткрытия.Отчет);
	Если Не ЗначениеЗаполнено(ПараметрыОткрытия.ТипОтчета) Тогда
		ВызватьИсключение СтрШаблон("Не определен тип отчета в %1", "ВариантыОтчетовКлиент.ОткрытьФормуОтчета");
	КонецЕсли;

	Если ПараметрыОткрытия.ТипОтчета = "Внутренний" Или ПараметрыОткрытия.ТипОтчета = "Расширение" Тогда
		Вид = "Отчет";
		КлючЗамеров = БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(ПараметрыОткрытия, "КлючЗамеров");
		Если ЗначениеЗаполнено(КлючЗамеров) Тогда
			ПараметрыКлиента = БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(БазоваяПодсистемаКлиентПовтИсп.СП_ПараметрыРаботыКлиентаПриЗапуске(),"ВариантыОтчетов");
			Если ПараметрыКлиента.ВыполнятьЗамеры Тогда
				ПараметрыОткрытия.ВыполнятьЗамеры = Истина;
				ПараметрыОткрытия.Вставить("ИмяОперации", КлючЗамеров + ".Открытие");
				ПараметрыОткрытия.Вставить("КомментарийОперации", ПараметрыКлиента.ПрефиксЗамеров);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ПараметрыОткрытия.ТипОтчета = "Дополнительный" Тогда
		Вид = "ВнешнийОтчет";
		Если Не ПараметрыОткрытия.Свойство("Подключен") Тогда
			ВариантыОтчетовВызовСервера.ВО_ПриПодключенииОтчета(ПараметрыОткрытия);
		КонецЕсли;
		Если Не ПараметрыОткрытия.Подключен Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(, "Вариант внешнего отчета можно открыть только из формы отчета.");
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ПараметрыОткрытия.ИмяОтчета) Тогда
		ВызватьИсключение СтрШаблон("Не определено имя отчета в %1", "ВариантыОтчетовКлиент.ОткрытьФормуОтчета");
	КонецЕсли;

	ПолноеИмяОтчета = БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(ПараметрыОткрытия, "ПолноеИмяОтчета");

	Если Не ЗначениеЗаполнено(ПолноеИмяОтчета) Тогда
		ПолноеИмяОтчета = Вид + "." + ПараметрыОткрытия.ИмяОтчета;
	КонецЕсли;

	КлючУникальности = ВариантыОтчетовКлиентСервер.О_КлючУникальности(ПолноеИмяОтчета, ПараметрыОткрытия.КлючВарианта);
	ПараметрыОткрытия.Вставить("КлючПараметровПечати",        КлючУникальности);
	ПараметрыОткрытия.Вставить("КлючСохраненияПоложенияОкна", КлючУникальности);

	Если ПараметрыОткрытия.ВыполнятьЗамеры Тогда
		// зарезервировано для новых подсистем
	КонецЕсли;

	ОткрытьФорму(ПолноеИмяОтчета + ".Форма", ПараметрыОткрытия, Неопределено, Истина);

	Если ПараметрыОткрытия.ВыполнятьЗамеры Тогда
		// зарезервировано для новых подсистем
	КонецЕсли;
КонецПроцедуры

Процедура ВО_ОбработатьДействияСообщения(Сообщение, Действие, ДополнительныеПараметры) Экспорт
	Если Действие = "ПрименитьПереданныеНастройки" Тогда
		Оповестить(Действие, Сообщение.Данные);
	КонецЕсли;
КонецПроцедуры

Процедура ВО_ПоказатьНастройкиОтчета(Вариант) Экспорт
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПоказатьКарточку", Истина);
	ПараметрыФормы.Вставить("Ключ", Вариант);
	ОткрытьФорму("Справочник.ВариантыОтчетов.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры

Процедура ВО_ОбновитьОткрытыеФормы(Параметр = Неопределено, Источник = Неопределено) Экспорт
	Оповестить("Запись_ВариантыОтчетов", Параметр, Источник);
КонецПроцедуры

Процедура ВО_ОткрытьФормуВыбранногоВариантаОтчета(Ответ, ВариантОтчета) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВО_ОткрытьФормуОтчета(Неопределено, ВариантОтчета);
	КонецЕсли;
КонецПроцедуры

Процедура ВО_ОбновитьВариантОтчетаИзФайла(ОписаниеФайла, СвойстваВариантаОтчетаОснования) Экспорт
	Если ОписаниеФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если СвойстваВариантаОтчетаОснования = Неопределено Тогда
		СвойстваВариантаОтчетаОснования = Новый Структура("Ссылка, ИмяОтчета, ПредставлениеВарианта");
	КонецЕсли;

	СвойстваВариантОтчета = ВариантыОтчетовВызовСервера.ВО_СвойстваВариантОтчетаИзФайла(ОписаниеФайла, СвойстваВариантаОтчетаОснования.Ссылка);

	Если СвойстваВариантаОтчетаОснования.ИмяОтчета = СвойстваВариантОтчета.ИмяОтчета Тогда
		ПараметрыОбновленияФормы = Новый Структура("КлючВарианта");
		ЗаполнитьЗначенияСвойств(ПараметрыОбновленияФормы, СвойстваВариантОтчета);

		ВО_ОбновитьОткрытыеФормы(ПараметрыОбновленияФормы);
		ПоказатьОповещениеПользователя("Вариант отчета обновлен из файла");
	ИначеЕсли СвойстваВариантаОтчетаОснования.ПредставлениеВарианта = СвойстваВариантОтчета.ПредставлениеВарианта Тогда
		ВО_ОткрытьФормуОтчета(Неопределено, СвойстваВариантОтчета.Ссылка);
		ПоказатьОповещениеПользователя("Вариант отчета найден и обновлен из файла");
	Иначе
		Обработчик = Новый ОписаниеОповещения("ВО_ОткрытьФормуВыбранногоВариантаОтчета", ВариантыОтчетовКлиент, СвойстваВариантОтчета.Ссылка);

		ШаблонТекстаВопроса = "Выбраны настройки варианта отчета ""%1"",
			|которые не совпадают с ""%2"".
			|Замена настроек выбранного варианта отчета невозможна.
			|
			|Создать новый вариант отчета (или обновить существующий при наличии)?";

		ТекстВопроса = СтрШаблон(ШаблонТекстаВопроса, СвойстваВариантОтчета.ПредставлениеВарианта, СвойстваВариантаОтчетаОснования.ПредставлениеВарианта);

		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);

	КонецЕсли;
КонецПроцедуры

Процедура ВО_ОткрытьДиалогРазмещенияВариантовВРазделах(Варианты, Владелец = Неопределено) Экспорт
	Если ТипЗнч(Варианты) <> Тип("Массив") Или Варианты.Количество() < 1 Тогда
		ПоказатьПредупреждение(, "Выберите варианты отчетов, которые необходимо разместить в разделах.");

		Возврат;
	КонецЕсли;

	ПараметрыОткрытия = Новый Структура("Варианты", Варианты);

	ОткрытьФорму("Справочник.ВариантыОтчетов.Форма.РазмещениеВРазделах", ПараметрыОткрытия, Владелец);
КонецПроцедуры

Процедура ВО_ДеревоПодсистемИспользованиеПриИзменении(Форма, Элемент) Экспорт
	СтрокаДерева = Форма.Элементы.ДеревоПодсистем.ТекущиеДанные;
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Пропуск корневой строки
	Если СтрокаДерева.Приоритет = "" Тогда
		СтрокаДерева.Использование = 0;

		Возврат;
	КонецЕсли;

	Если СтрокаДерева.Использование = 2 Тогда
		СтрокаДерева.Использование = 0;
	КонецЕсли;

	СтрокаДерева.Модифицированность = Истина;
КонецПроцедуры

Процедура ВО_ДеревоПодсистемВажностьПриИзменении(Форма, Элемент) Экспорт
	ДеревоПодсистем = Форма.Элементы.ДеревоПодсистем;

	СтрокаДерева = ДеревоПодсистем.ТекущиеДанные;
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Пропуск корневой строки
	Если СтрокаДерева.Приоритет = "" Тогда
		СтрокаДерева.Важность = "";

		Возврат;
	КонецЕсли;

	Если СтрокаДерева.Важность <> "" Тогда
		СтрокаДерева.Использование = 1;
	КонецЕсли;

	СтрокаДерева.Модифицированность = Истина;
КонецПроцедуры

Процедура ВО_ОформитьПользователейВариантаОтчета(Форма, СбрасыватьПризнакИспользования = Истина) Экспорт
	Элементы	= Форма.Элементы;
	Объект		= Форма.Объект;

	ПараметрыКлиента		= БазоваяПодсистемаКлиентПовтИсп.СП_ПараметрыРаботыКлиента();
	ЦветНеактивныхЗначений	= ПараметрыКлиента.ЭлементыСтиля.ТекстЗапрещеннойЯчейкиЦвет;

	Если Не СбрасыватьПризнакИспользования Тогда
		Элементы.ПользователиВарианта.ЦветТекста = ?(Объект.ТолькоДляАвтора, ЦветНеактивныхЗначений, Новый Цвет);

		Возврат;
	КонецЕсли;

	КоличествоПомеченных = 0;

	Для Каждого Строка Из Форма.ПользователиВарианта Цикл
		КоличествоПомеченных = КоличествоПомеченных + Булево(Строка.Пометка);
	КонецЦикла;

	Объект.ТолькоДляАвтора	= (КоличествоПомеченных = 0);
	Форма.Доступен			= ?(Объект.ТолькоДляАвтора, "ТолькоДляАвтора", "УказаннымПользователям");

	Элементы.ПользователиВарианта.ЦветТекста = ?(Форма.Объект.ТолькоДляАвтора, ЦветНеактивныхЗначений, Новый Цвет);
КонецПроцедуры

Процедура ВО_ПользователиВариантаОтчетаОбработкаВыбора(Форма, ВыбранныеЗначения, СтандартнаяОбработка) Экспорт
	Если ТипЗнч(ВыбранныеЗначения) <> Тип("Массив") Или ВыбранныеЗначения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

	ПользователиВарианта = Форма.ПользователиВарианта;

	ОбщаяГруппаПользователей		= ПредопределенноеЗначение("Справочник.ГруппыПользователей.ВсеПользователи");
	ОбщаяГруппаВнешниеПользователи	= ПредопределенноеЗначение("Справочник.ГруппыВнешнихПользователей.ВсеВнешниеПользователи");

	Если ТипЗнч(ВыбранныеЗначения[0]) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
		ВО_ПодготовитьСписокКДобавлениюВнешнихПользователейВариантаОтчета(ПользователиВарианта, ВыбранныеЗначения, ОбщаяГруппаВнешниеПользователи);
	Иначе
		ВО_ПодготовитьСписокКДобавлениюПользователейВариантаОтчета(ПользователиВарианта, ВыбранныеЗначения, ОбщаяГруппаПользователей);
	КонецЕсли;

	Для Каждого Значение Из ВыбранныеЗначения Цикл
		Если ПользователиВарианта.НайтиПоЗначению(Значение) = Неопределено Тогда
			ПользователиВарианта.Добавить(Значение,, Истина, ВО_КартинкаПользователяВариантаОтчета(Значение));
		КонецЕсли;
	КонецЦикла;

	Если ПользователиВарианта.НайтиПоЗначению(ОбщаяГруппаПользователей) <> Неопределено И ПользователиВарианта.НайтиПоЗначению(ОбщаяГруппаВнешниеПользователи) <> Неопределено Тогда 
		ПользователиВарианта.Очистить();
		ПользователиВарианта.Добавить(,, Истина, ВО_КартинкаПользователяВариантаОтчета());
	КонецЕсли;

	ВО_ОформитьПользователейВариантаОтчета(Форма);
КонецПроцедуры

Процедура ВО_ПодготовитьСписокКДобавлениюВнешнихПользователейВариантаОтчета(ПользователиВарианта, ВыбранныеЗначения, ОбщаяГруппаПользователей)
	Если ПользователиВарианта.НайтиПоЗначению(ОбщаяГруппаПользователей) <> Неопределено Или ПользователиВарианта.НайтиПоЗначению(Неопределено) <> Неопределено Тогда 
		ВыбранныеЗначения.Очистить();

		Возврат;
	КонецЕсли;

	Если ВыбранныеЗначения.Найти(ОбщаяГруппаПользователей) = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТипыПользователей = Новый ОписаниеТипов("СправочникСсылка.ГруппыВнешнихПользователей");
	ВО_УдалитьПользователейВариантаОтчетаУказанныхТипов(ПользователиВарианта, ТипыПользователей);

	ВыбранныеЗначения.Очистить();
	ВыбранныеЗначения.Добавить(ОбщаяГруппаПользователей);
КонецПроцедуры

Процедура ВО_ПодготовитьСписокКДобавлениюПользователейВариантаОтчета(ПользователиВарианта, ВыбранныеЗначения, ОбщаяГруппаПользователей)
	Если ПользователиВарианта.НайтиПоЗначению(Неопределено) <> Неопределено Тогда
		ПользователиВарианта.Очистить();
	Иначе
		ТипыПользователей = Новый ОписаниеТипов("СправочникСсылка.ГруппыПользователей, СправочникСсылка.Пользователи");
		ВО_УдалитьПользователейВариантаОтчетаУказанныхТипов(ПользователиВарианта, ТипыПользователей);
	КонецЕсли;

	Если ВыбранныеЗначения.Найти(ОбщаяГруппаПользователей) = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ВыбранныеЗначения.Очистить();
	ВыбранныеЗначения.Добавить(ОбщаяГруппаПользователей);
КонецПроцедуры

Функция ВО_КартинкаПользователяВариантаОтчета(Пользователь = Неопределено)
	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
		Возврат БиблиотекаКартинок.СостояниеПользователя02;
	ИначеЕсли ТипЗнч(Пользователь) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
		Возврат БиблиотекаКартинок.СостояниеПользователя10;
	КонецЕсли;

	Возврат БиблиотекаКартинок.СостояниеПользователя04;
КонецФункции

Процедура ВО_УдалитьПользователейВариантаОтчетаУказанныхТипов(ПользователиВарианта, ТипыПользователей)
	ИндексЭлемента = ПользователиВарианта.Количество() - 1;

	Пока ИндексЭлемента >= 0 Цикл
		ЭлементСписка = ПользователиВарианта[ИндексЭлемента];

		Если ТипыПользователей.СодержитТип(ТипЗнч(ЭлементСписка.Значение)) Тогда
			ПользователиВарианта.Удалить(ЭлементСписка);
		КонецЕсли;

		ИндексЭлемента = ИндексЭлемента - 1;
	КонецЦикла;
КонецПроцедуры

Процедура ВО_ПодобратьПользователейВариантаОтчета(Форма, ПодборГруппПользователей = Ложь, ПодборГруппВнешнихПользователей = Ложь) Экспорт
	ПараметрыПодбора = ВО_ПараметрыПодбораПользователейВариантаОтчета(Форма, ПодборГруппПользователей, ПодборГруппВнешнихПользователей);

	Если ПодборГруппВнешнихПользователей Тогда
		ИмяФормыПодбора = "Справочник.ГруппыВнешнихПользователей.ФормаВыбора";
	Иначе
		ИмяФормыПодбора = "Справочник.Пользователи.ФормаВыбора";
	КонецЕсли;

	ОткрытьФорму(ИмяФормыПодбора, ПараметрыПодбора, Форма.Элементы.ПользователиВарианта);
КонецПроцедуры

Функция ВО_ПараметрыПодбораПользователейВариантаОтчета(Форма, ПодборГруппПользователей, ПодборГруппВнешнихПользователей = Ложь)
	ТекущиеДанные			= Форма.Элементы.ПользователиВарианта.ТекущиеДанные;
	ВыбранныеПользователи	= ВО_ВыбранныеПользователиВарианта(Форма.ПользователиВарианта, ПодборГруппВнешнихПользователей);

	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("РежимВыбора",				Истина);
	ПараметрыПодбора.Вставить("ТекущаяСтрока",				?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Значение));
	ПараметрыПодбора.Вставить("ЗакрыватьПриВыборе",			Ложь);
	ПараметрыПодбора.Вставить("МножественныйВыбор",			Истина);
	ПараметрыПодбора.Вставить("РасширенныйПодбор",			Истина);
	ПараметрыПодбора.Вставить("ЗаголовокФормыПодбора",		"Подбор пользователей варианта отчета");
	ПараметрыПодбора.Вставить("ВыборГруппПользователей",	ПодборГруппПользователей);
	ПараметрыПодбора.Вставить("ВыбранныеПользователи",		ВыбранныеПользователи);

	Возврат ПараметрыПодбора;
КонецФункции

Функция ВО_ВыбранныеПользователиВарианта(ПользователиВарианта, ПодборГруппВнешнихПользователей)
	ТипыВыбранныхПользователей = Новый ОписаниеТипов("СправочникСсылка.ГруппыПользователей, СправочникСсылка.Пользователи");

	Если ПодборГруппВнешнихПользователей Тогда
		ТипыВыбранныхПользователей = Новый ОписаниеТипов("СправочникСсылка.ГруппыВнешнихПользователей");
	КонецЕсли;

	ВыбранныеПользователи = Новый Массив;

	Для Каждого ЭлементСписка Из ПользователиВарианта Цикл
		Если ЭлементСписка.Пометка И ТипыВыбранныхПользователей.СодержитТип(ТипЗнч(ЭлементСписка.Значение)) Тогда
			ВыбранныеПользователи.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;

	Если ВыбранныеПользователи.Количество() = 1 И ВыбранныеПользователи[0] = Неопределено Тогда
		Если ПодборГруппВнешнихПользователей Тогда
			ВыбранныеПользователи[0] = ПредопределенноеЗначение("Справочник.ГруппыВнешнихПользователей.ВсеВнешниеПользователи");
		Иначе
			ВыбранныеПользователи[0] = ПредопределенноеЗначение("Справочник.ГруппыПользователей.ВсеПользователи");
		КонецЕсли;
	КонецЕсли;

	Возврат ВыбранныеПользователи;
КонецФункции

#КонецОбласти

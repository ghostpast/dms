///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СтандартныеПодсистемы

Процедура СП_ПередНачаломРаботыСистемы(Знач ОповещениеЗавершения = Неопределено) Экспорт
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();

	Если ПараметрыПриложения = Неопределено Тогда
		ПараметрыПриложения = Новый Соответствие;
	КонецЕсли;

	ПараметрыПриложения.Вставить("СтандартныеПодсистемы.ОценкаПроизводительности.ВремяНачалаЗапуска", ВремяНачала);

	Если ОповещениеЗавершения <> Неопределено Тогда
		БазоваяПодсистемаКлиентСервер.ОН_ПроверитьПараметр("БазоваяПодсистемаКлиент.СП_ПередНачаломРаботыСистемы",
			"ОповещениеЗавершения", ОповещениеЗавершения, Тип("ОписаниеОповещения"));
	КонецЕсли;

	Параметры = СП_ПараметрыОбработкиПередНачаломРаботыСистемы();

	// Внешние параметры описания результата.
	Параметры.Вставить("Отказ", Ложь);
	Параметры.Вставить("Перезапустить", Ложь);
	Параметры.Вставить("ДополнительныеПараметрыКоманднойСтроки", "");

	// Внешние параметры управления выполнением.
	Параметры.Вставить("ИнтерактивнаяОбработка", Неопределено); // ОписаниеОповещения.
	Параметры.Вставить("ОбработкаПродолжения",   Неопределено); // ОписаниеОповещения.
	Параметры.Вставить("НепрерывноеВыполнение", Истина);
	Параметры.Вставить("ПолученныеПараметрыКлиента", Новый Структура);

	// Внутренние параметры.
	Параметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	Параметры.Вставить("ОбработкаЗавершения", Новый ОписаниеОповещения(
		"СП_ДействияПередНачаломРаботыСистемыОбработкаЗавершения", ЭтотОбъект));

	СП_ОбновитьПараметрыРаботыКлиента(Параметры, Истина, ОповещениеЗавершения <> Неопределено);

	// Подготовка перехода к следующей процедуре.
	Параметры.Вставить("ОбработкаПродолжения", Новый ОписаниеОповещения(
		"СП_ДействияПередНачаломРаботыСистемыВИнтеграционнойПроцедуре", ЭтотОбъект));

	Если СтрНайти(ПараметрЗапуска, "ОтключитьЛогикуНачалаРаботыСистемы") > 0 Тогда
		Попытка
			БазоваяПодсистемаВызовСервера.СП_ПроверитьПравоОтключитьЛогикуНачалаРаботыСистемы();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ПользователиКлиент.сП_УстановитьИнтерактивнуюОбработкуПриОшибкеНедостаточноПравДляВходаВПрограмму(
				Параметры, КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
		Если СП_ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры) Тогда
			Возврат;
		КонецЕсли;
		СП_СкрытьРабочийСтолПриНачалеРаботыСистемы(Истина, Истина);

		Возврат;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
КонецПроцедуры

Процедура СП_ДействияПередНачаломРаботыСистемыОбработкаЗавершения(Неопределен, Контекст) Экспорт
	Параметры = СП_ПараметрыОбработкиПередНачаломРаботыСистемы(Истина);

	Параметры.ОбработкаПродолжения = Неопределено;
	Параметры.ОбработкаЗавершения  = Неопределено;

	ПараметрыПриЗапускеПрограммы = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"];
	ПараметрыПриЗапускеПрограммы.Удалить("ПолученныеПараметрыКлиента");
	ПараметрыПриложения["СтандартныеПодсистемы.ЗапускПрограммыЗавершен"] = Истина;

	Если Параметры.ОповещениеЗавершения <> Неопределено Тогда
		Результат = Новый Структура;
		Результат.Вставить("Отказ", Параметры.Отказ);
		Результат.Вставить("Перезапустить", Параметры.Перезапустить);
		Результат.Вставить("ДополнительныеПараметрыКоманднойСтроки", Параметры.ДополнительныеПараметрыКоманднойСтроки);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеЗавершения, Результат);

		Возврат;
	КонецЕсли;

	Если Параметры.Отказ Тогда
		Если Параметры.Перезапустить <> Истина Тогда
			ПрекратитьРаботуСистемы();
		ИначеЕсли ЗначениеЗаполнено(Параметры.ДополнительныеПараметрыКоманднойСтроки) Тогда
			ПрекратитьРаботуСистемы(Параметры.Перезапустить, Параметры.ДополнительныеПараметрыКоманднойСтроки);
		Иначе
			ПрекратитьРаботуСистемы(Параметры.Перезапустить);
		КонецЕсли;

	ИначеЕсли Не Параметры.НепрерывноеВыполнение Тогда
		Если ПараметрыПриЗапускеПрограммы.Свойство("ПараметрыОбработки") Тогда
			ПараметрыПриЗапускеПрограммы.Удалить("ПараметрыОбработки");
		КонецЕсли;
		ПодключитьОбработчикОжидания("СП_ОбработчикОжиданияПриНачалеРаботыСистемы", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

Процедура СП_ДействияПередНачаломРаботыСистемыВИнтеграционнойПроцедуре(Неопределен, Контекст) Экспорт
	Параметры = СП_ПараметрыОбработкиПередНачаломРаботыСистемы();

	Если Не СП_ПродолжитьДействияПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	Параметры.Вставить("ОбработкаПродолжения", Новый ОписаниеОповещения(
		"СП_ДействияПередНачаломРаботыСистемыВМодуляхИнтеграционнойПроцедуры", ЭтотОбъект));

	Параметры.Вставить("ИндексТекущегоМодуля", 0);
	Параметры.Вставить("ДобавленныеМодули", Новый Массив);
	Попытка
		Параметры.Вставить("Модули", Новый Массив);
		ИнтеграцияПодсистемКлиент.ПередНачаломРаботыСистемы(Параметры);
		Параметры.Вставить("ДобавленныеМодули", Параметры.Модули);
		Параметры.Удалить("Модули");
	Исключение
		СП_ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Запуск", Истина);
	КонецПопытки;
	Если СП_ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
КонецПроцедуры

Функция СП_ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры)
	ПараметрыПриЗапускеПрограммы = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"];

	Если Параметры.ИнтерактивнаяОбработка = Неопределено Тогда
		Если Параметры.Отказ Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);
			Возврат Истина;
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;

	СП_ОбновитьПараметрыРаботыКлиента(Параметры);

	Если НЕ Параметры.НепрерывноеВыполнение Тогда
		ИнтерактивнаяОбработка				= Параметры.ИнтерактивнаяОбработка;
		Параметры.ИнтерактивнаяОбработка	= Неопределено;
		ВыполнитьОбработкуОповещения(ИнтерактивнаяОбработка, Параметры);
	Иначе
		// Требуется подготовка к выполнению интерактивной обработки, затребованной
		// в процессе выполнения обработчика ПередНачаломРаботыСистемы, которая
		// предполагает скрытие рабочего стола и обновление интерфейса перед
		// продолжением при первом вызове процедуры ПриНачалеРаботыСистемы.
		ПараметрыПриЗапускеПрограммы.Вставить("ПараметрыОбработки", Параметры);
		СП_СкрытьРабочийСтолПриНачалеРаботыСистемы();
		ПараметрыПриЗапускеПрограммы.Вставить("ПропуститьОчисткуСкрытияРабочегоСтола");

		Если Параметры.ОповещениеЗавершения = Неопределено Тогда
			// Вызов процедуры ПередНачаломРаботыСистемы выполнен платформой,
			// как обработчика события, до открытия главного окна 1С:Предприятия 8.
			Если СтрНайти(ПараметрЗапуска, "ОтключитьЛогикуНачалаРаботыСистемы") <= 0 Тогда
				СП_УстановитьПараметрыФункциональныхОпцийИнтерфейсаПриЗапуске();
			КонецЕсли;
		Иначе
			// Вызов процедуры ПередНачаломРаботыСистемы выполнен программно, как вход в область данных,
			// поэтому продолжение после обновления интерфейса возможно только через обработчик ожидания.
			ПодключитьОбработчикОжидания("СП_ОбработчикОжиданияПриНачалеРаботыСистемы", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;
КонецФункции

Процедура СП_ДействияПередНачаломРаботыСистемыВМодуляхИнтеграционнойПроцедуры(Неопределен, Контекст) Экспорт
	Параметры = СП_ПараметрыОбработкиПередНачаломРаботыСистемы();

	Если Не СП_ПродолжитьДействияПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	Если Параметры.ИндексТекущегоМодуля >= Параметры.ДобавленныеМодули.Количество() Тогда
		СП_ДействияПередНачаломРаботыСистемыПослеВсехПроцедур(Неопределено, Неопределено);

		Возврат;
	КонецЕсли;
	ОписаниеМодуля					= Параметры.ДобавленныеМодули[Параметры.ИндексТекущегоМодуля];
	Параметры.ИндексТекущегоМодуля	= Параметры.ИндексТекущегоМодуля + 1;

	Попытка
		Если ТипЗнч(ОписаниеМодуля) <> Тип("Структура") Тогда
			ТекущийМодуль = ОписаниеМодуля;
			ТекущийМодуль.ПередНачаломРаботыСистемы(Параметры);
		Иначе
			ТекущийМодуль = ОписаниеМодуля.Модуль;
			Если ОписаниеМодуля.Номер = 2 Тогда
				ТекущийМодуль.ПередНачаломРаботыСистемы2(Параметры);
			ИначеЕсли ОписаниеМодуля.Номер = 3 Тогда
				ТекущийМодуль.ПередНачаломРаботыСистемы3(Параметры);
			ИначеЕсли ОписаниеМодуля.Номер = 4 Тогда
				ТекущийМодуль.ПередНачаломРаботыСистемы4(Параметры);
			ИначеЕсли ОписаниеМодуля.Номер = 5 Тогда
				ТекущийМодуль.ПередНачаломРаботыСистемы5(Параметры);
			КонецЕсли;
		КонецЕсли;
	Исключение
		СП_ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Запуск", Истина);
	КонецПопытки;
	Если СП_ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
КонецПроцедуры

Процедура СП_ДействияПередНачаломРаботыСистемыПослеВсехПроцедур(Неопределен, Контекст)
	Параметры = СП_ПараметрыОбработкиПередНачаломРаботыСистемы();

	Если Не СП_ПродолжитьДействияПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	Параметры.Вставить("ОбработкаПродолжения", Параметры.ОбработкаЗавершения);

	Попытка
		СП_УстановитьПараметрыФункциональныхОпцийИнтерфейсаПриЗапуске();
	Исключение
		СП_ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Запуск", Истина);
	КонецПопытки;
	Если СП_ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
КонецПроцедуры

Функция СП_ПараметрыОбработкиПередНачаломРаботыСистемы(Удалить = Ложь)
	ИмяПараметра	= "СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы";
	Свойства		= ПараметрыПриложения[ИмяПараметра];
	Если Свойства = Неопределено Тогда
		Свойства = Новый Структура;
		ПараметрыПриложения.Вставить(ИмяПараметра, Свойства);
	КонецЕсли;

	ИмяСвойства = "ПараметрыОбработкиПередНачаломРаботыСистемы";
	Если Свойства.Свойство(ИмяСвойства) Тогда
		Параметры = Свойства[ИмяСвойства];
	Иначе
		Параметры = Новый Структура;
		Свойства.Вставить(ИмяСвойства, Параметры);
	КонецЕсли;

	Если Удалить Тогда
		Свойства.Удалить(ИмяСвойства);
	КонецЕсли;

	Возврат Параметры;
КонецФункции

Процедура СП_ОбновитьПараметрыРаботыКлиента(Параметры, ПервыйВызов = Ложь, ОбновитьПовторноИспользуемыеЗначения = Истина)
	Если ПервыйВызов Тогда
		ИмяПараметра = "СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы";
		Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
			ПараметрыПриложения.Вставить(ИмяПараметра, Новый Структура);
		КонецЕсли;
		ИмяПараметра = "СтандартныеПодсистемы.ЗапускПрограммыЗавершен";
		Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
			ПараметрыПриложения.Вставить(ИмяПараметра, Ложь);
		КонецЕсли;
	ИначеЕсли Параметры.КоличествоПолученныхПараметровКлиента = Параметры.ПолученныеПараметрыКлиента.Количество() Тогда
		Возврат;
	КонецЕсли;

	Параметры.Вставить("КоличествоПолученныхПараметровКлиента", Параметры.ПолученныеПараметрыКлиента.Количество());

	ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"].Вставить(
		"ПолученныеПараметрыКлиента", Параметры.ПолученныеПараметрыКлиента);

	Если ОбновитьПовторноИспользуемыеЗначения Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
КонецПроцедуры

Процедура СП_СкрытьРабочийСтолПриНачалеРаботыСистемы(Скрыть = Истина, УжеВыполненоНаСервере = Ложь) Экспорт
	ПараметрыПриЗапускеПрограммы = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"];

	Если Скрыть Тогда
		Если НЕ ПараметрыПриЗапускеПрограммы.Свойство("СкрытьРабочийСтолПриНачалеРаботыСистемы") Тогда
			ПараметрыПриЗапускеПрограммы.Вставить("СкрытьРабочийСтолПриНачалеРаботыСистемы");
			Если НЕ УжеВыполненоНаСервере Тогда
				БазоваяПодсистемаВызовСервера.СП_СкрытьРабочийСтолПриНачалеРаботыСистемы();
			КонецЕсли;
			ОбновитьИнтерфейс();
		КонецЕсли;
	Иначе
		Если ПараметрыПриЗапускеПрограммы.Свойство("СкрытьРабочийСтолПриНачалеРаботыСистемы") Тогда
			ПараметрыПриЗапускеПрограммы.Удалить("СкрытьРабочийСтолПриНачалеРаботыСистемы");
			Если НЕ УжеВыполненоНаСервере Тогда
				БазоваяПодсистемаВызовСервера.СП_СкрытьРабочийСтолПриНачалеРаботыСистемы(Ложь);
			КонецЕсли;
			ТекущееАктивноеОкно = АктивноеОкно();
			ОбновитьИнтерфейс();
			Если ТекущееАктивноеОкно <> Неопределено Тогда
				ТекущееАктивноеОкно.Активизировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура СП_УстановитьПараметрыФункциональныхОпцийИнтерфейсаПриЗапуске()
	ПараметрыПриЗапускеПрограммы = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"];

	Если ТипЗнч(ПараметрыПриЗапускеПрограммы) <> Тип("Структура")
	 Или Не ПараметрыПриЗапускеПрограммы.Свойство("ОпцииИнтерфейса") Тогда
		// Обработка ошибки запуска.
		Возврат;
	КонецЕсли;

	Если ПараметрыПриЗапускеПрограммы.Свойство("ОпцииИнтерфейсаУстановлены") Тогда
		Возврат;
	КонецЕсли;

	ОпцииИнтерфейса = Новый Структура(ПараметрыПриЗапускеПрограммы.ОпцииИнтерфейса);

	// Установка параметров функциональных опций производится только тогда, когда они заданы.
	Если ОпцииИнтерфейса.Количество() > 0 Тогда
		УстановитьПараметрыФункциональныхОпцийИнтерфейса(ОпцииИнтерфейса);
	КонецЕсли;

	ПараметрыПриЗапускеПрограммы.Вставить("ОпцииИнтерфейсаУстановлены");
КонецПроцедуры

Функция СП_ПродолжитьДействияПередНачаломРаботыСистемы(Параметры)
	Если Параметры.Отказ Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);
		Возврат Ложь;
	КонецЕсли;

	СП_ОбновитьПараметрыРаботыКлиента(Параметры);

	Возврат Истина;
КонецФункции

Процедура СП_ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке, Событие, ПрекратитьРаботу = Ложь)
	Если Событие = "Запуск" Тогда
		Если ПрекратитьРаботу Тогда
			Параметры.Отказ = Истина;
			Параметры.ОбработкаПродолжения = Параметры.ОбработкаЗавершения;
		КонецЕсли;
	Иначе
		ДополнительныеПараметры = Новый Структура(
			"Параметры, ОбработкаПродолжения", Параметры, Параметры.ОбработкаПродолжения);

		Параметры.ОбработкаПродолжения = Новый ОписаниеОповещения(
			"СП_ДействияПередЗавершениемРаботыСистемыПослеОбработкиОшибки", ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;

	НачалоОписанияОшибки = БазоваяПодсистемаВызовСервера.СП_ЗаписатьОшибкуВЖурналРегистрацииПриЗапускеИлиЗавершении(
		ПрекратитьРаботу, Событие, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	НачалоОписанияОшибки = "";

	ТекстПредупреждения = НачалоОписанияОшибки + Символы.ПС
		+ "Техническая информация об ошибке записана в журнал регистрации."
		+ Символы.ПС + Символы.ПС
		+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке);

	ИнтерактивнаяОбработка = Новый ОписаниеОповещения(
		"СП_ПоказатьПредупреждениеИПродолжить",
		ЭтотОбъект,
		ТекстПредупреждения);

	Параметры.ИнтерактивнаяОбработка = ИнтерактивнаяОбработка;
КонецПроцедуры

Процедура СП_ДействияПередЗавершениемРаботыСистемыПослеОбработкиОшибки(Неопределен, ДополнительныеПараметры) Экспорт
	Параметры						= ДополнительныеПараметры.Параметры;
	Параметры.ОбработкаПродолжения	= ДополнительныеПараметры.ОбработкаПродолжения;

	Если Параметры.Отказ Тогда
		Параметры.Отказ = Ложь;
		ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);
	Иначе
		ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	КонецЕсли;
КонецПроцедуры

Процедура СП_ПоказатьПредупреждениеИПродолжить(Параметры, ОписаниеПредупреждения) Экспорт
	ОповещениеСРезультатом = Параметры.ОбработкаПродолжения;

	Если ОписаниеПредупреждения = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеСРезультатом);

		Возврат;
	КонецЕсли;

	Кнопки													= Новый СписокЗначений;
	ПараметрыВопроса										= СП_ПараметрыВопросаПользователю();
	ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос	= Ложь;
	ПараметрыВопроса.БлокироватьВесьИнтерфейс				= Истина;
	ПараметрыВопроса.Картинка								= БиблиотекаКартинок.Предупреждение32;

	Если Параметры.Отказ Тогда
		Кнопки.Добавить("Завершить", "Завершить работу");
		ПараметрыВопроса.КнопкаПоУмолчанию = "Завершить";
	Иначе
		Кнопки.Добавить("Продолжить", "Продолжить");
		Кнопки.Добавить("Завершить",  "Завершить работу");
		ПараметрыВопроса.КнопкаПоУмолчанию = "Продолжить";
	КонецЕсли;

	Если ТипЗнч(ОписаниеПредупреждения) = Тип("Структура") Тогда
		ТекстПредупреждения = ОписаниеПредупреждения.ТекстПредупреждения;
		Кнопки = ОписаниеПредупреждения.Кнопки;
		ЗаполнитьЗначенияСвойств(ПараметрыВопроса, ОписаниеПредупреждения.ПараметрыВопроса);
	Иначе
		ТекстПредупреждения = ОписаниеПредупреждения;
	КонецЕсли;

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("СП_ПоказатьПредупреждениеИПродолжитьЗавершение", ЭтотОбъект, Параметры);
	СП_ПоказатьВопросПользователю(ОповещениеОЗакрытии, ТекстПредупреждения, Кнопки, ПараметрыВопроса);
КонецПроцедуры

Процедура СП_ПоказатьПредупреждениеИПродолжитьЗавершение(Результат, Параметры) Экспорт
	Если Результат <> Неопределено Тогда
		Если Результат.Значение = "Завершить" Тогда
			Параметры.Отказ = Истина;
		ИначеЕсли Результат.Значение = "Перезапустить" Или Результат.Значение = КодВозвратаДиалога.Таймаут Тогда
			Параметры.Отказ = Истина;
			Параметры.Перезапустить = Истина;
		КонецЕсли;
	КонецЕсли;
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
КонецПроцедуры

Процедура СП_ПоказатьВопросПользователю(ОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки, ДополнительныеПараметры = Неопределено) Экспорт
	Если ДополнительныеПараметры <> Неопределено Тогда
		Параметры = ДополнительныеПараметры;
	Иначе
		Параметры = Новый Структура;
	КонецЕсли;

	БазоваяПодсистемаКлиентСервер.ОН_ДополнитьСтруктуру(Параметры, СП_ПараметрыВопросаПользователю(), Ложь);

	Если ТипЗнч(Кнопки) = Тип("РежимДиалогаВопрос") Тогда
		Если      Кнопки = РежимДиалогаВопрос.ДаНет Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ДаНет";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ДаНетОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ДаНетОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ОК Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ОК";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ОКОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ОКОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ПовторитьОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ПовторитьОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ПрерватьПовторитьПропустить Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ПрерватьПовторитьПропустить";
		КонецЕсли;
	Иначе
		КнопкиПараметр = Кнопки;
	КонецЕсли;

	Если ТипЗнч(Параметры.КнопкаПоУмолчанию) = Тип("КодВозвратаДиалога") Тогда
		Параметры.КнопкаПоУмолчанию = СП_КодВозвратаДиалогаВСтроку(Параметры.КнопкаПоУмолчанию);
	КонецЕсли;

	Если ТипЗнч(Параметры.КнопкаТаймаута) = Тип("КодВозвратаДиалога") Тогда
		Параметры.КнопкаТаймаута = СП_КодВозвратаДиалогаВСтроку(Параметры.КнопкаТаймаута);
	КонецЕсли;

	Параметры.Вставить("Кнопки",         КнопкиПараметр);
	Параметры.Вставить("ТекстСообщения", ТекстВопроса);

	ОткрытьФорму("ОбщаяФорма.Вопрос", Параметры,,,,,ОписаниеОповещенияОЗавершении);
КонецПроцедуры

Функция СП_ПараметрыВопросаПользователю() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("КнопкаПоУмолчанию",						Неопределено);
	Параметры.Вставить("Таймаут",								0);
	Параметры.Вставить("КнопкаТаймаута",						Неопределено);
	Параметры.Вставить("Заголовок",								КлиентскоеПриложение.ПолучитьЗаголовок());
	Параметры.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос",	Истина);
	Параметры.Вставить("БольшеНеЗадаватьЭтотВопрос",			Ложь);
	Параметры.Вставить("БлокироватьВесьИнтерфейс",				Ложь);
	Параметры.Вставить("Картинка",								БиблиотекаКартинок.Вопрос32);

	Возврат Параметры;
КонецФункции

Функция СП_КодВозвратаДиалогаВСтроку(Значение)
	Результат = "КодВозвратаДиалога." + Строка(Значение);

	Если Значение = КодВозвратаДиалога.Да Тогда
		Результат = "КодВозвратаДиалога.Да";
	ИначеЕсли Значение = КодВозвратаДиалога.Нет Тогда
		Результат = "КодВозвратаДиалога.Нет";
	ИначеЕсли Значение = КодВозвратаДиалога.ОК Тогда
		Результат = "КодВозвратаДиалога.ОК";
	ИначеЕсли Значение = КодВозвратаДиалога.Отмена Тогда
		Результат = "КодВозвратаДиалога.Отмена";
	ИначеЕсли Значение = КодВозвратаДиалога.Повторить Тогда
		Результат = "КодВозвратаДиалога.Повторить";
	ИначеЕсли Значение = КодВозвратаДиалога.Прервать Тогда
		Результат = "КодВозвратаДиалога.Прервать";
	ИначеЕсли Значение = КодВозвратаДиалога.Пропустить Тогда
		Результат = "КодВозвратаДиалога.Пропустить";
	КонецЕсли;

	Возврат Результат;
КонецФункции

#КонецОбласти

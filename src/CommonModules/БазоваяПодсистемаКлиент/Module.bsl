///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СтандартныеПодсистемы

Процедура СП_ПередНачаломРаботыСистемы(Знач ОповещениеЗавершения = Неопределено) Экспорт
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();

	Если ПараметрыПриложения = Неопределено Тогда
		ПараметрыПриложения = Новый Соответствие;
	КонецЕсли;

	ПараметрыПриложения.Вставить("СтандартныеПодсистемы.ОценкаПроизводительности.ВремяНачалаЗапуска", ВремяНачала);

	Если ОповещениеЗавершения <> Неопределено Тогда
		БазоваяПодсистемаКлиентСервер.ОН_ПроверитьПараметр("БазоваяПодсистемаКлиент.СП_ПередНачаломРаботыСистемы",
			"ОповещениеЗавершения", ОповещениеЗавершения, Тип("ОписаниеОповещения"));
	КонецЕсли;

	Параметры = СП_ПараметрыОбработкиПередНачаломРаботыСистемы();

	// Внешние параметры описания результата.
	Параметры.Вставить("Отказ", Ложь);
	Параметры.Вставить("Перезапустить", Ложь);
	Параметры.Вставить("ДополнительныеПараметрыКоманднойСтроки", "");

	// Внешние параметры управления выполнением.
	Параметры.Вставить("ИнтерактивнаяОбработка", Неопределено); // ОписаниеОповещения.
	Параметры.Вставить("ОбработкаПродолжения",   Неопределено); // ОписаниеОповещения.
	Параметры.Вставить("НепрерывноеВыполнение", Истина);
	Параметры.Вставить("ПолученныеПараметрыКлиента", Новый Структура);

	// Внутренние параметры.
	Параметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	Параметры.Вставить("ОбработкаЗавершения", Новый ОписаниеОповещения(
		"СП_ДействияПередНачаломРаботыСистемыОбработкаЗавершения", ЭтотОбъект));

	СП_ОбновитьПараметрыРаботыКлиента(Параметры, Истина, ОповещениеЗавершения <> Неопределено);

	// Подготовка перехода к следующей процедуре.
	Параметры.Вставить("ОбработкаПродолжения", Новый ОписаниеОповещения(
		"СП_ДействияПередНачаломРаботыСистемыВИнтеграционнойПроцедуре", ЭтотОбъект));

	Если СтрНайти(ПараметрЗапуска, "ОтключитьЛогикуНачалаРаботыСистемы") > 0 Тогда
		Попытка
			БазоваяПодсистемаВызовСервера.СП_ПроверитьПравоОтключитьЛогикуНачалаРаботыСистемы();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ПользователиКлиент.сП_УстановитьИнтерактивнуюОбработкуПриОшибкеНедостаточноПравДляВходаВПрограмму(
				Параметры, КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
		Если СП_ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры) Тогда
			Возврат;
		КонецЕсли;
		СП_СкрытьРабочийСтолПриНачалеРаботыСистемы(Истина, Истина);

		Возврат;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
КонецПроцедуры

Процедура СП_ДействияПередНачаломРаботыСистемыОбработкаЗавершения(Неопределен, Контекст) Экспорт
	Параметры = СП_ПараметрыОбработкиПередНачаломРаботыСистемы(Истина);

	Параметры.ОбработкаПродолжения = Неопределено;
	Параметры.ОбработкаЗавершения  = Неопределено;

	ПараметрыПриЗапускеПрограммы = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"];
	ПараметрыПриЗапускеПрограммы.Удалить("ПолученныеПараметрыКлиента");
	ПараметрыПриложения["СтандартныеПодсистемы.ЗапускПрограммыЗавершен"] = Истина;

	Если Параметры.ОповещениеЗавершения <> Неопределено Тогда
		Результат = Новый Структура;
		Результат.Вставить("Отказ", Параметры.Отказ);
		Результат.Вставить("Перезапустить", Параметры.Перезапустить);
		Результат.Вставить("ДополнительныеПараметрыКоманднойСтроки", Параметры.ДополнительныеПараметрыКоманднойСтроки);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеЗавершения, Результат);

		Возврат;
	КонецЕсли;

	Если Параметры.Отказ Тогда
		Если Параметры.Перезапустить <> Истина Тогда
			ПрекратитьРаботуСистемы();
		ИначеЕсли ЗначениеЗаполнено(Параметры.ДополнительныеПараметрыКоманднойСтроки) Тогда
			ПрекратитьРаботуСистемы(Параметры.Перезапустить, Параметры.ДополнительныеПараметрыКоманднойСтроки);
		Иначе
			ПрекратитьРаботуСистемы(Параметры.Перезапустить);
		КонецЕсли;

	ИначеЕсли Не Параметры.НепрерывноеВыполнение Тогда
		Если ПараметрыПриЗапускеПрограммы.Свойство("ПараметрыОбработки") Тогда
			ПараметрыПриЗапускеПрограммы.Удалить("ПараметрыОбработки");
		КонецЕсли;
		ПодключитьОбработчикОжидания("СП_ОбработчикОжиданияПриНачалеРаботыСистемы", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

Процедура СП_ДействияПередНачаломРаботыСистемыВИнтеграционнойПроцедуре(Неопределен, Контекст) Экспорт
	Параметры = СП_ПараметрыОбработкиПередНачаломРаботыСистемы();

	Если Не СП_ПродолжитьДействияПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	Параметры.Вставить("ОбработкаПродолжения", Новый ОписаниеОповещения(
		"СП_ДействияПередНачаломРаботыСистемыВМодуляхИнтеграционнойПроцедуры", ЭтотОбъект));

	Параметры.Вставить("ИндексТекущегоМодуля", 0);
	Параметры.Вставить("ДобавленныеМодули", Новый Массив);
	Попытка
		Параметры.Вставить("Модули", Новый Массив);
		ИнтеграцияПодсистемКлиент.ПередНачаломРаботыСистемы(Параметры);
		Параметры.Вставить("ДобавленныеМодули", Параметры.Модули);
		Параметры.Удалить("Модули");
	Исключение
		СП_ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Запуск", Истина);
	КонецПопытки;
	Если СП_ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
КонецПроцедуры

Функция СП_ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры)
	ПараметрыПриЗапускеПрограммы = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"];

	Если Параметры.ИнтерактивнаяОбработка = Неопределено Тогда
		Если Параметры.Отказ Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);
			Возврат Истина;
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;

	СП_ОбновитьПараметрыРаботыКлиента(Параметры);

	Если НЕ Параметры.НепрерывноеВыполнение Тогда
		ИнтерактивнаяОбработка				= Параметры.ИнтерактивнаяОбработка;
		Параметры.ИнтерактивнаяОбработка	= Неопределено;
		ВыполнитьОбработкуОповещения(ИнтерактивнаяОбработка, Параметры);
	Иначе
		// Требуется подготовка к выполнению интерактивной обработки, затребованной
		// в процессе выполнения обработчика ПередНачаломРаботыСистемы, которая
		// предполагает скрытие рабочего стола и обновление интерфейса перед
		// продолжением при первом вызове процедуры ПриНачалеРаботыСистемы.
		ПараметрыПриЗапускеПрограммы.Вставить("ПараметрыОбработки", Параметры);
		СП_СкрытьРабочийСтолПриНачалеРаботыСистемы();
		ПараметрыПриЗапускеПрограммы.Вставить("ПропуститьОчисткуСкрытияРабочегоСтола");

		Если Параметры.ОповещениеЗавершения = Неопределено Тогда
			// Вызов процедуры ПередНачаломРаботыСистемы выполнен платформой,
			// как обработчика события, до открытия главного окна 1С:Предприятия 8.
			Если СтрНайти(ПараметрЗапуска, "ОтключитьЛогикуНачалаРаботыСистемы") <= 0 Тогда
				СП_УстановитьПараметрыФункциональныхОпцийИнтерфейсаПриЗапуске();
			КонецЕсли;
		Иначе
			// Вызов процедуры ПередНачаломРаботыСистемы выполнен программно, как вход в область данных,
			// поэтому продолжение после обновления интерфейса возможно только через обработчик ожидания.
			ПодключитьОбработчикОжидания("СП_ОбработчикОжиданияПриНачалеРаботыСистемы", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;
КонецФункции

Процедура СП_ДействияПередНачаломРаботыСистемыВМодуляхИнтеграционнойПроцедуры(Неопределен, Контекст) Экспорт
	Параметры = СП_ПараметрыОбработкиПередНачаломРаботыСистемы();

	Если Не СП_ПродолжитьДействияПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	Если Параметры.ИндексТекущегоМодуля >= Параметры.ДобавленныеМодули.Количество() Тогда
		СП_ДействияПередНачаломРаботыСистемыПослеВсехПроцедур(Неопределено, Неопределено);

		Возврат;
	КонецЕсли;
	ОписаниеМодуля					= Параметры.ДобавленныеМодули[Параметры.ИндексТекущегоМодуля];
	Параметры.ИндексТекущегоМодуля	= Параметры.ИндексТекущегоМодуля + 1;

	Попытка
		Если ТипЗнч(ОписаниеМодуля) <> Тип("Структура") Тогда
			ТекущийМодуль = ОписаниеМодуля;
			ТекущийМодуль.ПередНачаломРаботыСистемы(Параметры);
		Иначе
			ТекущийМодуль = ОписаниеМодуля.Модуль;
			Если ОписаниеМодуля.Номер = 2 Тогда
				ТекущийМодуль.ПередНачаломРаботыСистемы2(Параметры);
			ИначеЕсли ОписаниеМодуля.Номер = 3 Тогда
				ТекущийМодуль.ПередНачаломРаботыСистемы3(Параметры);
			ИначеЕсли ОписаниеМодуля.Номер = 4 Тогда
				ТекущийМодуль.ПередНачаломРаботыСистемы4(Параметры);
			ИначеЕсли ОписаниеМодуля.Номер = 5 Тогда
				ТекущийМодуль.ПередНачаломРаботыСистемы5(Параметры);
			КонецЕсли;
		КонецЕсли;
	Исключение
		СП_ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Запуск", Истина);
	КонецПопытки;
	Если СП_ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
КонецПроцедуры

Процедура СП_ДействияПередНачаломРаботыСистемыПослеВсехПроцедур(Неопределен, Контекст)
	Параметры = СП_ПараметрыОбработкиПередНачаломРаботыСистемы();

	Если Не СП_ПродолжитьДействияПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	Параметры.Вставить("ОбработкаПродолжения", Параметры.ОбработкаЗавершения);

	Попытка
		СП_УстановитьПараметрыФункциональныхОпцийИнтерфейсаПриЗапуске();
	Исключение
		СП_ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Запуск", Истина);
	КонецПопытки;
	Если СП_ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
КонецПроцедуры

Процедура СП_ПриНачалеРаботыСистемы(Знач ОповещениеЗавершения = Неопределено, НепрерывноеВыполнение = Истина) Экспорт
	Если СП_ВыполняетсяИнтерактивнаяОбработкаПередНачаломРаботыСистемы() Тогда
		Возврат;
	КонецЕсли;

	Если СтрНайти(ПараметрЗапуска, "ОтключитьЛогикуНачалаРаботыСистемы") > 0 Тогда
		Возврат;
	КонецЕсли;

	Если ОповещениеЗавершения <> Неопределено Тогда
		БазоваяПодсистемаКлиентСервер.ОН_ПроверитьПараметр("БазоваяПодсистемаКлиент.СП_ПриНачалеРаботыСистемы",
			"ОповещениеЗавершения", ОповещениеЗавершения, Тип("ОписаниеОповещения"));
	КонецЕсли;
	БазоваяПодсистемаКлиентСервер.ОН_ПроверитьПараметр("БазоваяПодсистемаКлиент.СП_ПриНачалеРаботыСистемы",
		"НепрерывноеВыполнение", НепрерывноеВыполнение, Тип("Булево"));

	Параметры = СП_ПараметрыОбработкиПриНачалеРаботыСистемы();

	// Внешние параметры описания результата.
	Параметры.Вставить("Отказ",										Ложь);
	Параметры.Вставить("Перезапустить",								Ложь);
	Параметры.Вставить("ДополнительныеПараметрыКоманднойСтроки",	"");

	// Внешние параметры управления выполнением.
	Параметры.Вставить("ИнтерактивнаяОбработка",					Неопределено); // ОписаниеОповещения.
	Параметры.Вставить("ОбработкаПродолжения",						Неопределено); // ОписаниеОповещения.
	Параметры.Вставить("НепрерывноеВыполнение",						НепрерывноеВыполнение);

	// Внутренние параметры.
	Параметры.Вставить("ОповещениеЗавершения",						ОповещениеЗавершения);
	Параметры.Вставить("ОбработкаЗавершения",						Новый ОписаниеОповещения(
		"СП_ДействияПриНачалеРаботыСистемыОбработкаЗавершения", ЭтотОбъект));

	// Подготовка перехода к следующей процедуре.
	Параметры.Вставить("ОбработкаПродолжения",						Новый ОписаниеОповещения(
		"СП_ДействияПриНачалеРаботыСистемыВИнтеграционнойПроцедуре", ЭтотОбъект));

	Попытка
		СП_УстановитьРасширенныйЗаголовокПриложения(Истина); // Для главного окна.

		Если НЕ СП_ОбработатьПараметрыЗапуска() Тогда
			Параметры.Отказ = Истина;
			ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);

			Возврат;
		КонецЕсли;
	Исключение
		СП_ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(),  "Запуск", Истина);
	КонецПопытки;
	Если СП_ИнтерактивнаяОбработкаПриНачалеРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
КонецПроцедуры

Функция СП_ИнтерактивнаяОбработкаПриНачалеРаботыСистемы(Параметры)
	Если Параметры.ИнтерактивнаяОбработка = Неопределено Тогда
		Если Параметры.Отказ Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);

			Возврат Истина;
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;

	ИнтерактивнаяОбработка = Параметры.ИнтерактивнаяОбработка;

	Параметры.НепрерывноеВыполнение		= Ложь;
	Параметры.ИнтерактивнаяОбработка	= Неопределено;

	ВыполнитьОбработкуОповещения(ИнтерактивнаяОбработка, Параметры);

	Возврат Истина;
КонецФункции

Процедура СП_ДействияПриНачалеРаботыСистемыОбработкаЗавершения(Неопределен, Контекст) Экспорт
	Параметры = СП_ПараметрыОбработкиПриНачалеРаботыСистемы(Истина);

	Параметры.ОбработкаПродолжения = Неопределено;
	Параметры.ОбработкаЗавершения  = Неопределено;

	Если НЕ Параметры.Отказ Тогда
		ПараметрыПриЗапускеПрограммы = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"];
		Если ПараметрыПриЗапускеПрограммы.Свойство("ПропуститьОчисткуСкрытияРабочегоСтола") Тогда
			ПараметрыПриЗапускеПрограммы.Удалить("ПропуститьОчисткуСкрытияРабочегоСтола");
		КонецЕсли;

		СП_СкрытьРабочийСтолПриНачалеРаботыСистемы(Ложь);
	КонецЕсли;

	Если Параметры.ОповещениеЗавершения <> Неопределено Тогда
		Результат = Новый Структура;
		Результат.Вставить("Отказ",										Параметры.Отказ);
		Результат.Вставить("Перезапустить",								Параметры.Перезапустить);
		Результат.Вставить("ДополнительныеПараметрыКоманднойСтроки",	Параметры.ДополнительныеПараметрыКоманднойСтроки);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеЗавершения, Результат);

		Возврат;
	Иначе
		Если Параметры.Отказ Тогда
			Если Параметры.Перезапустить <> Истина Тогда
				ПрекратитьРаботуСистемы();
			ИначеЕсли ЗначениеЗаполнено(Параметры.ДополнительныеПараметрыКоманднойСтроки) Тогда
				ПрекратитьРаботуСистемы(Параметры.Перезапустить, Параметры.ДополнительныеПараметрыКоманднойСтроки);
			Иначе
				ПрекратитьРаботуСистемы(Параметры.Перезапустить);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура СП_ДействияПриНачалеРаботыСистемыВИнтеграционнойПроцедуре(Неопределен, Контекст) Экспорт
	Параметры = СП_ПараметрыОбработкиПриНачалеРаботыСистемы();

	Если Не СП_ПродолжитьДействияПриНачалеРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	Параметры.Вставить("ОбработкаПродолжения", Новый ОписаниеОповещения(
		"СП_ДействияПриНачалеРаботыСистемыВМодуляхИнтеграционнойПроцедуры", ЭтотОбъект));

	Параметры.Вставить("ИндексТекущегоМодуля", 0);
	Параметры.Вставить("ДобавленныеМодули", Новый Массив);
	Попытка
		Параметры.Вставить("Модули", Новый Массив);
		ИнтеграцияПодсистемКлиент.ПриНачалеРаботыСистемы(Параметры);
		Параметры.Вставить("ДобавленныеМодули", Параметры.Модули);
		Параметры.Удалить("Модули");
	Исключение
		СП_ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Запуск");
	КонецПопытки;
	Если СП_ИнтерактивнаяОбработкаПриНачалеРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
КонецПроцедуры

Процедура СП_ДействияПриНачалеРаботыСистемыВМодуляхИнтеграционнойПроцедуры(Неопределен, Контекст) Экспорт
	Параметры = СП_ПараметрыОбработкиПриНачалеРаботыСистемы();

	Если Не СП_ПродолжитьДействияПриНачалеРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	Если Параметры.ИндексТекущегоМодуля >= Параметры.ДобавленныеМодули.Количество() Тогда
		СП_ДействияПриНачалеРаботыСистемыПослеВсехПроцедур(Неопределено, Неопределено);

		Возврат;
	КонецЕсли;

	ОписаниеМодуля					= Параметры.ДобавленныеМодули[Параметры.ИндексТекущегоМодуля];
	Параметры.ИндексТекущегоМодуля	= Параметры.ИндексТекущегоМодуля + 1;

	Попытка
		Если ТипЗнч(ОписаниеМодуля) <> Тип("Структура") Тогда
			ТекущийМодуль = ОписаниеМодуля;
			ТекущийМодуль.ПриНачалеРаботыСистемы(Параметры);
		Иначе
			ТекущийМодуль = ОписаниеМодуля.Модуль;
			Если ОписаниеМодуля.Номер = 2 Тогда
				ТекущийМодуль.ПриНачалеРаботыСистемы2(Параметры);
			ИначеЕсли ОписаниеМодуля.Номер = 3 Тогда
				ТекущийМодуль.ПриНачалеРаботыСистемы3(Параметры);
			ИначеЕсли ОписаниеМодуля.Номер = 4 Тогда
				ТекущийМодуль.ПриНачалеРаботыСистемы4(Параметры);
			КонецЕсли;
		КонецЕсли;
	Исключение
		СП_ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Запуск");
	КонецПопытки;
	Если СП_ИнтерактивнаяОбработкаПриНачалеРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
КонецПроцедуры

Процедура СП_ДействияПриНачалеРаботыСистемыПослеВсехПроцедур(Неопределен, Контекст)
	Параметры = СП_ПараметрыОбработкиПриНачалеРаботыСистемы();

	Если Не СП_ПродолжитьДействияПриНачалеРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	Параметры.Вставить("ОбработкаПродолжения", Параметры.ОбработкаЗавершения);

	Попытка
		ИнтеграцияПодсистемКлиент.ПослеНачалаРаботыСистемы();
	Исключение
		СП_ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Запуск");
	КонецПопытки;
	Если СП_ИнтерактивнаяОбработкаПриНачалеРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
КонецПроцедуры

Процедура СП_ПослеНачалаРаботыСистемы() Экспорт
	ПараметрыКлиента = БазоваяПодсистемаКлиентПовтИсп.СП_ПараметрыРаботыКлиентаПриЗапуске();
	Если ПараметрыКлиента.ТребуетсяПоказРекомендацииПоОбъемуОперативнойПамяти Тогда
		ПодключитьОбработчикОжидания("СП_ПоказатьРекомендациюПоОбъемуОперативнойПамяти", 10, Истина);
	КонецЕсли;

	ПодключитьОбработчикОжидания("СП_ОбработчикОжиданияСтандартныхПериодическихПроверок", 20 * 60, Истина);
КонецПроцедуры

Функция СП_ПродолжитьДействияПриНачалеРаботыСистемы(Параметры)
	Если Параметры.Отказ Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);

		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
КонецФункции

Функция СП_ПараметрыОбработкиПередНачаломРаботыСистемы(Удалить = Ложь)
	ИмяПараметра	= "СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы";
	Свойства		= ПараметрыПриложения[ИмяПараметра];
	Если Свойства = Неопределено Тогда
		Свойства = Новый Структура;
		ПараметрыПриложения.Вставить(ИмяПараметра, Свойства);
	КонецЕсли;

	ИмяСвойства = "ПараметрыОбработкиПередНачаломРаботыСистемы";
	Если Свойства.Свойство(ИмяСвойства) Тогда
		Параметры = Свойства[ИмяСвойства];
	Иначе
		Параметры = Новый Структура;
		Свойства.Вставить(ИмяСвойства, Параметры);
	КонецЕсли;

	Если Удалить Тогда
		Свойства.Удалить(ИмяСвойства);
	КонецЕсли;

	Возврат Параметры;
КонецФункции

Функция СП_ПараметрыОбработкиПриНачалеРаботыСистемы(Удалить = Ложь)
	ИмяПараметра	= "СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы";
	Свойства		= ПараметрыПриложения[ИмяПараметра];
	Если Свойства = Неопределено Тогда
		Свойства = Новый Структура;
		ПараметрыПриложения.Вставить(ИмяПараметра, Свойства);
	КонецЕсли;

	ИмяСвойства = "ПараметрыОбработкиПриНачалеРаботыСистемы";
	Если Свойства.Свойство(ИмяСвойства) Тогда
		Параметры = Свойства[ИмяСвойства];
	Иначе
		Параметры = Новый Структура;
		Свойства.Вставить(ИмяСвойства, Параметры);
	КонецЕсли;

	Если Удалить Тогда
		Свойства.Удалить(ИмяСвойства);
	КонецЕсли;

	Возврат Параметры;
КонецФункции

Процедура СП_ПередЗавершениемРаботыСистемы(Отказ = Ложь, ТекстПредупреждения = "") Экспорт
	Если СтрНайти(ПараметрЗапуска, "ОтключитьЛогикуНачалаРаботыСистемы") > 0 Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПриЗапускеПрограммы = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"];

	Если ПараметрыПриЗапускеПрограммы.Свойство("СкрытьРабочийСтолПриНачалеРаботыСистемы") Тогда
		// Произошла попытка закрытия до окончания запуска.
	#Если ВебКлиент Тогда
		// В веб-клиенте это возможно в штатном случае (при закрытии страницы в целом),
		// поэтому закрытие блокируется, так как его все равно можно выполнить принудительно,
		// а в случае случайного закрытия у пользователя должна быть возможность остаться на странице.
		Отказ = Истина;
	#Иначе
		// Не в веб-клиенте это возможно в случае ошибок в немодальной последовательности запуска.
		// То есть нет ни одного окна блокирующего весь интерфейс. Закрытие нужно разрешить,
		// но без стандартных процедур перед завершение работы системы, так как они могут
		// привести к ошибке в процессе закрытия из-за незавершенного запуска.
	#КонецЕсли
		Возврат;
	КонецЕсли;

	Если ПараметрыПриложения["СтандартныеПодсистемы.ПропуститьПредупреждениеПередЗавершениемРаботыСистемы"] = Истина Тогда
		Возврат;
	КонецЕсли;

	Предупреждения = Новый Массив;
	ИнтеграцияПодсистемКлиент.ПередЗавершениемРаботыСистемы(Отказ, Предупреждения);

	Если Предупреждения.Количество() = 0 Тогда
		Если Не СП_ПараметрКлиента("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы") Тогда
			Возврат;
		КонецЕсли;

		ТекстПредупреждения	= "Завершить работу с программой?";
		Отказ				= Истина;
	Иначе
		Отказ					= Истина;
		МассивПредупреждений	= Новый Массив;
		Для Каждого Предупреждение Из Предупреждения Цикл
			МассивПредупреждений.Добавить(Предупреждение.ТекстПредупреждения);
		КонецЦикла;
		Если Не ПустаяСтрока(ТекстПредупреждения) Тогда
			ТекстПредупреждения = ТекстПредупреждения + Символы.ПС;
		КонецЕсли;
		ТекстПредупреждения = ТекстПредупреждения + СтрСоединить(МассивПредупреждений, Символы.ПС);
		ПодключитьОбработчикОжидания("СП_ПоказатьПредупрежденияПриЗавершенииРаботы", 0.1, Истина);
	КонецЕсли;

	ИмяГлобальногоПараметра = "СтандартныеПодсистемы.ПараметрыКлиента";
	ПараметрыПриложения[ИмяГлобальногоПараметра].Вставить("ПредупрежденияПриЗавершенииРаботы", Предупреждения);
КонецПроцедуры

Процедура СП_ОбновитьПараметрыРаботыКлиента(Параметры, ПервыйВызов = Ложь, ОбновитьПовторноИспользуемыеЗначения = Истина)
	Если ПервыйВызов Тогда
		ИмяПараметра = "СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы";
		Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
			ПараметрыПриложения.Вставить(ИмяПараметра, Новый Структура);
		КонецЕсли;
		ИмяПараметра = "СтандартныеПодсистемы.ЗапускПрограммыЗавершен";
		Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
			ПараметрыПриложения.Вставить(ИмяПараметра, Ложь);
		КонецЕсли;
	ИначеЕсли Параметры.КоличествоПолученныхПараметровКлиента = Параметры.ПолученныеПараметрыКлиента.Количество() Тогда
		Возврат;
	КонецЕсли;

	Параметры.Вставить("КоличествоПолученныхПараметровКлиента", Параметры.ПолученныеПараметрыКлиента.Количество());

	ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"].Вставить(
		"ПолученныеПараметрыКлиента", Параметры.ПолученныеПараметрыКлиента);

	Если ОбновитьПовторноИспользуемыеЗначения Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
КонецПроцедуры

Процедура СП_СкрытьРабочийСтолПриНачалеРаботыСистемы(Скрыть = Истина, УжеВыполненоНаСервере = Ложь) Экспорт
	ПараметрыПриЗапускеПрограммы = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"];

	Если Скрыть Тогда
		Если НЕ ПараметрыПриЗапускеПрограммы.Свойство("СкрытьРабочийСтолПриНачалеРаботыСистемы") Тогда
			ПараметрыПриЗапускеПрограммы.Вставить("СкрытьРабочийСтолПриНачалеРаботыСистемы");
			Если НЕ УжеВыполненоНаСервере Тогда
				БазоваяПодсистемаВызовСервера.СП_СкрытьРабочийСтолПриНачалеРаботыСистемы();
			КонецЕсли;
			ОбновитьИнтерфейс();
		КонецЕсли;
	Иначе
		Если ПараметрыПриЗапускеПрограммы.Свойство("СкрытьРабочийСтолПриНачалеРаботыСистемы") Тогда
			ПараметрыПриЗапускеПрограммы.Удалить("СкрытьРабочийСтолПриНачалеРаботыСистемы");
			Если НЕ УжеВыполненоНаСервере Тогда
				БазоваяПодсистемаВызовСервера.СП_СкрытьРабочийСтолПриНачалеРаботыСистемы(Ложь);
			КонецЕсли;
			ТекущееАктивноеОкно = АктивноеОкно();
			ОбновитьИнтерфейс();
			Если ТекущееАктивноеОкно <> Неопределено Тогда
				ТекущееАктивноеОкно.Активизировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура СП_УстановитьПараметрыФункциональныхОпцийИнтерфейсаПриЗапуске()
	ПараметрыПриЗапускеПрограммы = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"];

	Если ТипЗнч(ПараметрыПриЗапускеПрограммы) <> Тип("Структура")
	 Или Не ПараметрыПриЗапускеПрограммы.Свойство("ОпцииИнтерфейса") Тогда
		// Обработка ошибки запуска.
		Возврат;
	КонецЕсли;

	Если ПараметрыПриЗапускеПрограммы.Свойство("ОпцииИнтерфейсаУстановлены") Тогда
		Возврат;
	КонецЕсли;

	ОпцииИнтерфейса = Новый Структура(ПараметрыПриЗапускеПрограммы.ОпцииИнтерфейса);

	// Установка параметров функциональных опций производится только тогда, когда они заданы.
	Если ОпцииИнтерфейса.Количество() > 0 Тогда
		УстановитьПараметрыФункциональныхОпцийИнтерфейса(ОпцииИнтерфейса);
	КонецЕсли;

	ПараметрыПриЗапускеПрограммы.Вставить("ОпцииИнтерфейсаУстановлены");
КонецПроцедуры

Функция СП_ПродолжитьДействияПередНачаломРаботыСистемы(Параметры)
	Если Параметры.Отказ Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);
		Возврат Ложь;
	КонецЕсли;

	СП_ОбновитьПараметрыРаботыКлиента(Параметры);

	Возврат Истина;
КонецФункции

Процедура СП_ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке, Событие, ПрекратитьРаботу = Ложь)
	Если Событие = "Запуск" Тогда
		Если ПрекратитьРаботу Тогда
			Параметры.Отказ = Истина;
			Параметры.ОбработкаПродолжения = Параметры.ОбработкаЗавершения;
		КонецЕсли;
	Иначе
		ДополнительныеПараметры = Новый Структура(
			"Параметры, ОбработкаПродолжения", Параметры, Параметры.ОбработкаПродолжения);

		Параметры.ОбработкаПродолжения = Новый ОписаниеОповещения(
			"СП_ДействияПередЗавершениемРаботыСистемыПослеОбработкиОшибки", ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;

	НачалоОписанияОшибки = БазоваяПодсистемаВызовСервера.СП_ЗаписатьОшибкуВЖурналРегистрацииПриЗапускеИлиЗавершении(
		ПрекратитьРаботу, Событие, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	НачалоОписанияОшибки = "";

	ТекстПредупреждения = НачалоОписанияОшибки + Символы.ПС
		+ "Техническая информация об ошибке записана в журнал регистрации."
		+ Символы.ПС + Символы.ПС
		+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке);

	ИнтерактивнаяОбработка = Новый ОписаниеОповещения(
		"СП_ПоказатьПредупреждениеИПродолжить",
		ЭтотОбъект,
		ТекстПредупреждения);

	Параметры.ИнтерактивнаяОбработка = ИнтерактивнаяОбработка;
КонецПроцедуры

Процедура СП_ДействияПередЗавершениемРаботыСистемыПослеОбработкиОшибки(Неопределен, ДополнительныеПараметры) Экспорт
	Параметры						= ДополнительныеПараметры.Параметры;
	Параметры.ОбработкаПродолжения	= ДополнительныеПараметры.ОбработкаПродолжения;

	Если Параметры.Отказ Тогда
		Параметры.Отказ = Ложь;
		ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);
	Иначе
		ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	КонецЕсли;
КонецПроцедуры

Процедура СП_ДействияПередЗавершениемРаботыСистемы(Параметры) Экспорт
	Параметры.Вставить("ОбработкаПродолжения", Параметры.ОбработкаЗавершения);

	Попытка
		СП_ОткрытьФормуПредупрежденийПриЗавершенииРаботы(Параметры);
	Исключение
		СП_ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Завершение");
	КонецПопытки;
	Если СП_ИнтерактивнаяОбработкаПередЗавершениемРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
КонецПроцедуры

Процедура СП_ОткрытьФормуПредупрежденийПриЗавершенииРаботы(Параметры)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Параметры",		Параметры);
	ДополнительныеПараметры.Вставить("ВариантФормы",	"Вопрос");

	ОбработкаОтвета = Новый ОписаниеОповещения("СП_ПослеЗакрытияФормыПредупрежденийПриЗавершенииРаботы",
		ЭтотОбъект, ДополнительныеПараметры);

	Предупреждения = Параметры.Предупреждения;
	Параметры.Удалить("Предупреждения");

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Предупреждения", Предупреждения);

	ИмяФормы = "ОбщаяФорма.ПредупрежденияПриЗавершенииРаботы";

	Если Предупреждения.Количество() = 1 Тогда
		Если Не ПустаяСтрока(Предупреждения[0].ТекстФлажка) Тогда
			ДополнительныеПараметры.Вставить("ВариантФормы", "СтандартнаяФорма");
			ПараметрыОткрытияФормы = Новый Структура;
			ПараметрыОткрытияФормы.Вставить("ИмяФормы",				ИмяФормы);
			ПараметрыОткрытияФормы.Вставить("ПараметрыФормы",		ПараметрыФормы);
			ПараметрыОткрытияФормы.Вставить("ОбработкаОтвета",		ОбработкаОтвета);
			ПараметрыОткрытияФормы.Вставить("РежимОткрытияОкна",	Неопределено);
			Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения(
				"СП_ИнтерактивнаяОбработкаПредупрежденийПриЗавершенииРаботы", ЭтотОбъект, ПараметрыОткрытияФормы);
		Иначе
			ДополнительныеПараметры.Вставить("ВариантФормы", "ПрикладнаяФорма");
			СП_ОткрытьПрикладнуюФормуПредупреждения(Параметры, ОбработкаОтвета, Предупреждения[0], ИмяФормы, ПараметрыФормы);
		КонецЕсли;
	Иначе
		ДополнительныеПараметры.Вставить("ВариантФормы", "СтандартнаяФорма");
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("ИмяФормы",				ИмяФормы);
		ПараметрыОткрытияФормы.Вставить("ПараметрыФормы",		ПараметрыФормы);
		ПараметрыОткрытияФормы.Вставить("ОбработкаОтвета",		ОбработкаОтвета);
		ПараметрыОткрытияФормы.Вставить("РежимОткрытияОкна",	Неопределено);
		Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения(
			"СП_ИнтерактивнаяОбработкаПредупрежденийПриЗавершенииРаботы", ЭтотОбъект, ПараметрыОткрытияФормы);
	КонецЕсли;
КонецПроцедуры

Процедура СП_ДействияПередЗавершениемРаботыСистемыОбработкаЗавершения(Неопределен, Параметры) Экспорт
	Параметры.ОбработкаПродолжения = Неопределено;
	Параметры.ОбработкаЗавершения  = Неопределено;

	Если Не Параметры.Отказ
	   И Не Параметры.НепрерывноеВыполнение Тогда

		ИмяПараметра = "СтандартныеПодсистемы.ПропуститьПредупреждениеПередЗавершениемРаботыСистемы";
		ПараметрыПриложения.Вставить(ИмяПараметра, Истина);

		ЗавершитьРаботуСистемы();
	КонецЕсли;
КонецПроцедуры

Процедура СП_ПослеЗакрытияФормыПредупрежденийПриЗавершенииРаботы(Результат, ДополнительныеПараметры) Экспорт
	Параметры = ДополнительныеПараметры.Параметры;

	Если ДополнительныеПараметры.ВариантФормы = "Вопрос" Тогда
		Если Результат = Неопределено Или Результат.Значение <> КодВозвратаДиалога.Да Тогда
			Параметры.Отказ = Истина;
		КонецЕсли;
	ИначеЕсли ДополнительныеПараметры.ВариантФормы = "СтандартнаяФорма" Тогда
		Если Результат = Истина Или Результат = Неопределено Тогда
			Параметры.Отказ = Истина;
		КонецЕсли;
	Иначе // ПрикладнаяФорма
		Если Результат = Истина Или Результат = Неопределено Или Результат = КодВозвратаДиалога.Нет Тогда
			Параметры.Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
КонецПроцедуры

Процедура СП_ОткрытьПрикладнуюФормуПредупреждения(Параметры, ОбработкаОтвета, ПредупреждениеПользователю, ИмяФормы, ПараметрыФормы)
	ТекстГиперссылки = "";
	Если НЕ ПредупреждениеПользователю.Свойство("ТекстГиперссылки", ТекстГиперссылки) Тогда
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(ТекстГиперссылки) Тогда
		Возврат;
	КонецЕсли;

	ДействиеПриНажатииГиперссылки = Неопределено;
	Если НЕ ПредупреждениеПользователю.Свойство("ДействиеПриНажатииГиперссылки", ДействиеПриНажатииГиперссылки) Тогда
		Возврат;
	КонецЕсли;

	ДействиеГиперссылка	= ПредупреждениеПользователю.ДействиеПриНажатииГиперссылки;
	Форма				= Неопределено;
	Если ДействиеГиперссылка.Свойство("ПрикладнаяФормаПредупреждения", Форма) Тогда
		ПараметрыФормы = Неопределено;
		Если ДействиеГиперссылка.Свойство("ПараметрыПрикладнойФормыПредупреждения", ПараметрыФормы) Тогда
			Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
				ПараметрыФормы.Вставить("ЗавершениеРаботыПрограммы", Истина);
			ИначеЕсли ПараметрыФормы = Неопределено Тогда
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("ЗавершениеРаботыПрограммы", Истина);
			КонецЕсли;

			ПараметрыФормы.Вставить("ЗаголовокКнопкиДа",  "Завершить");
			ПараметрыФормы.Вставить("ЗаголовокКнопкиНет", "Отмена");

		КонецЕсли;
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("ИмяФормы",				Форма);
		ПараметрыОткрытияФормы.Вставить("ПараметрыФормы",		ПараметрыФормы);
		ПараметрыОткрытияФормы.Вставить("ОбработкаОтвета",		ОбработкаОтвета);
		ПараметрыОткрытияФормы.Вставить("РежимОткрытияОкна",	ДействиеГиперссылка.РежимОткрытияОкна);
		Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения(
			"СП_ИнтерактивнаяОбработкаПредупрежденийПриЗавершенииРаботы", ЭтотОбъект, ПараметрыОткрытияФормы);

	ИначеЕсли ДействиеГиперссылка.Свойство("Форма", Форма) Тогда
		ПараметрыФормы = Неопределено;
		Если ДействиеГиперссылка.Свойство("ПараметрыФормы", ПараметрыФормы) Тогда
			Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
				ПараметрыФормы.Вставить("ЗавершениеРаботыПрограммы", Истина);
			ИначеЕсли ПараметрыФормы = Неопределено Тогда
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("ЗавершениеРаботыПрограммы", Истина);
			КонецЕсли;
		КонецЕсли;
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("ИмяФормы",				Форма);
		ПараметрыОткрытияФормы.Вставить("ПараметрыФормы",		ПараметрыФормы);
		ПараметрыОткрытияФормы.Вставить("ОбработкаОтвета",		ОбработкаОтвета);
		ПараметрыОткрытияФормы.Вставить("РежимОткрытияОкна",	ДействиеГиперссылка.РежимОткрытияОкна);
		Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения(
			"СП_ИнтерактивнаяОбработкаПредупрежденийПриЗавершенииРаботы", ЭтотОбъект, ПараметрыОткрытияФормы);
	КонецЕсли;
КонецПроцедуры

Процедура СП_ИнтерактивнаяОбработкаПредупрежденийПриЗавершенииРаботы(Параметры, ПараметрыОткрытияФормы) Экспорт
	ОткрытьФорму(
		ПараметрыОткрытияФормы.ИмяФормы,
		ПараметрыОткрытияФормы.ПараметрыФормы, , , , ,
		ПараметрыОткрытияФормы.ОбработкаОтвета,
		ПараметрыОткрытияФормы.РежимОткрытияОкна);
КонецПроцедуры

Функция СП_ИнтерактивнаяОбработкаПередЗавершениемРаботыСистемы(Параметры)
	Если Параметры.ИнтерактивнаяОбработка = Неопределено Тогда
		Если Параметры.Отказ Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);

			Возврат Истина;
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;

	Если Не Параметры.НепрерывноеВыполнение Тогда
		ИнтерактивнаяОбработка = Параметры.ИнтерактивнаяОбработка;
		Параметры.ИнтерактивнаяОбработка = Неопределено;

		ВыполнитьОбработкуОповещения(ИнтерактивнаяОбработка, Параметры);
	Иначе
		// Выполнен вызов из обработчика события ПередЗавершениемРаботыСистемы для подготовки
		// выполнения интерактивной обработки через обработчик ожидания.
		ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"].Вставить("ПараметрыОбработкиЗавершения", Параметры);
		Параметры.НепрерывноеВыполнение = Ложь;
		ПодключитьОбработчикОжидания(
			"СП_ОбработчикОжиданияИнтерактивнаяОбработкаПередЗавершениемРаботыСистемы", 0.1, Истина);
	КонецЕсли;

	Возврат Истина;
КонецФункции

Процедура СП_НачатьИнтерактивнуюОбработкуПередЗавершениемРаботыСистемы() Экспорт
	ПараметрыПриЗапускеПрограммы = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"];
	Если НЕ ПараметрыПриЗапускеПрограммы.Свойство("ПараметрыОбработкиЗавершения") Тогда
		Возврат;
	КонецЕсли;

	Параметры = ПараметрыПриЗапускеПрограммы.ПараметрыОбработкиЗавершения;
	ПараметрыПриЗапускеПрограммы.Удалить("ПараметрыОбработкиЗавершения");

	ИнтерактивнаяОбработка				= Параметры.ИнтерактивнаяОбработка;
	Параметры.ИнтерактивнаяОбработка	= Неопределено;
	ВыполнитьОбработкуОповещения(ИнтерактивнаяОбработка, Параметры);
КонецПроцедуры

Процедура СП_ПоказатьПредупреждениеИПродолжить(Параметры, ОписаниеПредупреждения) Экспорт
	ОповещениеСРезультатом = Параметры.ОбработкаПродолжения;

	Если ОписаниеПредупреждения = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеСРезультатом);

		Возврат;
	КонецЕсли;

	Кнопки													= Новый СписокЗначений;
	ПараметрыВопроса										= СП_ПараметрыВопросаПользователю();
	ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос	= Ложь;
	ПараметрыВопроса.БлокироватьВесьИнтерфейс				= Истина;
	ПараметрыВопроса.Картинка								= БиблиотекаКартинок.Предупреждение32;

	Если Параметры.Отказ Тогда
		Кнопки.Добавить("Завершить", "Завершить работу");
		ПараметрыВопроса.КнопкаПоУмолчанию = "Завершить";
	Иначе
		Кнопки.Добавить("Продолжить", "Продолжить");
		Кнопки.Добавить("Завершить",  "Завершить работу");
		ПараметрыВопроса.КнопкаПоУмолчанию = "Продолжить";
	КонецЕсли;

	Если ТипЗнч(ОписаниеПредупреждения) = Тип("Структура") Тогда
		ТекстПредупреждения = ОписаниеПредупреждения.ТекстПредупреждения;
		Кнопки = ОписаниеПредупреждения.Кнопки;
		ЗаполнитьЗначенияСвойств(ПараметрыВопроса, ОписаниеПредупреждения.ПараметрыВопроса);
	Иначе
		ТекстПредупреждения = ОписаниеПредупреждения;
	КонецЕсли;

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("СП_ПоказатьПредупреждениеИПродолжитьЗавершение", ЭтотОбъект, Параметры);
	СП_ПоказатьВопросПользователю(ОповещениеОЗакрытии, ТекстПредупреждения, Кнопки, ПараметрыВопроса);
КонецПроцедуры

Процедура СП_ПоказатьПредупреждениеИПродолжитьЗавершение(Результат, Параметры) Экспорт
	Если Результат <> Неопределено Тогда
		Если Результат.Значение = "Завершить" Тогда
			Параметры.Отказ = Истина;
		ИначеЕсли Результат.Значение = "Перезапустить" Или Результат.Значение = КодВозвратаДиалога.Таймаут Тогда
			Параметры.Отказ = Истина;
			Параметры.Перезапустить = Истина;
		КонецЕсли;
	КонецЕсли;
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
КонецПроцедуры

Процедура СП_ПоказатьВопросПользователю(ОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки, ДополнительныеПараметры = Неопределено) Экспорт
	Если ДополнительныеПараметры <> Неопределено Тогда
		Параметры = ДополнительныеПараметры;
	Иначе
		Параметры = Новый Структура;
	КонецЕсли;

	БазоваяПодсистемаКлиентСервер.ОН_ДополнитьСтруктуру(Параметры, СП_ПараметрыВопросаПользователю(), Ложь);

	Если ТипЗнч(Кнопки) = Тип("РежимДиалогаВопрос") Тогда
		Если      Кнопки = РежимДиалогаВопрос.ДаНет Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ДаНет";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ДаНетОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ДаНетОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ОК Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ОК";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ОКОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ОКОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ПовторитьОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ПовторитьОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ПрерватьПовторитьПропустить Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ПрерватьПовторитьПропустить";
		КонецЕсли;
	Иначе
		КнопкиПараметр = Кнопки;
	КонецЕсли;

	Если ТипЗнч(Параметры.КнопкаПоУмолчанию) = Тип("КодВозвратаДиалога") Тогда
		Параметры.КнопкаПоУмолчанию = СП_КодВозвратаДиалогаВСтроку(Параметры.КнопкаПоУмолчанию);
	КонецЕсли;

	Если ТипЗнч(Параметры.КнопкаТаймаута) = Тип("КодВозвратаДиалога") Тогда
		Параметры.КнопкаТаймаута = СП_КодВозвратаДиалогаВСтроку(Параметры.КнопкаТаймаута);
	КонецЕсли;

	Параметры.Вставить("Кнопки",         КнопкиПараметр);
	Параметры.Вставить("ТекстСообщения", ТекстВопроса);

	ОткрытьФорму("ОбщаяФорма.Вопрос", Параметры,,,,,ОписаниеОповещенияОЗавершении);
КонецПроцедуры

Функция СП_ПараметрыВопросаПользователю() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("КнопкаПоУмолчанию",						Неопределено);
	Параметры.Вставить("Таймаут",								0);
	Параметры.Вставить("КнопкаТаймаута",						Неопределено);
	Параметры.Вставить("Заголовок",								КлиентскоеПриложение.ПолучитьЗаголовок());
	Параметры.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос",	Истина);
	Параметры.Вставить("БольшеНеЗадаватьЭтотВопрос",			Ложь);
	Параметры.Вставить("БлокироватьВесьИнтерфейс",				Ложь);
	Параметры.Вставить("Картинка",								БиблиотекаКартинок.Вопрос32);

	Возврат Параметры;
КонецФункции

Функция СП_КодВозвратаДиалогаВСтроку(Значение)
	Результат = "КодВозвратаДиалога." + Строка(Значение);

	Если Значение = КодВозвратаДиалога.Да Тогда
		Результат = "КодВозвратаДиалога.Да";
	ИначеЕсли Значение = КодВозвратаДиалога.Нет Тогда
		Результат = "КодВозвратаДиалога.Нет";
	ИначеЕсли Значение = КодВозвратаДиалога.ОК Тогда
		Результат = "КодВозвратаДиалога.ОК";
	ИначеЕсли Значение = КодВозвратаДиалога.Отмена Тогда
		Результат = "КодВозвратаДиалога.Отмена";
	ИначеЕсли Значение = КодВозвратаДиалога.Повторить Тогда
		Результат = "КодВозвратаДиалога.Повторить";
	ИначеЕсли Значение = КодВозвратаДиалога.Прервать Тогда
		Результат = "КодВозвратаДиалога.Прервать";
	ИначеЕсли Значение = КодВозвратаДиалога.Пропустить Тогда
		Результат = "КодВозвратаДиалога.Пропустить";
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция СП_ВыполняетсяИнтерактивнаяОбработкаПередНачаломРаботыСистемы()
	ПараметрыПриЗапускеПрограммы = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"];

	Если НЕ ПараметрыПриЗапускеПрограммы.Свойство("ПараметрыОбработки") Тогда
		Возврат Ложь;
	КонецЕсли;

	Параметры = ПараметрыПриЗапускеПрограммы.ПараметрыОбработки;

	Если Параметры.ИнтерактивнаяОбработка <> Неопределено Тогда
		Параметры.НепрерывноеВыполнение		= Ложь;
		ИнтерактивнаяОбработка				= Параметры.ИнтерактивнаяОбработка;
		Параметры.ИнтерактивнаяОбработка	= Неопределено;
		ВыполнитьОбработкуОповещения(ИнтерактивнаяОбработка, Параметры);
		ПараметрыПриЗапускеПрограммы.Удалить("ПараметрыОбработки");

		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

Процедура СП_УстановитьРасширенныйЗаголовокПриложения(ПриЗапуске = Ложь) Экспорт
	ПараметрыКлиента = ?(ПриЗапуске, БазоваяПодсистемаКлиентПовтИсп.СП_ПараметрыРаботыКлиентаПриЗапуске(),
		БазоваяПодсистемаКлиентПовтИсп.СП_ПараметрыРаботыКлиента());

	ПредставлениеЗаголовка		= ПараметрыКлиента.ЗаголовокПриложения;
	ПредставлениеКонфигурации	= ПараметрыКлиента.ПодробнаяИнформация;

	Если ПустаяСтрока(СокрЛП(ПредставлениеЗаголовка)) Тогда
		Если ПараметрыКлиента.Свойство("ПредставлениеОбластиДанных") Тогда
			ШаблонЗаголовка		= "%1 / %2";
			ЗаголовокПриложения	= СтрШаблон(ШаблонЗаголовка, ПараметрыКлиента.ПредставлениеОбластиДанных,
				ПредставлениеКонфигурации);
		Иначе
			ШаблонЗаголовка		= "%1";
			ЗаголовокПриложения	= СтрШаблон(ШаблонЗаголовка, ПредставлениеКонфигурации);
		КонецЕсли;
	Иначе
		ШаблонЗаголовка		= "%1 / %2";
		ЗаголовокПриложения	= СтрШаблон(ШаблонЗаголовка,
			СокрЛП(ПредставлениеЗаголовка), ПредставлениеКонфигурации);
	КонецЕсли;

	КлиентскоеПриложение.УстановитьЗаголовок(ЗаголовокПриложения);
КонецПроцедуры

Функция СП_ЗапускПрограммыЗавершен() Экспорт
	ИмяПараметра = "СтандартныеПодсистемы.ЗапускПрограммыЗавершен";
	Если ПараметрыПриложения[ИмяПараметра] = Истина Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

Процедура СП_ЗаполнитьПараметрыКлиента(ПараметрыКлиента) Экспорт
	ИмяПараметра = "СтандартныеПодсистемы.ПараметрыКлиента";
	Если ТипЗнч(ПараметрыПриложения[ИмяПараметра]) <> Тип("Структура") Тогда
		ПараметрыПриложения[ИмяПараметра] = Новый Структура;
		ПараметрыПриложения[ИмяПараметра].Вставить("ИнформационнаяБазаФайловая");
		ПараметрыПриложения[ИмяПараметра].Вставить("ЭтоСеансВнешнегоПользователя");
		ПараметрыПриложения[ИмяПараметра].Вставить("АвторизованныйПользователь");
		ПараметрыПриложения[ИмяПараметра].Вставить("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы");
		ПараметрыПриложения[ИмяПараметра].Вставить("ПараметрыАвтономнойРаботы");
		ПараметрыПриложения[ИмяПараметра].Вставить("ПерсональныеНастройкиРаботыСФайлами");
		ПараметрыПриложения[ИмяПараметра].Вставить("КоличествоЗанятыхФайлов");
		ПараметрыПриложения[ИмяПараметра].Вставить("РезервноеКопированиеИБПриЗавершенииРаботы");
		ПараметрыПриложения[ИмяПараметра].Вставить("СмещениеДатыКлиента");
		ПараметрыПриложения[ИмяПараметра].Вставить("КодОсновногоЯзыка");
		Если ПараметрыКлиента.Свойство("ОценкаПроизводительности") Тогда
			ПараметрыПриложения[ИмяПараметра].Вставить("ОценкаПроизводительности");
		КонецЕсли;
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(ПараметрыПриложения[ИмяПараметра], ПараметрыКлиента);
КонецПроцедуры

Функция СП_ОбработатьПараметрыЗапуска()
	Если ПустаяСтрока(ПараметрЗапуска) Тогда
		Возврат Истина;
	КонецЕсли;

	// Параметр может состоять из частей, разделенных символом ";".
	ПараметрыЗапуска = СтрРазделить(ПараметрЗапуска, ";", Ложь);

	Отказ = Ложь;

	// Зарезервировано для новых подсистем

	Возврат Не Отказ;
КонецФункции

Процедура СП_ОповеститьОНехваткеПамяти() Экспорт
	РекомендуемыйОбъем = БазоваяПодсистемаКлиентПовтИсп.СП_ПараметрыРаботыКлиентаПриЗапуске().РекомендуемыйОбъемОперативнойПамяти;

	Заголовок = "Скорость работы снижена";
	Текст = СтрШаблон(
		"Рекомендуется увеличить объем памяти до %1 Гб.", РекомендуемыйОбъем);

	ПоказатьОповещениеПользователя(Заголовок,
		"e1cib/app/Обработка.РекомендацияПоПовышениюСкоростиРаботы",
		Текст, БиблиотекаКартинок.Предупреждение32, СтатусОповещенияПользователя.Важное);
КонецПроцедуры

Процедура СП_ПриВыполненииСтандартныхПериодическихПроверок() Экспорт
	Параметры = Новый Структура;

	// Зарезервировано для новых подсистем

	БазоваяПодсистемаВызовСервера.СП_ПриВыполненииСтандартныхПериодическихПроверокНаСервере(Параметры);

	// Зарезервировано для новых подсистем

	Контекст = Новый Структура("Параметры", Параметры);

	ОбработкаПродолжения = Новый ОписаниеОповещения(
		"СП_ПриВыполненииСтандартныхПериодическихПроверокПодсистемаПользователи", ЭтотОбъект, Контекст);

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОбработкаПродолжения", ОбработкаПродолжения);

	Если Не Параметры.КонфигурацияБазыДанныхИзмененаДинамически Тогда
		ВыполнитьОбработкуОповещения(ОбработкаПродолжения);

		Возврат;
	КонецЕсли;

	ИмяПараметра = "СтандартныеПодсистемы.ПриВыполненииСтандартныхПериодическихПроверок";
	Если ПараметрыПриложения[ИмяПараметра] <> Неопределено Тогда
		ДатаСохраненная = ПараметрыПриложения[ИмяПараметра];
		ДатаСеанса      = ОН_ДатаСеанса();
		Если ТипЗнч(ДатаСохраненная) = Тип("Дата") И ДеньГода(ДатаСохраненная) = ДеньГода(ДатаСеанса) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ТекстВопроса =
		"Версия программы обновлена (внесены изменения в конфигурацию информационной базы).
		           |Для дальнейшей работы рекомендуется перезапустить программу.";
	ПоказатьОповещениеПользователя("Требуется перезапуск",,
		ТекстВопроса, БиблиотекаКартинок.Предупреждение32, СтатусОповещенияПользователя.Важное);

	КнопкиВопроса = Новый СписокЗначений;
	КнопкиВопроса.Добавить("Перезапустить",		"Перезапустить");
	КнопкиВопроса.Добавить("НапомнитьПозже",	"Напомнить позже");
	КнопкиВопроса.Добавить("НеСегодня",			"Не напоминать сегодня");

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СП_ПриВыполненииСтандартныхПериодическихПроверокЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, КнопкиВопроса,, "НапомнитьПозже", КлиентскоеПриложение.ПолучитьЗаголовок());
КонецПроцедуры

Процедура СП_ПриВыполненииСтандартныхПериодическихПроверокПодсистемаПользователи(Результат, Контекст) Экспорт
	ОбработкаПродолжения = Новый ОписаниеОповещения(
		"СП_ПриВыполненииСтандартныхПериодическихПроверокПодсистемаПользователиЗавершение", ЭтотОбъект, Контекст);

	ПользователиКлиент.сП_ПриВыполненииСтандартныхПериодическихПроверок(Контекст.Параметры, ОбработкаПродолжения);
КонецПроцедуры

Процедура СП_ПриВыполненииСтандартныхПериодическихПроверокПодсистемаПользователиЗавершение(Результат, Контекст) Экспорт
	ПодключитьОбработчикОжидания("СП_ОбработчикОжиданияСтандартныхПериодическихПроверок", 20 * 60, Истина);
КонецПроцедуры

Процедура СП_ПриВыполненииСтандартныхПериодическихПроверокЗавершение(Ответ, Контекст) Экспорт
	Если Ответ = "Перезапустить" Тогда
		ПараметрыПриложения.Вставить("СтандартныеПодсистемы.ПропуститьПредупреждениеПередЗавершениемРаботыСистемы", Истина);
		ЗавершитьРаботуСистемы(Истина, Истина);

		Возврат;
	КонецЕсли;

	Если Ответ = "НеСегодня" Тогда
		ИмяПараметра = "СтандартныеПодсистемы.ПриВыполненииСтандартныхПериодическихПроверок";
		ПараметрыПриложения.Вставить(ИмяПараметра, ОН_ДатаСеанса());
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Контекст.ОбработкаПродолжения);
КонецПроцедуры

Функция СП_ПараметрКлиента(ИмяПараметра = Неопределено) Экспорт
	ИмяГлобальногоПараметра	= "СтандартныеПодсистемы.ПараметрыКлиента";
	ПараметрыКлиента		= ПараметрыПриложения[ИмяГлобальногоПараметра];

	Если ПараметрыКлиента = Неопределено Тогда
		// Заполнение постоянных параметров клиента.
		БазоваяПодсистемаКлиентПовтИсп.СП_ПараметрыРаботыКлиентаПриЗапуске();
	КонецЕсли;

	Если ИмяПараметра = Неопределено Тогда
		Возврат ПараметрыКлиента;
	Иначе
		Возврат ПараметрыКлиента[ИмяПараметра];
	КонецЕсли;
КонецФункции

Функция СП_ЭтоЭлементДинамическогоСписка(ТаблицаИлиТекущиеДанные) Экспорт
	Если ТипЗнч(ТаблицаИлиТекущиеДанные) = Тип("ТаблицаФормы") Тогда
		ТекущиеДанные = ТаблицаИлиТекущиеДанные.ТекущиеДанные;
	Иначе
		ТекущиеДанные = ТаблицаИлиТекущиеДанные;
	КонецЕсли;

	Если ТипЗнч(ТекущиеДанные) <> Тип("ДанныеФормыСтруктура") И ТипЗнч(ТекущиеДанные) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ТекущиеДанные.Свойство("ГруппировкаСтроки") Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
КонецФункции

Процедура СП_УстановитьХранениеФормы(Форма, Хранение) Экспорт
	Хранилище = ПараметрыПриложения["СтандартныеПодсистемы.ВременноеХранилищеСсылокНаУправляемыеФормы"];
	Если Хранилище = Неопределено Тогда
		Хранилище = Новый Соответствие;
		ПараметрыПриложения.Вставить("СтандартныеПодсистемы.ВременноеХранилищеСсылокНаУправляемыеФормы", Хранилище);
	КонецЕсли;

	Если Хранение Тогда
		Хранилище.Вставить(Форма, Новый Структура("Форма", Форма));
	ИначеЕсли Хранилище.Получить(Форма) <> Неопределено Тогда
		Хранилище.Удалить(Форма);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбщегоНазначения

Функция ОН_СкопироватьРекурсивно(Источник, ФиксироватьДанные = Неопределено) Экспорт
	Перем Приемник;

	ТипИсточника = ТипЗнч(Источник);

	Если ТипИсточника = Тип("Структура")
		Или ТипИсточника = Тип("ФиксированнаяСтруктура") Тогда

		Приемник = сОН_СкопироватьСтруктуру(Источник, ФиксироватьДанные);
	ИначеЕсли ТипИсточника = Тип("Соответствие")
		Или ТипИсточника = Тип("ФиксированноеСоответствие") Тогда

		Приемник = сОН_СкопироватьСоответствие(Источник, ФиксироватьДанные);
	ИначеЕсли ТипИсточника = Тип("Массив")
		Или ТипИсточника = Тип("ФиксированныйМассив") Тогда

		Приемник = сОН_СкопироватьМассив(Источник, ФиксироватьДанные);
	ИначеЕсли ТипИсточника = Тип("СписокЗначений") Тогда
		Приемник = сОН_СкопироватьСписокЗначений(Источник, ФиксироватьДанные);
	Иначе
		Приемник = Источник;
	КонецЕсли;

	Возврат Приемник;
КонецФункции

Функция ОН_ЭтоLinuxКлиент() Экспорт
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ТипПлатформыКлиента = СистемнаяИнформация.ТипПлатформы;

	Возврат ТипПлатформыКлиента = ТипПлатформы.Linux_x86
		Или ТипПлатформыКлиента = ТипПлатформы.Linux_x86_64;
КонецФункции

Функция ОН_ЭтоMacOSКлиент() Экспорт
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ТипПлатформыКлиента = СистемнаяИнформация.ТипПлатформы;

	Возврат ТипПлатформыКлиента = ТипПлатформы.MacOS_x86
		Или ТипПлатформыКлиента = ТипПлатформы.MacOS_x86_64;
КонецФункции

Функция ОН_ЭтоWindowsКлиент() Экспорт
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ТипПлатформыКлиента = СистемнаяИнформация.ТипПлатформы;

	Возврат ТипПлатформыКлиента = ТипПлатформы.Windows_x86
		Или ТипПлатформыКлиента = ТипПлатформы.Windows_x86_64;
КонецФункции

Функция ОН_ОперативнаяПамятьДоступнаяКлиентскомуПриложению() Экспорт
	СистемнаяИнформация = Новый СистемнаяИнформация;

	Возврат Окр(СистемнаяИнформация.ОперативнаяПамять / 1024, 1);
КонецФункции

Функция ОН_ДатаСеанса() Экспорт
	Если СП_ЗапускПрограммыЗавершен() Тогда
		ПараметрыКлиента = БазоваяПодсистемаКлиентПовтИсп.СП_ПараметрыРаботыКлиента();
	Иначе
		ПараметрыКлиента = БазоваяПодсистемаКлиентПовтИсп.СП_ПараметрыРаботыКлиентаПриЗапуске();
	КонецЕсли;

	Возврат ТекущаяДата() + ПараметрыКлиента.ПоправкаКВремениСеанса;
КонецФункции

Функция ОН_ОбщийМодуль(Имя) Экспорт
	Модуль = Вычислить(Имя);

#Если Не ВебКлиент Тогда
	// В веб-клиенте не проверяется
	// т.к. при обращении к модулям с вызовом сервера типа такого модуля в веб-клиенте не существует.

	Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
		ВызватьИсключение СтрШаблон(
			"Общий модуль ""%1"" не найден.",
			Имя);
	КонецЕсли;

#КонецЕсли

	Возврат Модуль;
КонецФункции


Функция сОН_СкопироватьСтруктуру(СтруктураИсточник, ФиксироватьДанные) Экспорт
	СтруктураРезультат = Новый Структура;

	Для Каждого КлючИЗначение Из СтруктураИсточник Цикл
		СтруктураРезультат.Вставить(КлючИЗначение.Ключ,
			ОН_СкопироватьРекурсивно(КлючИЗначение.Значение, ФиксироватьДанные));
	КонецЦикла;

	Если ФиксироватьДанные = Истина
		Или ФиксироватьДанные = Неопределено
		И ТипЗнч(СтруктураИсточник) = Тип("ФиксированнаяСтруктура") Тогда

		Возврат Новый ФиксированнаяСтруктура(СтруктураРезультат);
	КонецЕсли;

	Возврат СтруктураРезультат;
КонецФункции

Функция сОН_СкопироватьСоответствие(СоответствиеИсточник, ФиксироватьДанные) Экспорт
	СоответствиеРезультат = Новый Соответствие;

	Для Каждого КлючИЗначение Из СоответствиеИсточник Цикл
		СоответствиеРезультат.Вставить(КлючИЗначение.Ключ,
			ОН_СкопироватьРекурсивно(КлючИЗначение.Значение, ФиксироватьДанные));
	КонецЦикла;

	Если ФиксироватьДанные = Истина
		Или ФиксироватьДанные = Неопределено
		И ТипЗнч(СоответствиеИсточник) = Тип("ФиксированноеСоответствие") Тогда

		Возврат Новый ФиксированноеСоответствие(СоответствиеРезультат);
	КонецЕсли;

	Возврат СоответствиеРезультат;
КонецФункции

Функция сОН_СкопироватьМассив(МассивИсточник, ФиксироватьДанные) Экспорт
	МассивРезультат = Новый Массив;

	Для Каждого Элемент Из МассивИсточник Цикл
		МассивРезультат.Добавить(ОН_СкопироватьРекурсивно(Элемент, ФиксироватьДанные));
	КонецЦикла;

	Если ФиксироватьДанные = Истина
		Или ФиксироватьДанные = Неопределено
		И ТипЗнч(МассивИсточник) = Тип("ФиксированныйМассив") Тогда

		Возврат Новый ФиксированныйМассив(МассивРезультат);
	КонецЕсли;

	Возврат МассивРезультат;
КонецФункции

Функция сОН_СкопироватьСписокЗначений(СписокИсточник, ФиксироватьДанные) Экспорт
	СписокРезультат = Новый СписокЗначений;

	Для Каждого ЭлементСписка Из СписокИсточник Цикл
		СписокРезультат.Добавить(
			ОН_СкопироватьРекурсивно(ЭлементСписка.Значение, ФиксироватьДанные),
			ЭлементСписка.Представление,
			ЭлементСписка.Пометка,
			ЭлементСписка.Картинка);
	КонецЦикла;

	Возврат СписокРезультат;
КонецФункции

Функция сОН_ЭтоНавигационнаяСсылка(Строка) Экспорт
	Возврат СтрНачинаетсяС(Строка, "e1c:")
		Или СтрНачинаетсяС(Строка, "e1cib/")
		Или СтрНачинаетсяС(Строка, "e1ccs/");
КонецФункции

#КонецОбласти

#Область ФайловаяСистема

Процедура ФС_ОткрытьФайл(
		РасположениеФайла,
		ОбработчикЗавершения = Неопределено,
		ИмяФайла = "",
		ПараметрыОткрытия = Неопределено) Экспорт

	Если ПараметрыОткрытия = Неопределено Тогда
		ПараметрыОткрытия = ФС_ПараметрыОткрытияФайла();
	КонецЕсли;

	ПараметрыОткрытия.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	Если ЭтоАдресВременногоХранилища(РасположениеФайла) Тогда
		Если ПустаяСтрока(ИмяФайла) Тогда
			ВызватьИсключение "Не указано имя файла.";
		КонецЕсли;

		ПутьКФайлу = ФС_ПолноеИмяВременногоФайла(ИмяФайла);
		ФС_СократитьПолноеИмяФайлаДоДопустимойДлиныNTFS(ПутьКФайлу);

		ПараметрыОткрытия.Вставить("ПутьКФайлу",						ПутьКФайлу);
		ПараметрыОткрытия.Вставить("АдресДвоичныхДанныхДляОбновления",	РасположениеФайла);
		ПараметрыОткрытия.Вставить("УдалятьПослеОбновленияДанных",		Истина);

		ПараметрыСохранения					= ФС_КонтекстОперации(РежимДиалогаВыбораФайла.Сохранение);
		ПараметрыСохранения.Интерактивно	= Ложь;

		ОписаниеОповещения = Новый ОписаниеОповещения(
			"сФС_ОткрытьФайлПослеСохранения", БазоваяПодсистемаКлиент, ПараметрыОткрытия);

		ФС_СохранитьФайл(ОписаниеОповещения, РасположениеФайла, ПутьКФайлу, ПараметрыСохранения);
	Иначе
		сФС_ОткрытьФайлПослеСохранения(
			Новый Структура("ПолноеИмя", РасположениеФайла), ПараметрыОткрытия);
	КонецЕсли;
КонецПроцедуры

Функция ФС_ПараметрыОткрытияФайла() Экспорт
	Контекст = Новый Структура;
	Контекст.Вставить("Кодировка",			"");
	Контекст.Вставить("ДляРедактирования",	Ложь);

	Возврат Контекст;
КонецФункции

Функция ФС_КонтекстОперации(РежимДиалога)
	Контекст = Новый Структура;
	Контекст.Вставить("Диалог",				Новый ДиалогВыбораФайла(РежимДиалога));
	Контекст.Вставить("Интерактивно",		Истина);
	Контекст.Вставить("ТекстПредложения",	"");

	Возврат Контекст;
КонецФункции

Функция ФС_ПолноеИмяВременногоФайла(Знач ИмяФайла)
#Если ВебКлиент Тогда
	Возврат ?(СтрНайти(ИмяФайла, ".") = 0,
		Формат(ОН_ДатаСеанса(), "ДФ=yyyyMMddHHmmss") + "." + ИмяФайла, ИмяФайла);
#Иначе
	ПозицияРасширения = СтрНайти(ИмяФайла, ".");
	Если ПозицияРасширения = 0 Тогда
		Возврат ПолучитьИмяВременногоФайла(ИмяФайла);
	Иначе
		Возврат КаталогВременныхФайлов() + ИмяФайла;
	КонецЕсли;
#КонецЕсли
КонецФункции

Процедура ФС_СократитьПолноеИмяФайлаДоДопустимойДлиныNTFS(ПолноеИмяФайла)
	ДопустимаяДлинаNTFS		= 260;
	ДлинаПолногоИмениФайла	= СтрДлина(ПолноеИмяФайла);

	Если ДлинаПолногоИмениФайла <= ДопустимаяДлинаNTFS Тогда
		Возврат;
	КонецЕсли;

	Файл = Новый Файл(ПолноеИмяФайла);

	ДлинаРасширения = СтрДлина(Файл.Расширение);
	ДлинаПути       = СтрДлина(Файл.Путь);

	// Анализируем длину пути к файлу, расширение, один символ в наименование
	Если ДлинаПути > ДопустимаяДлинаNTFS - ДлинаРасширения - 1 Тогда
		ВызватьИсключение СтрШаблон("Путь к файлу слишком длинный:
		|%1", ПолноеИмяФайла);
	КонецЕсли;

	ИмяБезРасширения = Сред(Файл.ИмяБезРасширения, 1, ДопустимаяДлинаNTFS - ДлинаПути - ДлинаРасширения - 1);

	ПолноеИмяФайла = Файл.Путь + ИмяБезРасширения + Файл.Расширение;
КонецПроцедуры

Процедура ФС_ПодключитьРасширениеДляРаботыСФайлами(
		ОписаниеОповещенияОЗакрытии,
		ТекстПредложения = "",
		ВозможноПродолжениеБезУстановки = Истина) Экспорт

	ОписаниеОповещенияЗавершение = Новый ОписаниеОповещения(
		"сФС_НачатьПодключениеРасширенияРаботыСФайламиПриОтветеНаВопросОбУстановке", БазоваяПодсистемаКлиент,
		ОписаниеОповещенияОЗакрытии);

#Если Не ВебКлиент Тогда
	// В мобильном, тонком и толстом клиентах расширение подключено всегда.
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияЗавершение, "ПодключениеНеТребуется");

	Возврат;
#КонецЕсли

	Контекст = Новый Структура;
	Контекст.Вставить("ОписаниеОповещенияЗавершение",		ОписаниеОповещенияЗавершение);
	Контекст.Вставить("ТекстПредложения",					ТекстПредложения);
	Контекст.Вставить("ВозможноПродолжениеБезУстановки",	ВозможноПродолжениеБезУстановки);

	Оповещение = Новый ОписаниеОповещения(
		"сФС_НачатьПодключениеРасширенияРаботыСФайламиПриУстановкеРасширения", БазоваяПодсистемаКлиент, Контекст);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
КонецПроцедуры

Процедура ФС_СохранитьФайл(ОбработчикЗавершения, АдресВоВременномХранилище, ИмяФайла = "",
	ПараметрыСохранения = Неопределено) Экспорт

	Если ПараметрыСохранения = Неопределено Тогда
		ПараметрыСохранения = ФС_КонтекстОперации(РежимДиалогаВыбораФайла.Сохранение);
	КонецЕсли;

	ДанныеФайла = Новый ОписаниеПередаваемогоФайла(ИмяФайла, АдресВоВременномХранилище);

	СохраняемыеФайлы = Новый Массив;
	СохраняемыеФайлы.Добавить(ДанныеФайла);

	ФС_ПоказатьПолучениеФайлов(ОбработчикЗавершения, СохраняемыеФайлы, ПараметрыСохранения)
КонецПроцедуры

Процедура ФС_ПоказатьПолучениеФайлов(ОбработчикЗавершения, СохраняемыеФайлы, ПараметрыПолучения)
	ПараметрыПолучения.Вставить("ПолучаемыеФайлы",      СохраняемыеФайлы);
	ПараметрыПолучения.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"сФС_ПоказатьПолучениеФайловПриПодключенииРасширенияРаботыСФайлами", БазоваяПодсистемаКлиент, ПараметрыПолучения);
	ФС_ПодключитьРасширениеДляРаботыСФайлами(ОписаниеОповещения, ПараметрыПолучения.ТекстПредложения);
КонецПроцедуры

Процедура ФС_ОткрытьПроводник(ПутьККаталогуИлиФайлу) Экспорт
	ФайлИнфо = Новый Файл(ПутьККаталогуИлиФайлу);

	Контекст = Новый Структура;
	Контекст.Вставить("ФайлИнфо", ФайлИнфо);

	Оповещение = Новый ОписаниеОповещения(
		"сФС_ОткрытьПроводникПослеПроверкиРасширенияРаботыСФайлами", БазоваяПодсистемаКлиент, Контекст);

	ТекстПредложения = "Для открытия папки необходимо установить расширение для работы с 1С:Предприятием.";
	ФС_ПодключитьРасширениеДляРаботыСФайлами(Оповещение, ТекстПредложения, Ложь);
КонецПроцедуры

Процедура ФС_ОткрытьНавигационнуюСсылку(НавигационнаяСсылка, Знач Оповещение = Неопределено) Экспорт
	// АПК:534-выкл методы безопасного запуска обеспечиваются этой функцией

	Контекст = Новый Структура;
	Контекст.Вставить("НавигационнаяСсылка",	НавигационнаяСсылка);
	Контекст.Вставить("Оповещение",				Оповещение);

	ОписаниеОшибки = СтрШаблон(
		"Не удалось перейти по ссылке ""%1"" по причине:
		           |Неверно задана навигационная ссылка.",
		НавигационнаяСсылка);

	Если Не сФС_ЭтоДопустимаяСсылка(НавигационнаяСсылка) Тогда
		сФС_ОткрытьНавигационнуюСсылкуОповеститьОбОшибке(ОписаниеОшибки, Контекст);

	ИначеЕсли сФС_ЭтоВебСсылка(НавигационнаяСсылка)
		Или сОН_ЭтоНавигационнаяСсылка(НавигационнаяСсылка) Тогда

		Попытка
			ПерейтиПоНавигационнойСсылке(НавигационнаяСсылка);

			Если Оповещение <> Неопределено Тогда
				ПриложениеЗапущено = Истина;
				ВыполнитьОбработкуОповещения(Оповещение, ПриложениеЗапущено);
			КонецЕсли;
		Исключение
			сФС_ОткрытьНавигационнуюСсылкуОповеститьОбОшибке(ОписаниеОшибки, Контекст);
		КонецПопытки;
	ИначеЕсли СтрНачинаетсяС(НавигационнаяСсылка, "v8help://") Тогда
		ОткрытьСправку(НавигационнаяСсылка);
	Иначе
		Оповещение = Новый ОписаниеОповещения(
			"сФС_ОткрытьНавигационнуюСсылкуПослеПроверкиРасширенияРаботыСФайлами", БазоваяПодсистемаКлиент, Контекст);

		ТекстПредложения = СтрШаблон(
			"Для открытия ссылки ""%1"" необходимо установить расширение для работы с 1С:Предприятием.",
			НавигационнаяСсылка);
		ФС_ПодключитьРасширениеДляРаботыСФайлами(Оповещение, ТекстПредложения, Ложь);
	КонецЕсли;

	// АПК:534-вкл
КонецПроцедуры

Процедура сФС_ОткрытьНавигационнуюСсылкуПослеПроверкиРасширенияРаботыСФайлами(РасширениеПодключено, Контекст) Экспорт
	// АПК:534-выкл методы безопасного запуска обеспечиваются этой функцией

	НавигационнаяСсылка = Контекст.НавигационнаяСсылка;

	Если РасширениеПодключено Тогда
		Оповещение          = Контекст.Оповещение;
		ДождатьсяЗавершения = (Оповещение <> Неопределено);

		Оповещение = Новый ОписаниеОповещения(
			"сФС_ОткрытьНавигационнуюСсылкуПослеЗапускаПриложения", ЭтотОбъект, Контекст,
			"сФС_ОткрытьНавигационнуюСсылкуПриОбработкеОшибки", ЭтотОбъект);
		НачатьЗапускПриложения(Оповещение, НавигационнаяСсылка,, ДождатьсяЗавершения);
	Иначе
		ОписаниеОшибки = СтрШаблон(
			"Расширение для работы с файлами не установлено, переход по ссылке ""%1"" невозможен.",
			НавигационнаяСсылка);
		сФС_ОткрытьНавигационнуюСсылкуОповеститьОбОшибке(ОписаниеОшибки, Контекст);
	КонецЕсли;

	// АПК:534-вкл
КонецПроцедуры

Процедура сФС_ОткрытьНавигационнуюСсылкуПослеЗапускаПриложения(КодВозврата, Контекст) Экспорт
	Оповещение = Контекст.Оповещение;

	Если Оповещение <> Неопределено Тогда
		ПриложениеЗапущено = (КодВозврата = 0 Или КодВозврата = Неопределено);
		ВыполнитьОбработкуОповещения(Оповещение, ПриложениеЗапущено);
	КонецЕсли;
КонецПроцедуры

Процедура сФС_ОткрытьНавигационнуюСсылкуПриОбработкеОшибки(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	СтандартнаяОбработка = Ложь;
	сФС_ОткрытьНавигационнуюСсылкуОповеститьОбОшибке("", Контекст);
КонецПроцедуры

Процедура сФС_ОткрытьНавигационнуюСсылкуОповеститьОбОшибке(ОписаниеОшибки, Контекст) Экспорт
	Оповещение = Контекст.Оповещение;

	Если Оповещение = Неопределено Тогда
		Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	Иначе
		ПриложениеЗапущено = Ложь;
		ВыполнитьОбработкуОповещения(Оповещение, ПриложениеЗапущено);
	КонецЕсли;
КонецПроцедуры

Функция сФС_ЭтоДопустимаяСсылка(Строка) Экспорт
	Возврат СтрНачинаетсяС(Строка, "e1c:")
		Или СтрНачинаетсяС(Строка, "e1cib/")
		Или СтрНачинаетсяС(Строка, "e1ccs/")
		Или СтрНачинаетсяС(Строка, "v8help:")
		Или СтрНачинаетсяС(Строка, "http:")
		Или СтрНачинаетсяС(Строка, "https:")
		Или СтрНачинаетсяС(Строка, "mailto:")
		Или СтрНачинаетсяС(Строка, "tel:")
		Или СтрНачинаетсяС(Строка, "skype:")
		Или СтрНачинаетсяС(Строка, "market:")
		Или СтрНачинаетсяС(Строка, "itms-apps:");
КонецФункции

Функция сФС_ЭтоВебСсылка(Строка) Экспорт
	Возврат СтрНачинаетсяС(Строка, "http://")  // обычное соединение.
		Или СтрНачинаетсяС(Строка, "https://");// защищенное соединение.
КонецФункции

Процедура сФС_ОткрытьФайлПослеСохранения(СохраненныеФайлы, ПараметрыОткрытия) Экспорт
	Если СохраненныеФайлы = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ПараметрыОткрытия.ОбработчикЗавершения, Ложь);
	Иначе
		ОписаниеФайла = ?(ТипЗнч(СохраненныеФайлы) = Тип("Массив"), СохраненныеФайлы[0], СохраненныеФайлы);
		ПараметрыОткрытия.Вставить("ПутьКФайлу", ОписаниеФайла.ПолноеИмя);
		ОбработчикЗавершения = Новый ОписаниеОповещения(
			"сФС_ОткрытьФайлПослеЗавершенияРедактирования", ЭтотОбъект, ПараметрыОткрытия);

		сФС_ОткрытьФайлВПрограммеПросмотра(ОписаниеФайла.ПолноеИмя, ОбработчикЗавершения, ПараметрыОткрытия.ДляРедактирования);
	КонецЕсли;
КонецПроцедуры

Процедура сФС_ОткрытьФайлПослеЗавершенияРедактирования(ПриложениеЗапущено, ПараметрыОткрытия) Экспорт
	Если ПриложениеЗапущено
		И ПараметрыОткрытия.Свойство("АдресДвоичныхДанныхДляОбновления") Тогда

		Оповещение = Новый ОписаниеОповещения(
			"сФС_ОткрытьФайлПослеОбновленияДанныхВХранилище", ЭтотОбъект, ПараметрыОткрытия);

		НачатьПомещениеФайла(Оповещение, ПараметрыОткрытия.АдресДвоичныхДанныхДляОбновления,
			ПараметрыОткрытия.ПутьКФайлу, Ложь);
	Иначе
		ВыполнитьОбработкуОповещения(ПараметрыОткрытия.ОбработчикЗавершения, ПриложениеЗапущено);
	КонецЕсли;
КонецПроцедуры

Процедура сФС_ОткрытьФайлПослеОбновленияДанныхВХранилище(ДанныеОбновлены, АдресДанных, ИмяФайла,
		ПараметрыОткрытия) Экспорт

	Если ПараметрыОткрытия.Свойство("УдалятьПослеОбновленияДанных") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ДанныеОбновлены",		ДанныеОбновлены);
		ДополнительныеПараметры.Вставить("ПараметрыОткрытия",	ПараметрыОткрытия);

		ОписаниеОповещения = Новый ОписаниеОповещения(
			"сФС_ОткрытьФайлПослеУдаленияВременногоФайла", ЭтотОбъект, ДополнительныеПараметры);

		НачатьУдалениеФайлов(ОписаниеОповещения, ИмяФайла);
	Иначе
		ВыполнитьОбработкуОповещения(ПараметрыОткрытия.ОбработчикЗавершения, ДанныеОбновлены);
	КонецЕсли;
КонецПроцедуры

Процедура сФС_ОткрытьФайлПослеУдаленияВременногоФайла(ДополнительныеПараметры) Экспорт
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ПараметрыОткрытия.ОбработчикЗавершения,
		ДополнительныеПараметры.ДанныеОбновлены);
КонецПроцедуры

Процедура сФС_ОткрытьФайлВПрограммеПросмотра(ПутьКФайлу, Знач Оповещение = Неопределено,
		Знач ДляРедактирования = Ложь)

	ФайлИнфо = Новый Файл(ПутьКФайлу);

	Контекст = Новый Структура;
	Контекст.Вставить("ФайлИнфо",          ФайлИнфо);
	Контекст.Вставить("Оповещение",        Оповещение);
	Контекст.Вставить("ДляРедактирования", ДляРедактирования);

	Оповещение = Новый ОписаниеОповещения(
		"сФС_ОткрытьФайлВПрограммеПросмотраПослеПроверкиРасширенияРаботыСФайлами", ЭтотОбъект, Контекст);

	ТекстПредложения = "Для открытия файла необходимо установить расширение для работы с 1С:Предприятием.";
	ФС_ПодключитьРасширениеДляРаботыСФайлами(Оповещение, ТекстПредложения, Ложь);
КонецПроцедуры

Процедура сФС_ОткрытьФайлВПрограммеПросмотраПослеПроверкиРасширенияРаботыСФайлами(РасширениеПодключено, Контекст) Экспорт
	ФайлИнфо = Контекст.ФайлИнфо;
	Если РасширениеПодключено Тогда
		Оповещение = Новый ОписаниеОповещения(
			"сФС_ОткрытьФайлВПрограммеПросмотраПослеПроверкиСуществования", ЭтотОбъект, Контекст,
			"сФС_ОткрытьФайлВПрограммеПросмотраПриОбработкеОшибки", ЭтотОбъект);
		ФайлИнфо.НачатьПроверкуСуществования(Оповещение);
	Иначе
		ОписаниеОшибки = "Не установлено расширение для работы с 1С:Предприятием, открытие файла недоступно.";
		сФС_ОткрытьФайлВПрограммеПросмотраОповеститьОбОшибке(ОписаниеОшибки, Контекст);
	КонецЕсли;
КонецПроцедуры

Процедура сФС_ОткрытьФайлВПрограммеПросмотраПослеПроверкиСуществования(Существует, Контекст) Экспорт
	ФайлИнфо = Контекст.ФайлИнфо;
	Если Существует Тогда
		Оповещение = Новый ОписаниеОповещения(
			"сФС_ОткрытьФайлВПрограммеПросмотраПослеПроверкиЭтоФайл", ЭтотОбъект, Контекст,
			"сФС_ОткрытьФайлВПрограммеПросмотраПриОбработкеОшибки", ЭтотОбъект);
		ФайлИнфо.НачатьПроверкуЭтоФайл(Оповещение);
	Иначе
		ОписаниеОшибки = СтрШаблон(
			"ru = 'Не найден файл, который требуется открыть:
			           |%1",
			ФайлИнфо.ПолноеИмя);
		сФС_ОткрытьФайлВПрограммеПросмотраОповеститьОбОшибке(ОписаниеОшибки, Контекст);
	КонецЕсли;
КонецПроцедуры

Процедура сФС_ОткрытьФайлВПрограммеПросмотраПослеПроверкиЭтоФайл(ЭтоФайл, Контекст) Экспорт
	// АПК:534-выкл методы безопасного запуска обеспечиваются этой функцией

	ФайлИнфо = Контекст.ФайлИнфо;
	Если ЭтоФайл Тогда
		Если ПустаяСтрока(ФайлИнфо.Расширение) Тогда
			ОписаниеОшибки = СтрШаблон(
				"Имя файла не содержит расширения:
				           |%1",
				ФайлИнфо.ПолноеИмя);

			сФС_ОткрытьФайлВПрограммеПросмотраОповеститьОбОшибке(ОписаниеОшибки, Контекст);

			Возврат;
		КонецЕсли;

		Если сФС_ЭтоРасширениеИсполняемогоФайла(ФайлИнфо.Расширение) Тогда
			ОписаниеОшибки = СтрШаблон(
				"Исполняемые файлы открывать запрещено:
				           |%1",
				ФайлИнфо.ПолноеИмя);

			сФС_ОткрытьФайлВПрограммеПросмотраОповеститьОбОшибке(ОписаниеОшибки, Контекст);

			Возврат;
		КонецЕсли;

		Оповещение          = Контекст.Оповещение;
		ДождатьсяЗавершения = Контекст.ДляРедактирования;

		Оповещение = Новый ОписаниеОповещения(
			"сФС_ОткрытьФайлВПрограммеПросмотраПослеЗапускаПриложения", ЭтотОбъект, Контекст,
			"сФС_ОткрытьФайлВПрограммеПросмотраПриОбработкеОшибки", ЭтотОбъект);
		НачатьЗапускПриложения(Оповещение, ФайлИнфо.ПолноеИмя,, ДождатьсяЗавершения);
	Иначе
		ОписаниеОшибки = СтрШаблон(
			"Не найден файл, который требуется открыть:
			           |%1",
			ФайлИнфо.ПолноеИмя);

		сФС_ОткрытьФайлВПрограммеПросмотраОповеститьОбОшибке(ОписаниеОшибки, Контекст);
	КонецЕсли;
	// АПК:534-вкл
КонецПроцедуры

Процедура сФС_ОткрытьФайлВПрограммеПросмотраПослеЗапускаПриложения(КодВозврата, Контекст) Экспорт
	Оповещение = Контекст.Оповещение;

	Если Оповещение <> Неопределено Тогда
		ПриложениеЗапущено = (КодВозврата = 0);
		ВыполнитьОбработкуОповещения(Оповещение, ПриложениеЗапущено);
	КонецЕсли;
КонецПроцедуры

Процедура сФС_ОткрытьФайлВПрограммеПросмотраПриОбработкеОшибки(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	СтандартнаяОбработка = Ложь;
	сФС_ОткрытьФайлВПрограммеПросмотраОповеститьОбОшибке("", Контекст);
КонецПроцедуры

Процедура сФС_ОткрытьФайлВПрограммеПросмотраОповеститьОбОшибке(ОписаниеОшибки, Контекст)
	Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
		ПоказатьПредупреждение(, ОписаниеОшибки);
	КонецЕсли;

	ПриложениеЗапущено = Ложь;
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, ПриложениеЗапущено);
КонецПроцедуры

Функция сФС_ЭтоРасширениеИсполняемогоФайла(Знач Расширение)
	Расширение = ВРег(Расширение);

	// Windows
	Возврат Расширение = ".BAT" // Batch File
		Или Расширение = ".BIN" // Binary Executable
		Или Расширение = ".CMD" // Command Script
		Или Расширение = ".COM" // Приложение MS-DOS
		Или Расширение = ".CPL" // Control Panel Extension
		Или Расширение = ".EXE" // Исполняемый файл
		Или Расширение = ".GADGET" // Binary Executable
		Или Расширение = ".HTA" // HTML Application
		Или Расширение = ".INF1" // Setup Information File
		Или Расширение = ".INS" // Internet Communication Settings
		Или Расширение = ".INX" // InstallShield Compiled Script
		Или Расширение = ".ISU" // InstallShield Uninstaller Script
		Или Расширение = ".JOB" // Windows Task Scheduler Job File
		Или Расширение = ".LNK" // File Shortcut
		Или Расширение = ".MSC" // Microsoft Common Console Document
		Или Расширение = ".MSI" // Windows Installer Package
		Или Расширение = ".MSP" // Windows Installer Patch
		Или Расширение = ".MST" // Windows Installer Setup Transform File
		Или Расширение = ".OTM" // Макрос Microsoft Outlook
		Или Расширение = ".PAF" // Portable Application Installer File
		Или Расширение = ".PIF" // Program Information File
		Или Расширение = ".PS1" // Windows PowerShell Cmdlet
		Или Расширение = ".REG" // Registry Data File
		Или Расширение = ".RGS" // Registry Script
		Или Расширение = ".SCT" // Windows Scriptlet
		Или Расширение = ".SHB" // Windows Document Shortcut
		Или Расширение = ".SHS" // Shell Scrap Object
		Или Расширение = ".U3P" // U3 Smart Application
		Или Расширение = ".VB"  // VBScript File
		Или Расширение = ".VBE" // VBScript Encoded Script
		Или Расширение = ".VBS" // VBScript File
		Или Расширение = ".VBSCRIPT" // Visual Basic Script
		Или Расширение = ".WS"  // Windows Script
		Или Расширение = ".WSF" // Windows Script
	// Linux
		Или Расширение = ".CSH" // C Shell Script
		Или Расширение = ".KSH" // Unix Korn Shell Script
		Или Расширение = ".OUT" // Исполняемый файл
		Или Расширение = ".RUN" // Исполняемый файл
		Или Расширение = ".SH"  // Shell Script
	// macOS
		Или Расширение = ".ACTION" // Automator Action
		Или Расширение = ".APP" // Исполняемый файл
		Или Расширение = ".COMMAND" // Terminal Command
		Или Расширение = ".OSX" // Исполняемый файл
		Или Расширение = ".WORKFLOW" // Automator Workflow
	// Прочие
		Или Расширение = ".AIR" // Установочный пакет Adobe AIR
		Или Расширение = ".COFFIE" // Сценарий CoffeeScript (JavaScript)
		Или Расширение = ".JAR" // Архив Java
		Или Расширение = ".JS"  // JScript File
		Или Расширение = ".JSE" // JScript Encoded File
		Или Расширение = ".PLX" // Исполняемый файл Perl
		Или Расширение = ".PYC" // Компилированный файл Python
		Или Расширение = ".PYO"; // Оптимизированный код Python
КонецФункции

Процедура сФС_НачатьПодключениеРасширенияРаботыСФайламиПриОтветеНаВопросОбУстановке(Действие, ОповещениеОЗакрытии) Экспорт
	РасширениеПодключено = (Действие = "РасширениеПодключено" Или Действие = "ПодключениеНеТребуется");

#Если ВебКлиент Тогда
	Если Действие = "БольшеНеПредлагать"
		Или Действие = "РасширениеПодключено" Тогда

		СистемнаяИнформация = Новый СистемнаяИнформация;
		ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
		ПараметрыПриложения["СтандартныеПодсистемы.ПредлагатьУстановкуРасширенияРаботыСФайлами"] = Ложь;
		БазоваяПодсистемаВызовСервера.ОН_ХранилищеОбщихНастроекСохранить(
			"НастройкиПрограммы/ПредлагатьУстановкуРасширенияРаботыСФайлами", ИдентификаторКлиента, Ложь);
	КонецЕсли;
#КонецЕсли

	ВыполнитьОбработкуОповещения(ОповещениеОЗакрытии, РасширениеПодключено);
КонецПроцедуры

Процедура сФС_НачатьПодключениеРасширенияРаботыСФайламиПриУстановкеРасширения(Подключено, Контекст) Экспорт
	// Если расширение и так уже подключено, незачем про него спрашивать.
	Если Подключено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОписаниеОповещенияЗавершение, "ПодключениеНеТребуется");

		Возврат;
	КонецЕсли;

	// В веб клиенте под macOS расширение не доступно.
	Если ОН_ЭтоMacOSКлиент() Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОписаниеОповещенияЗавершение);

		Возврат;
	КонецЕсли;

	ИмяПараметра = "СтандартныеПодсистемы.ПредлагатьУстановкуРасширенияРаботыСФайлами";
	ПервоеОбращениеЗаСеанс = ПараметрыПриложения[ИмяПараметра] = Неопределено;
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, сФС_ПредлагатьУстановкуРасширенияРаботыСФайлами());
	КонецЕсли;

	ПредлагатьУстановкуРасширенияРаботыСФайлами = ПараметрыПриложения[ИмяПараметра] Или ПервоеОбращениеЗаСеанс;
	Если Контекст.ВозможноПродолжениеБезУстановки И Не ПредлагатьУстановкуРасширенияРаботыСФайлами Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОписаниеОповещенияЗавершение);
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТекстПредложения",					Контекст.ТекстПредложения);
		ПараметрыФормы.Вставить("ВозможноПродолжениеБезУстановки",	Контекст.ВозможноПродолжениеБезУстановки);
		ОткрытьФорму(
			"ОбщаяФорма.ВопросОбУстановкеРасширенияРаботыСФайлами",
			ПараметрыФормы,,,,,
			Контекст.ОписаниеОповещенияЗавершение);
	КонецЕсли;
КонецПроцедуры

Функция сФС_ПредлагатьУстановкуРасширенияРаботыСФайлами()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
	Возврат БазоваяПодсистемаВызовСервера.ОН_ХранилищеОбщихНастроекЗагрузить(
		"НастройкиПрограммы/ПредлагатьУстановкуРасширенияРаботыСФайлами", ИдентификаторКлиента, Истина);
КонецФункции

Процедура сФС_ПоказатьПолучениеФайловПриПодключенииРасширенияРаботыСФайлами(РасширениеПодключено, Контекст) Экспорт
	Если РасширениеПодключено Тогда
		Если Контекст.Интерактивно Тогда
			сФС_ПоказатьПолучениеФайловВКаталог(Контекст);
		ИначеЕсли Не ПустаяСтрока(Контекст.Диалог.Каталог)Тогда
			Контекст.Диалог = Контекст.Диалог.Каталог;
			сФС_ПоказатьПолучениеФайловВКаталог(Контекст);
		Иначе
			ОповещениеОПолученииКаталога = Новый ОписаниеОповещения(
				"сФС_ПоказатьПолучениеФайловПослеПолученияКаталогаВременныхФайлов", ЭтотОбъект, Контекст);
			НачатьПолучениеКаталогаВременныхФайлов(ОповещениеОПолученииКаталога);
		КонецЕсли;
	Иначе
		Для Каждого ПолучаемыйФайл Из Контекст.ПолучаемыеФайлы Цикл
			ПолучитьФайл(ПолучаемыйФайл.Хранение, ПолучаемыйФайл.Имя, Истина);
		КонецЦикла;

		Если Контекст.ОбработчикЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Контекст.ОбработчикЗавершения, Неопределено);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура сФС_ПоказатьПолучениеФайловПослеПолученияКаталогаВременныхФайлов(ИмяКаталогаВременныхФайлов, Контекст) Экспорт
	Контекст.Диалог = ИмяКаталогаВременныхФайлов;
	сФС_ПоказатьПолучениеФайловВКаталог(Контекст);
КонецПроцедуры

Процедура сФС_ПоказатьПолучениеФайловВКаталог(Контекст)
	ОповещениеОЗавершении = Новый ОписаниеОповещения("сФС_ОповеститьОЗавершенииПолученияФайлов", ЭтотОбъект, Контекст);
	НачатьПолучениеФайлов(ОповещениеОЗавершении, Контекст.ПолучаемыеФайлы, Контекст.Диалог, Контекст.Интерактивно);
КонецПроцедуры

Процедура сФС_ОповеститьОЗавершенииПолученияФайлов(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	Если ДополнительныеПараметры.ОбработчикЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикЗавершения, ПолученныеФайлы);
	КонецЕсли;
КонецПроцедуры

Процедура сФС_ОткрытьПроводникПослеПроверкиРасширенияРаботыСФайлами(РасширениеПодключено, Контекст) Экспорт
	ФайлИнфо = Контекст.ФайлИнфо;

	Если РасширениеПодключено Тогда
		Оповещение = Новый ОписаниеОповещения(
			"сФС_ОткрытьПроводникПослеПроверкиСуществования", ЭтотОбъект, Контекст,
			"сФС_ОткрытьПроводникПриОбработкеОшибки", ЭтотОбъект);
		ФайлИнфо.НачатьПроверкуСуществования(Оповещение);
	Иначе
		ОписаниеОшибки = "Не установлено расширение для работы с 1С:Предприятием, открытие папки недоступно.";
		сФС_ОткрытьПроводникОповеститьОбОшибке(ОписаниеОшибки, Контекст);
	КонецЕсли;
КонецПроцедуры

Процедура сФС_ОткрытьПроводникПослеПроверкиСуществования(Существует, Контекст) Экспорт
	ФайлИнфо = Контекст.ФайлИнфо;

	Если Существует Тогда
		Оповещение = Новый ОписаниеОповещения(
			"сФС_ОткрытьПроводникПослеПроверкиЭтоФайл", ЭтотОбъект, Контекст,
			"сФС_ОткрытьПроводникПриОбработкеОшибки", ЭтотОбъект);
		ФайлИнфо.НачатьПроверкуЭтоФайл(Оповещение);
	Иначе
		ОписаниеОшибки = СтрШаблон(
			"Не найдена папка, которую требуется открыть в проводнике:
			           |""%1""",
			ФайлИнфо.ПолноеИмя);
		сФС_ОткрытьПроводникОповеститьОбОшибке(ОписаниеОшибки, Контекст);
	КонецЕсли;
КонецПроцедуры

Процедура сФС_ОткрытьПроводникПослеПроверкиЭтоФайл(ЭтоФайл, Контекст) Экспорт
	// АПК:534-выкл методы безопасного запуска обеспечиваются этой функцией

	ФайлИнфо = Контекст.ФайлИнфо;

	Оповещение = Новый ОписаниеОповещения(,,, "сФС_ОткрытьПроводникПриОбработкеОшибки", ЭтотОбъект);
	Если ЭтоФайл Тогда
		Если ОН_ЭтоWindowsКлиент() Тогда
			НачатьЗапускПриложения(Оповещение, "explorer.exe /select, """ + ФайлИнфо.ПолноеИмя + """");
		Иначе // Это Linux или macOS.
			НачатьЗапускПриложения(Оповещение, "file:///" + ФайлИнфо.Путь);
		КонецЕсли;
	Иначе // Это каталог.
		НачатьЗапускПриложения(Оповещение, "file:///" + ФайлИнфо.ПолноеИмя);
	КонецЕсли;

	// АПК:534-вкл
КонецПроцедуры

Процедура сФС_ОткрытьПроводникПриОбработкеОшибки(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	СтандартнаяОбработка = Ложь;
	сФС_ОткрытьПроводникОповеститьОбОшибке("", Контекст);
КонецПроцедуры

Процедура сФС_ОткрытьПроводникОповеститьОбОшибке(ОписаниеОшибки, Контекст)
	Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
		ПоказатьПредупреждение(, ОписаниеОшибки);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ВариантыОтчетов

Процедура ВО_ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт
	Параметры.Вставить("ВариантыОтчетов", Новый ФиксированнаяСтруктура(ВО_ПараметрыКлиента()));
КонецПроцедуры

Процедура ВО_ПриОпределенииНазначенияРолей(НазначениеРолей) Экспорт
	// СовместноДляПользователейИВнешнихПользователей.
	НазначениеРолей.СовместноДляПользователейИВнешнихПользователей.Добавить(Метаданные.Роли.ДобавлениеИзменениеЛичныхВариантовОтчетов.Имя);
КонецПроцедуры

Процедура ВО_ПриЗаполненииВсехПараметровРаботыРасширений() Экспорт
	Настройки						= ВО_ПараметрыОбновленияНастроек();
	Настройки.Конфигурация			= Ложь;
	Настройки.Расширения			= Истина;
	Настройки.ОбщиеДанные			= Истина;
	Настройки.РазделенныеДанные		= Истина;
	Настройки.Оперативное			= Истина;
	Настройки.Отложенное			= Истина;

	ВО_Обновить(Настройки);
КонецПроцедуры

Функция ВО_ПараметрыКлиента() Экспорт
	ПараметрыКлиента	= Новый Структура;

	// Зарезервировано для новых подсистем

	Возврат ПараметрыКлиента;
КонецФункции

Функция ВО_ПараметрыОбновленияНастроек() Экспорт
	Настройки	= Новый Структура;
	Настройки.Вставить("Конфигурация",				Истина);
	Настройки.Вставить("Расширения",				Ложь);
	Настройки.Вставить("ОбщиеДанные",				Истина);
	Настройки.Вставить("РазделенныеДанные",			Истина);
	Настройки.Вставить("Оперативное",				Истина);
	Настройки.Вставить("Отложенное",				Ложь);
	Настройки.Вставить("ИндексироватьСхему",		Ложь);
	Настройки.Вставить("ЗаполнятьПредставления",	Истина);

	Если БазоваяПодсистемаСервер.ОН_ЭтоАвтономноеРабочееМесто() Тогда
		Настройки.ОбщиеДанные = Ложь;
	КонецЕсли;

	Настройки.Расширения	= Настройки.РазделенныеДанные;

	Возврат Настройки;
КонецФункции

Функция ВО_Обновить(Знач Настройки = Неопределено) Экспорт
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);

	Если Настройки = Неопределено Тогда
		Настройки	= ВО_ПараметрыОбновленияНастроек();
	КонецЕсли;

	Результат	= Новый Структура;
	Результат.Вставить("ЕстьИзменения", Ложь);

	Если Настройки.Оперативное Тогда
		Если Настройки.ОбщиеДанные Тогда
			Если Настройки.Конфигурация Тогда
				ПромежуточныйРезультат = ВО_ОперативноеОбновлениеОбщихДанных("ОбщиеДанныеКонфигурации", Неопределено);
				Результат.Вставить("Оперативное_ОбщиеДанные_Конфигурация", ПромежуточныйРезультат);
				Если ПромежуточныйРезультат <> Неопределено И ПромежуточныйРезультат.ЕстьИзменения Тогда
					Результат.ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЕсли;

			Если Настройки.Расширения Тогда
				ПромежуточныйРезультат = ВО_ОперативноеОбновлениеОбщихДанных("ОбщиеДанныеРасширений", Неопределено);
				Результат.Вставить("Оперативное_ОбщиеДанные_Расширения", ПромежуточныйРезультат);
				Если ПромежуточныйРезультат <> Неопределено И ПромежуточныйРезультат.ЕстьИзменения Тогда
					Результат.ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если Настройки.РазделенныеДанные Тогда
			Если Настройки.Конфигурация Тогда
				ПромежуточныйРезультат = ВО_АктуализироватьВариантыОтчетов("РазделенныеДанныеКонфигурации");
				Результат.Вставить("Оперативное_РазделенныеДанные_Конфигурация", ПромежуточныйРезультат);
				Если ПромежуточныйРезультат <> Неопределено И ПромежуточныйРезультат.ЕстьИзменения Тогда
					Результат.ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЕсли;

			Если Настройки.Расширения Тогда
				ПромежуточныйРезультат = ВО_АктуализироватьВариантыОтчетов("РазделенныеДанныеРасширений");
				Результат.Вставить("Оперативное_РазделенныеДанные_Расширения", ПромежуточныйРезультат);
				Если ПромежуточныйРезультат <> Неопределено И ПромежуточныйРезультат.ЕстьИзменения Тогда
					Результат.ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Настройки.Отложенное Тогда
		Если Настройки.ОбщиеДанные Тогда
			Если Настройки.Конфигурация Тогда
				ПромежуточныйРезультат = ВО_ОбновитьИндексПоиска("ОбщиеДанныеКонфигурации", Настройки.ИндексироватьСхему);
				Результат.Вставить("Отложенное_ОбщиеДанные_Конфигурация", ПромежуточныйРезультат);
				Если ПромежуточныйРезультат <> Неопределено И ПромежуточныйРезультат.ЕстьИзменения Тогда
					Результат.ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЕсли;

			Если Настройки.Расширения Тогда
				ПромежуточныйРезультат = ВО_ОбновитьИндексПоиска("ОбщиеДанныеРасширений", Настройки.ИндексироватьСхему);
				Результат.Вставить("Отложенное_ОбщиеДанные_Расширения", ПромежуточныйРезультат);
				Если ПромежуточныйРезультат <> Неопределено И ПромежуточныйРезультат.ЕстьИзменения Тогда
					Результат.ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если Настройки.РазделенныеДанные Тогда
			Если Настройки.Конфигурация Тогда
				ПромежуточныйРезультат = ВО_ОбновитьИндексПоиска("РазделенныеДанныеКонфигурации", Настройки.ИндексироватьСхему);
				Результат.Вставить("Отложенное_РазделенныеДанные_Конфигурация", ПромежуточныйРезультат);
				Если ПромежуточныйРезультат <> Неопределено И ПромежуточныйРезультат.ЕстьИзменения Тогда
					Результат.ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЕсли;

			Если Настройки.Расширения Тогда
				ПромежуточныйРезультат = ВО_ОбновитьИндексПоиска("РазделенныеДанныеРасширений", Настройки.ИндексироватьСхему);
				Результат.Вставить("Отложенное_РазделенныеДанные_Расширения", ПромежуточныйРезультат);
				Если ПромежуточныйРезультат <> Неопределено И ПромежуточныйРезультат.ЕстьИзменения Тогда
					Результат.ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Настройки.ЗаполнятьПредставления Тогда
		ВО_ЗапланироватьЗаполнениеПредставлений();
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция ВО_ОперативноеОбновлениеОбщихДанных(Режим, РазделенныеОбработчики)
	////////////////////////////////////////////////////////////////////////////////
	// Выполняется только для предопределенных вариантов отчетов.

	Результат = ВО_РезультатОбновленияОбщихДанных(Режим, РазделенныеОбработчики);

	ВО_АктуализироватьКлючиПредопределенных(Режим, Результат);
	ВО_ПометитьУдаленныеПредопределенные(Режим, Результат);
	ВО_СформироватьТаблицуФункциональныхОпций(Режим, Результат);
	ВО_ПометитьНаУдалениеВариантыУдаленныхОтчетов(Режим, Результат);
	ВО_ЗаписатьТаблицуФункциональныхОпций(Режим, Результат);
	ВО_ЗафиксироватьТекущуюВерсиюРасширений();

	Возврат Результат;
КонецФункции

Функция ВО_АктуализироватьВариантыОтчетов(Режим)
	Результат = ВО_РезультатАктуализацииВариантовОтчетов();

	// 1. Актуализировать разделенные варианты отчетов.
	ВО_АктуализироватьВариантыОтчетовПоПредопределенным(Режим, Результат);

	// 2. Установить пометку удаления вариантов удаленных отчетов.
	ВО_ПометитьНаУдалениеВариантыУдаленныхОтчетов(Режим, Результат);

	Возврат Результат;
КонецФункции

Функция ВО_ОбновитьИндексПоиска(Режим, ИндексироватьСхему)
	ВО_УстановитьПризнакЗаполненияПредставлений(ТекущаяДатаСеанса(), Ложь, Режим);

	ОбщиеДанные	= (Режим = "ОбщиеДанныеКонфигурации" Или Режим = "ОбщиеДанныеРасширений");
	Уточнение	= НРег(ВО_ПредставлениеРежима(Режим)) + ", " + ?(ИндексироватьСхему, "полное", "по изменениям");

	ПредставлениеПроцедуры = СтрШаблон("Обновление индекса поиска (%1)", Уточнение);
	БазоваяПодсистемаСервер.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Варианты отчетов", УровеньЖурналаРегистрации.Информация,,, СтрШаблон("Запуск процедуры ""%1"".", ПредставлениеПроцедуры));

	Запрос = Новый Запрос;

	Если ОбщиеДанные Тогда
		Поиск = Новый Структура("Отчет, КлючВарианта, ЭтоВариант", , , Истина);
		Если Режим = "ОбщиеДанныеКонфигурации" Тогда
			ПредопределенныеВарианты	= ВО_ПредопределенныеВариантыОтчетов("Внутренний");
			Запрос.Текст				=
			"ВЫБРАТЬ
			|	ПредопределенныеВариантыОтчетов.Ссылка,
			|	ПредопределенныеВариантыОтчетов.Отчет
			|ИЗ
			|	Справочник.ПредопределенныеВариантыОтчетов КАК ПредопределенныеВариантыОтчетов
			|ГДЕ
			|	ПредопределенныеВариантыОтчетов.ПометкаУдаления = ЛОЖЬ";
		ИначеЕсли Режим = "ОбщиеДанныеРасширений" Тогда
			ПредопределенныеВарианты	= ВО_ПредопределенныеВариантыОтчетов("Расширение");
			Запрос.Текст				=
			"ВЫБРАТЬ
			|	ПредопределенныеВариантыОтчетовВерсийРасширений.Вариант КАК Ссылка,
			|	ПредопределенныеВариантыОтчетовВерсийРасширений.Отчет
			|ИЗ
			|	РегистрСведений.ПредопределенныеВариантыОтчетовВерсийРасширений КАК ПредопределенныеВариантыОтчетовВерсийРасширений
			|ГДЕ
			|	ПредопределенныеВариантыОтчетовВерсийРасширений.ВерсияРасширений = &ВерсияРасширений
			|	И ПредопределенныеВариантыОтчетовВерсийРасширений.Вариант <> &ПустаяСсылка";
			Запрос.УстановитьПараметр("ВерсияРасширений",	ПараметрыСеанса.ВерсияРасширений);
			Запрос.УстановитьПараметр("ПустаяСсылка",		Справочники.ПредопределенныеВариантыОтчетовРасширений.ПустаяСсылка());
		КонецЕсли;
	Иначе
		Запрос.Текст					=
		"ВЫБРАТЬ
		|	ВариантыОтчетов.Ссылка,
		|	ВариантыОтчетов.Отчет
		|ИЗ
		|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
		|ГДЕ
		|	ВариантыОтчетов.Пользовательский
		|	И ВариантыОтчетов.ТипОтчета = &ТипОтчета
		|	И ВариантыОтчетов.Отчет В(&ДоступныеОтчеты)";
		Запрос.УстановитьПараметр("ДоступныеОтчеты", Новый Массив(ВариантыОтчетовСерверПовтИсп.ВО_ДоступныеОтчеты(Ложь)));
		Если Режим = "РазделенныеДанныеКонфигурации" Тогда
			Запрос.УстановитьПараметр("ТипОтчета", Перечисления.ТипыОтчетов.Внутренний);
		ИначеЕсли Режим = "РазделенныеДанныеРасширений" Тогда
			Запрос.УстановитьПараметр("ТипОтчета", Перечисления.ТипыОтчетов.Расширение);
		КонецЕсли;
	КонецЕсли;

	ПроблемныеОтчеты	= Новый Соответствие;
	НовыеСведения		= Новый Соответствие;
	СтарыеСведения		= Новый Структура("ХешНастроек, НаименованияПолей, НаименованияПараметровИОтборов, КлючевыеСлова");

	СписокОшибок		= Новый Массив;

	Выборка				= Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ПроблемныеОтчеты[Выборка.Отчет] = Истина Тогда
			Продолжить; // Отчет не подключен, ошибка зарегистрирована ранее.
		КонецЕсли;

		НачатьТранзакцию();
		Попытка
			Блокировка			= Новый БлокировкаДанных;
			ЭлементБлокировки	= Блокировка.Добавить(Выборка.Ссылка.Метаданные().ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();

			ВариантОбъект = Выборка.Ссылка.ПолучитьОбъект(); // СправочникОбъект.ВариантыОтчетов, СправочникОбъект.ПредопределенныеВариантыОтчетов, СправочникОбъект.ПредопределенныеВариантыОтчетовРасширений
			Если ВариантОбъект = Неопределено Тогда
				ОтменитьТранзакцию();

				Продолжить;
			КонецЕсли;

			СведенияОбОтчете = НовыеСведения[Выборка.Отчет];
			Если СведенияОбОтчете = Неопределено Тогда
				СведенияОбОтчете				= Новый Структура("НастройкиКД,НастройкиДляПоиска,ОтчетОбъект,ИндексироватьСхему");
				НовыеСведения[Выборка.Отчет]	= СведенияОбОтчете;
			КонецЕсли;

			Если ОбщиеДанные Тогда
				ЗаполнитьЗначенияСвойств(Поиск, ВариантОбъект, "Отчет, КлючВарианта");
				Найденные = ПредопределенныеВарианты.НайтиСтроки(Поиск);
				Если Найденные.Количество() = 0 Тогда
					ТекстОшибки = СтрШаблон("Вариант ""%1"" не существует для отчета ""%2""", ВариантОбъект.КлючВарианта, ВариантОбъект.Отчет);
					ВО_ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстОшибки, ВариантОбъект.Ссылка);

					ОтменитьТранзакцию();
					Продолжить; // Возникла проблема.
				КонецЕсли;

				ОписаниеВарианта = Найденные[0]; // см. ОписаниеОтчетаПоУмолчанию
				ВО_ЗаполнитьОписаниеСтрокиВарианта(ОписаниеВарианта, ПредопределенныеВарианты.НайтиСтроки(Новый Структура("Отчет,ЭтоВариант", ВариантОбъект.Отчет, Ложь))[0]);

				// Если вариант отключен, то и в поиске он не участвует.
				Если Не ОписаниеВарианта.Включен Тогда
					ОтменитьТранзакцию();

					Продолжить; // Заполнение не требуется.
				КонецЕсли;

				СведенияОбОтчете.НастройкиКД		= БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(ОписаниеВарианта.СистемнаяИнформация, "НастройкиКД");
				СведенияОбОтчете.НастройкиДляПоиска	= ОписаниеВарианта.НастройкиДляПоиска;
			КонецЕсли;

			ЗаполнитьЗначенияСвойств(СтарыеСведения, ВО_ПоляДляПоиска(ВариантОбъект));
			СтарыеСведения.ХешНастроек			= ВариантОбъект.ХешНастроек;
			СведенияОбОтчете.ИндексироватьСхему	= ИндексироватьСхему; // Переиндексировать принудительно, без проверки хеш-суммы.

			Попытка
				СхемаПроиндексирована	= ВО_ЗаполнитьПоляДляПоиска(ВариантОбъект, СведенияОбОтчете);
			Исключение
				ТекстОшибки	= СтрШаблон("Не удалось перестроить индекс поиска для варианта ""%1"" отчета ""%2"". Возможно, отчет неисправен.", ВариантОбъект.КлючВарианта, ВариантОбъект.Отчет);
				ВО_ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ВариантОбъект.Ссылка);
				СписокОшибок.Добавить(ТекстОшибки);
				ОтменитьТранзакцию();

				Продолжить;
			КонецПопытки;

			Если СхемаПроиндексирована И ВО_ИзменилисьНастройкиПоиска(ВариантОбъект, СтарыеСведения) Тогда
				Если ОбщиеДанные Тогда
					ВО_ЗаписатьПредопределенный(ВариантОбъект);
				Иначе
					ОбновлениеВерсииИБСервер.ОИБ_ЗаписатьОбъект(ВариантОбъект);
				КонецЕсли;
			КонецЕсли;

			Если СведенияОбОтчете.ОтчетОбъект = Неопределено Тогда
				ПроблемныеОтчеты[Выборка.Отчет] = Истина; // Отчет не был подключен
			КонецЕсли;

			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();

			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	ВО_УстановитьПризнакЗаполненияПредставлений(Истина, Ложь, Режим);

	ВО_ЗаписатьВЖурналЗавершениеПроцедуры(ПредставлениеПроцедуры);

	Возврат Неопределено;
КонецФункции

Процедура ВО_АктуализироватьКлючиПредопределенных(Режим, Результат)
	ПредставлениеПроцедуры = СтрШаблон("Обновление ключей вариантов отчетов (%1)", ?(Режим = "ОбщиеДанныеКонфигурации", "метаданные конфигурации", "метаданные расширений"));
	БазоваяПодсистемаСервер.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Варианты отчетов",УровеньЖурналаРегистрации.Информация,,, СтрШаблон("Запуск процедуры ""%1"".", ПредставлениеПроцедуры));

	// Составить таблицу замен старых ключей вариантов на актуальные.
	Изменения = ВО_ИзмененияКлючей();

	// Получить ссылки вариантов отчетов для замены ключей,
	// исключив из списка замен те варианты отчетов,
	// актуальные ключи которых уже зарегистрированы,
	// или старые ключи которых уже не заняты.
	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	|	Изменения.Отчет,
	|	Изменения.СтароеИмяВарианта,
	|	Изменения.АктуальноеИмяВарианта
	|ПОМЕСТИТЬ втИзменения
	|ИЗ
	|	&Изменения КАК Изменения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втИзменения.Отчет,
	|	втИзменения.АктуальноеИмяВарианта,
	|	ВариантыОтчетовСтарые.Ссылка
	|ИЗ
	|	втИзменения КАК втИзменения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетов КАК ВариантыОтчетовАктуальные
	|		ПО втИзменения.Отчет = ВариантыОтчетовАктуальные.Отчет
	|			И втИзменения.АктуальноеИмяВарианта = ВариантыОтчетовАктуальные.КлючВарианта
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетов КАК ВариантыОтчетовСтарые
	|		ПО втИзменения.Отчет = ВариантыОтчетовСтарые.Отчет
	|			И втИзменения.СтароеИмяВарианта = ВариантыОтчетовСтарые.КлючВарианта
	|ГДЕ
	|	ВариантыОтчетовАктуальные.Ссылка ЕСТЬ NULL
	|	И НЕ ВариантыОтчетовСтарые.Ссылка ЕСТЬ NULL ";

	Если Режим = "ОбщиеДанныеРасширений" Тогда
		Запрос.Текст	= СтрЗаменить(Запрос.Текст, ".ПредопределенныеВариантыОтчетов", ".ПредопределенныеВариантыОтчетовРасширений");
		ИмяСправочника	= "Справочник.ПредопределенныеВариантыОтчетовРасширений";
	Иначе
		ИмяСправочника	= "Справочник.ПредопределенныеВариантыОтчетов";
	КонецЕсли;

	Запрос.УстановитьПараметр("Изменения", Изменения);

	// Заменить старые имена вариантов на актуальные.
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.ЕстьИзменения			= Истина;
		Результат.ЕстьВажныеИзменения	= Истина;

		НачатьТранзакцию();
		Попытка
			Блокировка					= Новый БлокировкаДанных;
			ЭлементБлокировки			= Блокировка.Добавить(ИмяСправочника);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();

			ВариантОбъект				= Выборка.Ссылка.ПолучитьОбъект();
			ВариантОбъект.КлючВарианта	= Выборка.АктуальноеИмяВарианта;
			ВО_ЗаписатьПредопределенный(ВариантОбъект);

			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();

			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;

	ВО_ЗаписатьВЖурналЗавершениеПроцедуры(ПредставлениеПроцедуры);
КонецПроцедуры

Процедура ВО_ПометитьУдаленныеПредопределенные(Режим, Результат)
	ПредставлениеПроцедуры = СтрШаблон("Обновление настроек предопределенных (%1)", ?(Режим = "ОбщиеДанныеКонфигурации", "метаданные конфигурации", "метаданные расширений"));
	БазоваяПодсистемаСервер.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Варианты отчетов",УровеньЖурналаРегистрации.Информация,,, СтрШаблон("Запуск процедуры ""%1"".", ПредставлениеПроцедуры));

	РеквизитыВариантов = Метаданные.Справочники.ВариантыОтчетов.Реквизиты;

	Если Режим = "ОбщиеДанныеКонфигурации" Тогда
		ТекстЗапроса	= "ВЫБРАТЬ * ИЗ Справочник.ПредопределенныеВариантыОтчетов УПОРЯДОЧИТЬ ПО ПометкаУдаления";
		ПустаяСсылка	= Справочники.ПредопределенныеВариантыОтчетов.ПустаяСсылка();
		ИмяТаблицы		= "Справочник.ПредопределенныеВариантыОтчетов";
	ИначеЕсли Режим = "ОбщиеДанныеРасширений" Тогда
		ТекстЗапроса	= "ВЫБРАТЬ * ИЗ Справочник.ПредопределенныеВариантыОтчетовРасширений УПОРЯДОЧИТЬ ПО ПометкаУдаления";
		ПустаяСсылка	= Справочники.ПредопределенныеВариантыОтчетовРасширений.ПустаяСсылка();
		ИмяТаблицы		= "Справочник.ПредопределенныеВариантыОтчетовРасширений";
	КонецЕсли;

	// Сопоставление информации из базы и из метаданных и пометка на удаление устаревших объектов из базы.
	Результат.ВариантыОтчетов.Индексы.Добавить("Отчет, КлючВарианта, НайденВБазеДанных, ЭтоВариант");
	ПоискВарианта					= Новый Структура("Отчет, КлючВарианта, НайденВБазеДанных, ЭтоВариант");
	ПоискВарианта.НайденВБазеДанных	= Ложь;
	ПоискВарианта.ЭтоВариант		= Истина;

	Запрос			= Новый Запрос;
	Запрос.Текст	= ТекстЗапроса;
	ПредопределенныеВариантыОтчетов = Запрос.Выполнить().Выгрузить();

	Для Каждого ВариантИзБазы Из ПредопределенныеВариантыОтчетов Цикл
		ЗаполнитьЗначенияСвойств(ПоискВарианта, ВариантИзБазы, "Отчет, КлючВарианта");
		Найденные = Результат.ВариантыОтчетов.НайтиСтроки(ПоискВарианта);
		Если Найденные.Количество() > 0 Тогда
			ОписаниеВарианта					= Найденные[0];
			ОписаниеОтчета						= Результат.ВариантыОтчетов.НайтиСтроки(Новый Структура("Отчет, ЭтоВариант", ВариантИзБазы.Отчет, Ложь))[0];
			ВО_ЗаполнитьОписаниеСтрокиВарианта(ОписаниеВарианта, ОписаниеОтчета);
			ОписаниеВарианта.НайденВБазеДанных	= Истина;
			ОписаниеВарианта.ВариантИзБазы		= ВариантИзБазы;

			Продолжить;
		КонецЕсли;

		Если ВариантИзБазы.ПометкаУдаления И ВариантИзБазы.Родитель = ПустаяСсылка Тогда
			Продолжить; // Действие не требуется.
		КонецЕсли;

		НачатьТранзакцию();
		Попытка
			Блокировка			= Новый БлокировкаДанных;
			ЭлементБлокировки	= Блокировка.Добавить(ИмяТаблицы);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВариантИзБазы.Ссылка);
			Блокировка.Заблокировать();

			ВариантОбъект = ВариантИзБазы.Ссылка.ПолучитьОбъект();
			Если ВариантОбъект = Неопределено Тогда
				ОтменитьТранзакцию();

				Продолжить;
			КонецЕсли;

			ВариантОбъект.ПометкаУдаления	= Истина;
			ВариантОбъект.Родитель			= ПустаяСсылка;
			ВО_ЗаписатьПредопределенный(ВариантОбъект);

			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;

		Результат.ЕстьИзменения			= Истина;
		Результат.ЕстьВажныеИзменения	= Истина;

	КонецЦикла;
	ВО_ЗаписатьВЖурналЗавершениеПроцедуры(ПредставлениеПроцедуры);
КонецПроцедуры

Процедура ВО_СформироватьТаблицуФункциональныхОпций(Режим, Результат)
	РеквизитыВариантов = Метаданные.Справочники.ВариантыОтчетов.Реквизиты;

	Если Режим = "ОбщиеДанныеКонфигурации" Тогда
		ПустаяСсылка = Справочники.ПредопределенныеВариантыОтчетов.ПустаяСсылка();
	ИначеЕсли Режим = "ОбщиеДанныеРасширений" Тогда
		ПустаяСсылка = Справочники.ПредопределенныеВариантыОтчетовРасширений.ПустаяСсылка();
	КонецЕсли;

	ТаблицаФункциональныхОпций = Новый ТаблицаЗначений;
	ТаблицаФункциональныхОпций.Колонки.Добавить("Отчет",                   РеквизитыВариантов.Отчет.Тип);
	ТаблицаФункциональныхОпций.Колонки.Добавить("ПредопределенныйВариант", РеквизитыВариантов.ПредопределенныйВариант.Тип);
	ТаблицаФункциональныхОпций.Колонки.Добавить("ИмяФункциональнойОпции",  Новый ОписаниеТипов("Строка"));

	Результат.Вставить("ТаблицаФункциональныхОпций", ТаблицаФункциональныхОпций);

	ОтчетыСНастройкамиСписок = Новый СписокЗначений;
	Результат.Вставить("ОтчетыСНастройкамиСписок", ОтчетыСНастройкамиСписок);

	ОсновныеВарианты = Новый Соответствие;
	Для Каждого ОписаниеВарианта Из Результат.ВариантыОтчетов Цикл
		Если Не ОписаниеВарианта.ЭтоВариант Тогда
			Если ОписаниеВарианта.ОпределитьНастройкиФормы Тогда
				ОтчетыСНастройкамиСписок.Добавить(ОписаниеВарианта.Отчет);
			КонецЕсли;

			Продолжить;
		КонецЕсли;

		// Установка реквизита ВариантРодитель для связи вариантов отчетов с основными вариантами отчетов.
		ОписаниеОтчета = Результат.ВариантыОтчетов.НайтиСтроки(Новый Структура("Отчет, ЭтоВариант", ОписаниеВарианта.Отчет, Ложь))[0];
		ВО_ЗаполнитьОписаниеСтрокиВарианта(ОписаниеВарианта, ОписаниеОтчета);
		Если ПустаяСтрока(ОписаниеОтчета.ОсновнойВариант) Или ОписаниеВарианта.КлючВарианта = ОписаниеОтчета.ОсновнойВариант Тогда
			КлючОсновногоВарианта	= ОписаниеВарианта.Отчет.ПолноеИмя + "." + ОписаниеВарианта.КлючВарианта;
			ВариантСсылка			= ОсновныеВарианты[КлючОсновногоВарианта];
			Если ВариантСсылка = Неопределено Тогда
				ОписаниеВарианта.ВариантРодитель		= ПустаяСсылка;
				ВариантСсылка							= ВО_ОбновитьПредопределенныйВариантОтчета(Режим, ОписаниеВарианта, Результат); 
				ОсновныеВарианты[КлючОсновногоВарианта]	= ВариантСсылка;
			КонецЕсли
		Иначе
			ОсновнойВариант			= Результат.ВариантыОтчетов.НайтиСтроки(Новый Структура("Отчет, КлючВарианта", ОписаниеВарианта.Отчет, ОписаниеОтчета.ОсновнойВариант))[0];
			КлючОсновногоВарианта	= ОсновнойВариант.Отчет.ПолноеИмя + "." + ОсновнойВариант.КлючВарианта;
			ОсновнойВариантСсылка	= ОсновныеВарианты[КлючОсновногоВарианта];
			Если ОсновнойВариантСсылка = Неопределено Тогда
				ОсновнойВариант.ВариантРодитель			= ПустаяСсылка;
				ОсновнойВариантСсылка					= ВО_ОбновитьПредопределенныйВариантОтчета(Режим, ОсновнойВариант, Результат); 
				ОсновныеВарианты[КлючОсновногоВарианта]	= ОсновнойВариантСсылка;
			КонецЕсли;
			ОписаниеВарианта.ВариантРодитель	= ОсновнойВариантСсылка;
			ВариантСсылка						= ВО_ОбновитьПредопределенныйВариантОтчета(Режим, ОписаниеВарианта, Результат);
		КонецЕсли;

		Для Каждого ИмяФункциональнойОпции Из ОписаниеВарианта.ФункциональныеОпции Цикл
			СвязьСФункциональнойОпцией							= ТаблицаФункциональныхОпций.Добавить();
			СвязьСФункциональнойОпцией.Отчет					= ОписаниеВарианта.Отчет;
			СвязьСФункциональнойОпцией.ПредопределенныйВариант	= ВариантСсылка;
			СвязьСФункциональнойОпцией.ИмяФункциональнойОпции	= ИмяФункциональнойОпции;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ВО_ЗапланироватьЗаполнениеПредставлений(Знач Языки = Неопределено, Знач ИндексТекущегоЯзыка = 0)
	Если БазоваяПодсистемаСервер.ОН_ИнформационнаяБазаФайловая() Тогда
		Возврат;
	КонецЕсли;

	ПараметрыЗаполнения = ВО_ПараметрыЗаполненияПредставленийВариантовОтчетов(Языки, ИндексТекущегоЯзыка);
	Если ПараметрыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОтборЗаданий = Новый Структура("Метаданные, Ключ");
	ЗаполнитьЗначенияСвойств(ОтборЗаданий, ПараметрыЗаполнения);

	Задания = РегламентныеЗаданияСервер.РЗ_НайтиЗадания(ОтборЗаданий);

	ЗаполнениеПредставлений = ?(Задания.Количество() = 0, Неопределено, Задания[0]);
	Если ЗаполнениеПредставлений = Неопределено Тогда
		ЗаполнениеПредставлений = РегламентныеЗаданияСервер.РЗ_ДобавитьЗадание(ПараметрыЗаполнения);

		Возврат;
	ИначеЕсли ЗаполнениеПредставлений.Использование Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(ЗаполнениеПредставлений, ПараметрыЗаполнения);
	ЗаполнениеПредставлений.Записать();
КонецПроцедуры

Функция ВО_РезультатОбновленияОбщихДанных(Знач Режим, Знач РазделенныеОбработчики)
	Результат	= Новый Структура;

	Результат.Вставить("ОбновлятьКонфигурацию",		Режим = "ОбщиеДанныеКонфигурации");
	Результат.Вставить("ОбновлятьРасширения",		Режим = "ОбщиеДанныеРасширений");
	Результат.Вставить("РазделенныеОбработчики",	РазделенныеОбработчики);
	Результат.Вставить("ЕстьИзменения",				Ложь);
	Результат.Вставить("ЕстьВажныеИзменения",		Ложь);
	Результат.Вставить("ВариантыОтчетов",			ВО_ПредопределенныеВариантыОтчетов(?(Результат.ОбновлятьКонфигурацию, "Внутренний", "Расширение")));
	Результат.Вставить("ОбновлятьЗамеры",			Ложь);
	Результат.Вставить("ТаблицаЗамеров",			ВО_ТаблицаЗамеров());

	Возврат Результат;
КонецФункции

Процедура ВО_ПометитьНаУдалениеВариантыУдаленныхОтчетов(Режим, Результат)
	ПредставлениеПроцедуры = СтрШаблон("Удаление вариантов удаленных отчетов (%1)", НРег(ВО_ПредставлениеРежима(Режим)));
	БазоваяПодсистемаСервер.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Варианты отчетов",УровеньЖурналаРегистрации.Информация,,, СтрШаблон("Запуск процедуры ""%1"".", ПредставлениеПроцедуры));

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	|	ВариантыОтчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	НЕ ВариантыОтчетов.ПометкаУдаления
	|	И ВариантыОтчетов.ТипОтчета = &ТипОтчета
	|	И ЕСТЬNULL(ВариантыОтчетов.Отчет.ПометкаУдаления, ИСТИНА)";

	ИмяТаблицы = "Справочник.ВариантыОтчетов";
	Если Режим = "ОбщиеДанныеКонфигурации" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ".ВариантыОтчетов", ".ПредопределенныеВариантыОтчетов");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ВариантыОтчетов.ТипОтчета = &ТипОтчета", "");
		ИмяТаблицы = "Справочник.ПредопределенныеВариантыОтчетов";
	ИначеЕсли Режим = "ОбщиеДанныеРасширений" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ".ВариантыОтчетов", ".ПредопределенныеВариантыОтчетовРасширений");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ВариантыОтчетов.ТипОтчета = &ТипОтчета", "");
		ИмяТаблицы = "Справочник.ПредопределенныеВариантыОтчетовРасширений";
	ИначеЕсли Режим = "РазделенныеДанныеКонфигурации" Тогда
		Запрос.УстановитьПараметр("ТипОтчета", Перечисления.ТипыОтчетов.Внутренний);
	ИначеЕсли Режим = "РазделенныеДанныеРасширений" Тогда
		Запрос.УстановитьПараметр("ТипОтчета", Перечисления.ТипыОтчетов.Расширение);
	КонецЕсли;

	СсылкиУдаляемыхВариантов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Для Каждого ВариантСсылка Из СсылкиУдаляемыхВариантов Цикл
		Результат.ЕстьИзменения			= Истина;
		Результат.ЕстьВажныеИзменения	= Истина;

		НачатьТранзакцию();
		Попытка
			Блокировка			= Новый БлокировкаДанных;
			ЭлементБлокировки	= Блокировка.Добавить(ИмяТаблицы);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВариантСсылка);
			Блокировка.Заблокировать();

			ВариантОбъект = ВариантСсылка.ПолучитьОбъект();
			Если ВариантОбъект = Неопределено Тогда
				ОтменитьТранзакцию();

				Продолжить;
			КонецЕсли;
			ВариантОбъект.Заблокировать();
			ВариантОбъект.ПометкаУдаления = Истина;
			ВО_ЗаписатьПредопределенный(ВариантОбъект);

			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();

			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;

	ВО_ЗаписатьВЖурналЗавершениеПроцедуры(ПредставлениеПроцедуры);
КонецПроцедуры

Процедура ВО_ЗаписатьТаблицуФункциональныхОпций(Режим, Результат)
	Если Режим = "ОбщиеДанныеРасширений" И Не ЗначениеЗаполнено(ПараметрыСеанса.ВерсияРасширений) Тогда
		Возврат; // Обновление не требуется.
	КонецЕсли;
	ПредставлениеПроцедуры = "Запись неразделенного кэша в регистр";
	БазоваяПодсистемаСервер.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Варианты отчетов",УровеньЖурналаРегистрации.Информация,,, СтрШаблон("Запуск процедуры ""%1"".", ПредставлениеПроцедуры));

	Результат.ТаблицаФункциональныхОпций.Сортировать("Отчет, ПредопределенныйВариант, ИмяФункциональнойОпции");
	Результат.ОтчетыСНастройкамиСписок.СортироватьПоЗначению();

	НовоеЗначение = Новый Структура;
	НовоеЗначение.Вставить("ТаблицаФункциональныхОпций",	Результат.ТаблицаФункциональныхОпций);
	НовоеЗначение.Вставить("ОтчетыСНастройками",			Результат.ОтчетыСНастройкамиСписок.ВыгрузитьЗначения());

	ПолноеИмяПодсистемы = "СтандартныеПодсистемы.ВариантыОтчетов";

	Если Режим = "ОбщиеДанныеКонфигурации" Тогда
		РегистрыСведений.ПараметрыРаботыПрограммы.УстановитьПараметрРаботыПрограммы(ПолноеИмяПодсистемы, НовоеЗначение);
	ИначеЕсли Режим = "ОбщиеДанныеРасширений" Тогда
		РегистрыСведений.ПараметрыРаботыВерсийРасширений.УстановитьПараметрРаботыРасширения(ПолноеИмяПодсистемы, НовоеЗначение, Ложь);
	КонецЕсли;

	ВО_ЗаписатьВЖурналЗавершениеПроцедуры(ПредставлениеПроцедуры);
КонецПроцедуры

Процедура ВО_ЗафиксироватьТекущуюВерсиюРасширений()
	Если Не ЗначениеЗаполнено(ПараметрыСеанса.ВерсияРасширений) Тогда
		Возврат; // Обновление не требуется.
	КонецЕсли;

	ПредставлениеПроцедуры = "Запись регистра версий расширений";
	БазоваяПодсистемаСервер.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Варианты отчетов",УровеньЖурналаРегистрации.Информация,,, СтрШаблон("Запуск процедуры ""%1"".", ПредставлениеПроцедуры));

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	|	ПредопределенныеРасширений.Ссылка КАК Вариант,
	|	ПредопределенныеРасширений.Отчет,
	|	ПредопределенныеРасширений.КлючВарианта
	|ИЗ
	|	Справочник.ПредопределенныеВариантыОтчетовРасширений КАК ПредопределенныеРасширений
	|ГДЕ
	|	ПредопределенныеРасширений.ПометкаУдаления = ЛОЖЬ";

	Таблица		= Запрос.Выполнить().Выгрузить();
	Измерения	= Новый Структура("ВерсияРасширений", ПараметрыСеанса.ВерсияРасширений);
	Ресурсы		= Новый Структура;
	Набор		= РегистрыСведений.ПредопределенныеВариантыОтчетовВерсийРасширений.Набор(Таблица, Измерения, Ресурсы, Истина);
	ОбновлениеВерсииИБСервер.ОИБ_ЗаписатьНаборЗаписей(Набор, Истина);

	ВО_ЗаписатьВЖурналЗавершениеПроцедуры(ПредставлениеПроцедуры);
КонецПроцедуры

Функция ВО_РезультатАктуализацииВариантовОтчетов()
	Результат = Новый Структура;

	Результат.Вставить("ЕстьИзменения",					Ложь);
	Результат.Вставить("ЕстьВажныеИзменения",			Ложь);
	Результат.Вставить("ПустаяСсылка",					Справочники.ВариантыОтчетов.ПустаяСсылка());
	Результат.Вставить("ПоискРодителей",				Новый Соответствие);
	Результат.Вставить("ОбработанныеПредопределенные",	Новый Соответствие);
	Результат.Вставить("ОсновныеВарианты",				ВО_КоллекцияОсновныхВариантовОтчетов());

	Возврат Результат;
КонецФункции

Процедура ВО_АктуализироватьВариантыОтчетовПоПредопределенным(Режим, Результат)
	ПредставлениеПроцедуры = СтрШаблон("Обновление вариантов отчетов (%1)", НРег(ВО_ПредставлениеРежима(Режим)));
	БазоваяПодсистемаСервер.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Варианты отчетов",УровеньЖурналаРегистрации.Информация,,, СтрШаблон("Запуск процедуры ""%1"".", ПредставлениеПроцедуры));

	// Обновление сведений предопределенных вариантов.
	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	|	ПредопределенныеКонфигурации.Ссылка КАК ПредопределенныйВариант,
	|	ПредопределенныеКонфигурации.Наименование КАК Наименование,
	|	ПредопределенныеКонфигурации.Отчет КАК Отчет,
	|	ПредопределенныеКонфигурации.ГруппироватьПоОтчету КАК ГруппироватьПоОтчету,
	|	ПредопределенныеКонфигурации.КлючВарианта КАК КлючВарианта,
	|	ПредопределенныеКонфигурации.ВидимостьПоУмолчанию КАК ВидимостьПоУмолчанию,
	|	ПредопределенныеКонфигурации.Родитель КАК Родитель
	|ПОМЕСТИТЬ втПредопределенные
	|ИЗ
	|	Справочник.ПредопределенныеВариантыОтчетов КАК ПредопределенныеКонфигурации
	|ГДЕ
	|	ПредопределенныеКонфигурации.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВариантыОтчетов.Ссылка,
	|	ВариантыОтчетов.ПометкаУдаления,
	|	ВариантыОтчетов.Отчет,
	|	ВариантыОтчетов.ТипОтчета,
	|	ВариантыОтчетов.КлючВарианта,
	|	ВариантыОтчетов.Наименование,
	|	ВариантыОтчетов.ПредопределенныйВариант,
	|	ВариантыОтчетов.Родитель
	|ПОМЕСТИТЬ втВариантыОтчетов
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	(ВариантыОтчетов.ТипОтчета = &ТипОтчета
	|		ИЛИ ТИПЗНАЧЕНИЯ(ВариантыОтчетов.Отчет) = &ТипРеквизитаОтчет)
	|	И ВариантыОтчетов.Пользовательский = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА втПредопределенные.ПредопределенныйВариант ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УстановитьПометкуУдаления,
	|	ВЫБОР
	|		КОГДА втВариантыОтчетов.Ссылка ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СоздатьНовый,
	|	втПредопределенные.ПредопределенныйВариант КАК ПредопределенныйВариант,
	|	втПредопределенные.Наименование КАК Наименование,
	|	втПредопределенные.Отчет КАК Отчет,
	|	втПредопределенные.КлючВарианта КАК КлючВарианта,
	|	втПредопределенные.ГруппироватьПоОтчету КАК ГруппироватьПоОтчету,
	|	ВЫБОР
	|		КОГДА втПредопределенные.Родитель = &ПустаяСсылкаВарианта
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ втПредопределенные.Родитель
	|	КОНЕЦ КАК ПредопределенныйВариантРодитель,
	|	втВариантыОтчетов.Ссылка КАК РеквизитСсылка,
	|	втВариантыОтчетов.Родитель КАК РеквизитРодитель,
	|	втВариантыОтчетов.Отчет КАК РеквизитОтчет,
	|	втВариантыОтчетов.КлючВарианта КАК РеквизитКлючВарианта,
	|	втВариантыОтчетов.Наименование КАК РеквизитНаименование,
	|	втВариантыОтчетов.ПредопределенныйВариант КАК РеквизитПредопределенныйВариант,
	|	втВариантыОтчетов.ПометкаУдаления КАК РеквизитПометкаУдаления
	|ИЗ
	|	втВариантыОтчетов КАК втВариантыОтчетов
	|		ПОЛНОЕ СОЕДИНЕНИЕ втПредопределенные КАК втПредопределенные
	|		ПО втВариантыОтчетов.ПредопределенныйВариант = втПредопределенные.ПредопределенныйВариант";

	Если Режим = "РазделенныеДанныеКонфигурации" Тогда
		Запрос.УстановитьПараметр("ТипОтчета",				Перечисления.ТипыОтчетов.Внутренний);
		Запрос.УстановитьПараметр("ТипРеквизитаОтчет",		Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
		Запрос.УстановитьПараметр("ПустаяСсылкаВарианта",	Справочники.ПредопределенныеВариантыОтчетов.ПустаяСсылка());
	ИначеЕсли Режим = "РазделенныеДанныеРасширений" Тогда
		Запрос.УстановитьПараметр("ТипОтчета",				Перечисления.ТипыОтчетов.Расширение);
		Запрос.УстановитьПараметр("ТипРеквизитаОтчет", 		Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений"));
		Запрос.УстановитьПараметр("ПустаяСсылкаВарианта",	Справочники.ПредопределенныеВариантыОтчетовРасширений.ПустаяСсылка());
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ".ПредопределенныеВариантыОтчетов", ".ПредопределенныеВариантыОтчетовРасширений");
	КонецЕсли;

	ИзменяемыеРеквизиты = Новый Структура("ПометкаУдаления, Родитель, Наименование, Отчет, КлючВарианта, ПредопределенныйВариант");

	СводнаяТаблицаПредопределенных = Запрос.Выполнить().Выгрузить();
	СводнаяТаблицаПредопределенных.Колонки.Добавить("Обработана",	Новый ОписаниеТипов("Булево"));
	СводнаяТаблицаПредопределенных.Колонки.Добавить("Родитель",		Новый ОписаниеТипов("СправочникСсылка.ВариантыОтчетов"));

	// Обновление основных предопределенных вариантов (без родителя).
	Поиск		= Новый Структура("ПредопределенныйВариантРодитель, УстановитьПометкуУдаления", Неопределено, Ложь);
	Найденные	= СводнаяТаблицаПредопределенных.НайтиСтроки(Поиск);
	Для Каждого СтрокаТаблицы Из Найденные Цикл
		Если СтрокаТаблицы.Обработана Тогда
			Продолжить;
		КонецЕсли;
		Если Результат.ОбработанныеПредопределенные[СтрокаТаблицы.ПредопределенныйВариант] <> Неопределено Тогда
			СтрокаТаблицы.УстановитьПометкуУдаления = Истина;
		КонецЕсли;

		СтрокаТаблицы.Родитель = Результат.ПустаяСсылка;
		ВО_ОбновитьРазделенныйПредопределенный(Результат, ИзменяемыеРеквизиты, СтрокаТаблицы);

		Если Не СтрокаТаблицы.УстановитьПометкуУдаления И СтрокаТаблицы.ГруппироватьПоОтчету И Результат.ПоискРодителей[СтрокаТаблицы.Отчет] = Неопределено Тогда
			Результат.ПоискРодителей[СтрокаТаблицы.Отчет] = СтрокаТаблицы.РеквизитСсылка;

			ОсновнойВариант			= Результат.ОсновныеВарианты.Добавить();
			ОсновнойВариант.Отчет	= СтрокаТаблицы.Отчет;
			ОсновнойВариант.Вариант	= СтрокаТаблицы.РеквизитСсылка;
		КонецЕсли;
	КонецЦикла;

	// Обновление всех оставшихся предопределенных вариантов (подчиненных).
	СводнаяТаблицаПредопределенных.Сортировать("УстановитьПометкуУдаления Возр");
	Для Каждого СтрокаТаблицы Из СводнаяТаблицаПредопределенных Цикл
		Если СтрокаТаблицы.Обработана Тогда
			Продолжить;
		КонецЕсли;
		Если Результат.ОбработанныеПредопределенные[СтрокаТаблицы.ПредопределенныйВариант] <> Неопределено Тогда
			СтрокаТаблицы.УстановитьПометкуУдаления = Истина;
		КонецЕсли;
		Если СтрокаТаблицы.УстановитьПометкуУдаления Тогда
			РодительСсылка = Результат.ПустаяСсылка;
		Иначе
			РодительСсылка = Результат.ПоискРодителей[СтрокаТаблицы.Отчет];
		КонецЕсли;

		СтрокаТаблицы.Родитель = РодительСсылка;
		ВО_ОбновитьРазделенныйПредопределенный(Результат, ИзменяемыеРеквизиты, СтрокаТаблицы);
	КонецЦикла;

	// Обновление родителей пользовательских вариантов.
	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	|	ОсновныеВариантыОтчетов.Отчет,
	|	ОсновныеВариантыОтчетов.Вариант
	|ПОМЕСТИТЬ втОсновные
	|ИЗ
	|	&ОсновныеВариантыОтчетов КАК ОсновныеВариантыОтчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВариантыОтчетов.Ссылка,
	|	втОсновные.Вариант КАК Родитель
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОсновные КАК втОсновные
	|		ПО ВариантыОтчетов.Отчет = втОсновные.Отчет
	|			И ВариантыОтчетов.Родитель <> втОсновные.Вариант
	|			И ВариантыОтчетов.Родитель.Родитель <> втОсновные.Вариант
	|			И ВариантыОтчетов.Ссылка <> втОсновные.Вариант
	|ГДЕ
	|	ВариантыОтчетов.Пользовательский
	|	ИЛИ НЕ ВариантыОтчетов.ПометкаУдаления";

	Запрос.УстановитьПараметр("ОсновныеВариантыОтчетов", Результат.ОсновныеВарианты);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.ЕстьИзменения = Истина;

		НачатьТранзакцию();
		Попытка
			Блокировка			= Новый БлокировкаДанных;
			ЭлементБлокировки	= Блокировка.Добавить("Справочник.ВариантыОтчетов");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();

			ВариантОбъект			= Выборка.Ссылка.ПолучитьОбъект();
			ВариантОбъект.Родитель	= Выборка.Родитель;
			ОбновлениеВерсииИБСервер.ОИБ_ЗаписатьОбъект(ВариантОбъект);

			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();

			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;

	ВО_ЗаписатьВЖурналЗавершениеПроцедуры(ПредставлениеПроцедуры);
КонецПроцедуры

Процедура ВО_УстановитьПризнакЗаполненияПредставлений(Знач Значение, Знач СброситьКеш, Знач Режим)
	ИмяПараметра = "СтандартныеПодсистемы.ВариантыОтчетов.ПредставленияЗаполнены";
	Если Режим = "ОбщиеДанныеКонфигурации" Тогда
		Параметры = РегистрыСведений.ПараметрыРаботыПрограммы.ПараметрРаботыПрограммы(ИмяПараметра);
	Иначе
		Параметры = РегистрыСведений.ПараметрыРаботыВерсийРасширений.ПараметрРаботыРасширения(ИмяПараметра, Ложь);
	КонецЕсли;
	Если Параметры = Неопределено Тогда
		Параметры = Новый Соответствие;
	ИначеЕсли СброситьКеш Тогда
		Параметры.Очистить();
	КонецЕсли;
	Параметры[ТекущийЯзык().КодЯзыка] = Значение;

	Если Режим = "ОбщиеДанныеКонфигурации" Тогда
		РегистрыСведений.ПараметрыРаботыПрограммы.УстановитьПараметрРаботыПрограммы(ИмяПараметра, Параметры);
	Иначе
		РегистрыСведений.ПараметрыРаботыВерсийРасширений.УстановитьПараметрРаботыРасширения(ИмяПараметра, Параметры, Ложь);
	КонецЕсли;
КонецПроцедуры

Функция ВО_ПредставлениеРежима(Режим)
	Режимы = Новый Соответствие;
	Режимы.Вставить("ОбщиеДанныеКонфигурации",			"Общие данные конфигурации");
	Режимы.Вставить("ОбщиеДанныеРасширений",			"Общие данные расширений");
	Режимы.Вставить("РазделенныеДанныеКонфигурации",	"Разделенные данные конфигурации");
	Режимы.Вставить("РазделенныеДанныеРасширений",		"Разделенные данные расширений");

	ПредставлениеРежима = Режимы.Получить(Режим);

	Возврат ?(ПредставлениеРежима = Неопределено, "", ПредставлениеРежима);
КонецФункции

Функция ВО_ПредопределенныеВариантыОтчетов(ТипОтчетов = "Внутренний") Экспорт
	Результат	= ВО_КоллекцияПредопределенныхВариантовОтчетов();

	ГруппироватьПоОтчетам	= ВО_ГлобальныеНастройки().ВыводитьОтчетыВместоВариантов;
	// Зарезервировано для новых подсистем

	ПодсистемыОтчетов	= ВО_РазмещениеОтчетовВПодсистемах();
	КэшФлажкаХранилища	= Неопределено;

	Для Каждого ОтчетМетаданные Из Метаданные.Отчеты Цикл
		Если Не ВО_ОтчетПодключенКХранилищу(ОтчетМетаданные, КэшФлажкаХранилища) Тогда
			Продолжить;
		КонецЕсли;

		ОтчетСсылка = Справочники.ИдентификаторыОбъектовМетаданных.ИдентификаторОбъектаМетаданных(ОтчетМетаданные, Истина);
		ОтчетТип = ВО_ТипОтчетаСтрокой(ОтчетСсылка);
		Если ТипОтчетов <> Неопределено И ТипОтчетов <> ОтчетТип Тогда
			Продолжить;
		КонецЕсли;

		ОписаниеОтчета = ВО_ОписаниеОтчетаПоУмолчанию(Результат, ОтчетМетаданные, ОтчетСсылка, ОтчетТип, ГруппироватьПоОтчетам);

		// Размещение.
		Найденные = ПодсистемыОтчетов.НайтиСтроки(Новый Структура("ОтчетМетаданные", ОтчетМетаданные));
		Для Каждого СтрокаПодсистема Из Найденные Цикл
			ОписаниеОтчета.Размещение.Вставить(СтрокаПодсистема.ПодсистемаМетаданные, "");
		КонецЦикла;

		// Предопределенные варианты.
		Если ОписаниеОтчета.ИспользуетСКД Тогда
			ОтчетМенеджер		= Отчеты[ОтчетМетаданные.Имя];
			СхемаКД				= Неопределено;
			ВариантыНастроек	= Неопределено;
			Попытка
				СхемаКД		= ОтчетМенеджер.ПолучитьМакет(ОтчетМетаданные.ОсновнаяСхемаКомпоновкиДанных.Имя);
			Исключение
				ТекстОшибки	= СтрШаблон("Не удалось прочитать схему отчета:
						|%1", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ВО_ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Предупреждение, ТекстОшибки, ОтчетМетаданные);
			КонецПопытки;
			// Чтение настроек вариантов отчета из схемы.
			Если СхемаКД <> Неопределено Тогда
				Попытка
					ВариантыНастроек	= СхемаКД.ВариантыНастроек;
				Исключение
					ТекстОшибки			= СтрШаблон("Не удалось прочитать список вариантов отчета:
							|%1", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ВО_ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Предупреждение, ТекстОшибки, ОтчетМетаданные);
				КонецПопытки;
			КонецЕсли;
			// Чтение настроек вариантов отчета из модуля менеджера (если не получилось из схемы).
			Если ВариантыНастроек = Неопределено Тогда
				Попытка
					ВариантыНастроек	= ОтчетМенеджер.ВариантыНастроек();
				Исключение
					ТекстОшибки			= СтрШаблон("Не удалось прочитать список вариантов отчета из модуля менеджера:
							|%1", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ВО_ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстОшибки, ОтчетМетаданные);
				КонецПопытки;
			КонецЕсли;
			// Регистрация найденных вариантов.
			Если ВариантыНастроек <> Неопределено Тогда
				Для Каждого ВариантНастроекКД Из ВариантыНастроек Цикл
					ОписаниеВарианта				= Результат.Добавить();
					ОписаниеВарианта.Отчет			= ОписаниеОтчета.Отчет;
					ОписаниеВарианта.КлючВарианта	= ВариантНастроекКД.Имя;
					ОписаниеВарианта.Наименование	= ВариантНастроекКД.Представление;
					Если ПустаяСтрока(ОписаниеВарианта.Наименование) Тогда // если конфигурация частично локализована
						ОписаниеВарианта.Наименование = ?(ОписаниеВарианта.КлючВарианта <> "Основной", ОписаниеВарианта.КлючВарианта,  ОписаниеОтчета.Наименование + "." + ОписаниеВарианта.КлючВарианта);
					КонецЕсли;
					ОписаниеВарианта.Тип          = ОтчетТип;
					ОписаниеВарианта.ЭтоВариант   = Истина;
					Если ПустаяСтрока(ОписаниеОтчета.ОсновнойВариант) Тогда
						ОписаниеОтчета.ОсновнойВариант = ОписаниеВарианта.КлючВарианта;
					КонецЕсли;
					Если ТипЗнч(ВариантНастроекКД) = Тип("ВариантНастроекКомпоновкиДанных") Тогда
						Попытка
							ОписаниеВарианта.СистемнаяИнформация.Вставить("НастройкиКД", ВариантНастроекКД.Настройки);
						Исключение
							ТекстОшибки = СтрШаблон("Не удалось прочитать настройки варианта ""%1"":
									|%2", ОписаниеВарианта.КлючВарианта, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
							ВО_ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Предупреждение, ТекстОшибки, ОтчетМетаданные);
						КонецПопытки;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

		Если ПустаяСтрока(ОписаниеОтчета.ОсновнойВариант) Тогда
			ОписаниеВарианта				= Результат.Добавить();
			ЗаполнитьЗначенияСвойств(ОписаниеВарианта, ОписаниеОтчета, "Отчет, Наименование");
			ОписаниеВарианта.КлючВарианта	= "";
			ОписаниеВарианта.ЭтоВариант		= Истина;
			ОписаниеОтчета.ОсновнойВариант	= ОписаниеВарианта.КлючВарианта;
		КонецЕсли;

		// Зазерервировано для новых подсистем
	КонецЦикла;

	КэшРезультата = Результат.Скопировать(, "Отчет, Наименование");

	// Механизмы расширения.
	Если ТипОтчетов = Неопределено Или ТипОтчетов = "Внутренний" Тогда
		ВО_НастроитьОтчетВМодулеМенеджера(Результат, Метаданные.Отчеты.УниверсальныйОтчет);
	КонецЕсли;

	Если ТипОтчетов = Неопределено Или ТипОтчетов = "Внутренний" Или ТипОтчетов = "Расширение" Тогда
		ИнтеграцияПодсистемСервер.ПриНастройкеВариантовОтчетов(Результат);
	КонецЕсли;

	ВО_ЗаполнитьОчищенныеНаименования(Результат, КэшРезультата);

	// Определение основных вариантов отчетов.
	Для Каждого ОписаниеОтчета Из Результат.НайтиСтроки(Новый Структура("ЭтоВариант", Ложь)) Цикл
		Если Не ОписаниеОтчета.ГруппироватьПоОтчету Тогда
			ОписаниеОтчета.ОсновнойВариант = "";

			Продолжить;
		КонецЕсли;

		ЕстьОсновойВариант		= Не ПустаяСтрока(ОписаниеОтчета.ОсновнойВариант);
		ОсновойВариантВключен	= Ложь;
		Если ЕстьОсновойВариант Тогда
			ПоискОписания = Новый Структура;
			ПоискОписания.Вставить("Отчет",			ОписаниеОтчета.Отчет);
			ПоискОписания.Вставить("КлючВарианта",	ОписаниеОтчета.ОсновнойВариант);
			ПоискОписания.Вставить("ЭтоВариант",	Истина);

			НайденныеОписания	= Результат.НайтиСтроки(ПоискОписания);
			Описание			= НайденныеОписания[0]; // см. ОписаниеОтчетаПоУмолчанию

			ОсновойВариантВключен = Описание.Включен;
		КонецЕсли;

		Если Не ЕстьОсновойВариант Или Не ОсновойВариантВключен Тогда
			ПоискОписания		= Новый Структура("Отчет", ОписаниеОтчета.Отчет);
			НайденныеОписания	= Результат.НайтиСтроки(ПоискОписания);

			Для Каждого ОписаниеВарианта Из НайденныеОписания Цикл
				Если ПустаяСтрока(ОписаниеВарианта.КлючВарианта) Тогда
					Продолжить;
				КонецЕсли;

				ВО_ЗаполнитьОписаниеСтрокиВарианта(ОписаниеВарианта, ОписаниеОтчета);

				Если ОписаниеВарианта.Включен Тогда
					ОписаниеОтчета.ОсновнойВариант			= ОписаниеВарианта.КлючВарианта;
					ОписаниеВарианта.ВидимостьПоУмолчанию	= Истина;

					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции

Процедура ВО_ЗаполнитьОписаниеСтрокиВарианта(ОписаниеВарианта, ОписаниеОтчета)
	Если ОписаниеВарианта.ОписаниеПолучено Тогда
		Возврат;
	КонецЕсли;

	// Флажок изменения настроек
	ОписаниеВарианта.ОписаниеПолучено = Истина;

	// Копирование настроек отчета.
	ЗаполнитьЗначенияСвойств(ОписаниеВарианта, ОписаниеОтчета, "Включен, ВидимостьПоУмолчанию, ГруппироватьПоОтчету");

	Если ОписаниеВарианта.КлючВарианта = ОписаниеОтчета.ОсновнойВариант Тогда
		// Вариант "по умолчанию".
		ОписаниеВарианта.Описание				= ОписаниеОтчета.Описание;
		ОписаниеВарианта.ВидимостьПоУмолчанию	= Истина;
	Иначе
		// Предопределенный вариант.
		Если ОписаниеВарианта.ГруппироватьПоОтчету Тогда
			ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
		КонецЕсли;
	КонецЕсли;

	ОписаниеВарианта.Размещение				= БазоваяПодсистемаСервер.ОН_СкопироватьРекурсивно(ОписаниеОтчета.Размещение);
	ОписаниеВарианта.ФункциональныеОпции	= БазоваяПодсистемаСервер.ОН_СкопироватьРекурсивно(ОписаниеОтчета.ФункциональныеОпции);
	ОписаниеВарианта.НастройкиДляПоиска		= БазоваяПодсистемаСервер.ОН_СкопироватьРекурсивно(ОписаниеОтчета.НастройкиДляПоиска);

	// Зарезервировано для новых подсистем
КонецПроцедуры

Функция ВО_ПоляДляПоиска(ВариантОтчета)
	Результат = Новый Структура;
	Результат.Вставить("НаименованияПолей",					"");
	Результат.Вставить("НаименованияПараметровИОтборов",	"");
	ЭтоПользовательскийВариантОтчета = (ТипЗнч(ВариантОтчета) = Тип("СправочникОбъект.ВариантыОтчетов"));
	Если Не ЭтоПользовательскийВариантОтчета Тогда
		Результат.Вставить("КлючевыеСлова",	"");
		Результат.Вставить("Описание",		"");
		Результат.Вставить("Наименование",	"");
	КонецЕсли;

	Если ТекущийЯзык() = Метаданные.ОсновнойЯзык Или ЭтоПользовательскийВариантОтчета Тогда
		ЗаполнитьЗначенияСвойств(Результат, ВариантОтчета);

		Возврат Результат;
	КонецЕсли;

	ПредставленияДляЯзыка = ВариантОтчета.Представления.Найти(ТекущийЯзык().КодЯзыка, "КодЯзыка");
	Если ПредставленияДляЯзыка = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(Результат, ПредставленияДляЯзыка);

	Возврат Результат;
КонецФункции

Функция ВО_ЗаполнитьПоляДляПоиска(ВариантОбъект, СведенияОбОтчете = Неопределено) Экспорт
	ПоляДляПоиска = ВО_ПоляДляПоиска(ВариантОбъект);

	ПроверятьХеш = СведенияОбОтчете = Неопределено Или Не СведенияОбОтчете.ИндексироватьСхему;
	Если ПроверятьХеш Тогда
		// Проверка, заполнены ли поля для поиска ранее.
		ЗаполнитьПоля				= Лев(ПоляДляПоиска.НаименованияПолей, 1) <> "#";
		ЗаполнитьПараметрыИОтборы	= Лев(ПоляДляПоиска.НаименованияПараметровИОтборов, 1) <> "#";
		Если Не ЗаполнитьПоля И Не ЗаполнитьПараметрыИОтборы Тогда
			Возврат Ложь; // Заполнение не требуется.
		КонецЕсли;
	Иначе
		ЗаполнитьПоля				= Истина;
		ЗаполнитьПараметрыИОтборы	= Истина;
	КонецЕсли;

	// Получение объекта отчета, настроек СКД и варианта.
	ЭтоПредопределенный = ВО_ЭтоПредопределенныйВариантОтчета(ВариантОбъект);

	// Предустановленные настройки поиска.
	НастройкиДляПоиска = ?(СведенияОбОтчете <> Неопределено, СведенияОбОтчете.НастройкиДляПоиска, Неопределено);
	Если НастройкиДляПоиска <> Неопределено Тогда
		ТребуетсяЗапись = Ложь;
		Если ЗначениеЗаполнено(НастройкиДляПоиска.НаименованияПолей) Тогда
			ПоляДляПоиска.НаименованияПолей	= "#" + СокрЛП(НастройкиДляПоиска.НаименованияПолей);
			ЗаполнитьПоля					= Ложь;
			ТребуетсяЗапись					= Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(НастройкиДляПоиска.НаименованияПараметровИОтборов) Тогда
			ПоляДляПоиска.НаименованияПараметровИОтборов	= "#" + СокрЛП(НастройкиДляПоиска.НаименованияПараметровИОтборов);
			ЗаполнитьПараметрыИОтборы						= Ложь;
			ТребуетсяЗапись									= Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(НастройкиДляПоиска.КлючевыеСлова) Тогда
			ПоляДляПоиска.КлючевыеСлова = "#" + СокрЛП(НастройкиДляПоиска.КлючевыеСлова);
			ТребуетсяЗапись = Истина;
		КонецЕсли;
		Если Не ЗаполнитьПоля И Не ЗаполнитьПараметрыИОтборы Тогда
			ВО_УстановитьПоляДляПоиска(ВариантОбъект, ПоляДляПоиска);

			Возврат ТребуетсяЗапись; // Заполнение выполнено - объект надо записать.
		КонецЕсли;
	КонецЕсли;

	// В некоторых сценариях объект может быть уже закэширован в дополнительных свойствах.
	ОтчетОбъект = ?(СведенияОбОтчете <> Неопределено, СведенияОбОтчете.ОтчетОбъект, Неопределено);

	// Когда объект отчета не закэширован - подключение отчета штатным способом.
	Если ОтчетОбъект = Неопределено Тогда
		Подключение = ВО_ПодключитьОтчетОбъект(ВариантОбъект.Отчет, Ложь);
		Если Подключение.Успех Тогда
			ОтчетОбъект = Подключение.Объект;
		КонецЕсли;
		Если СведенияОбОтчете <> Неопределено Тогда
			СведенияОбОтчете.ОтчетОбъект = ОтчетОбъект;
		КонецЕсли;
		Если ОтчетОбъект = Неопределено Тогда
			ВО_ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Ошибка, Подключение.ТекстОшибки, ВариантОбъект.Ссылка);

			Возврат Ложь; // Возникла проблема при подключении отчета.
		КонецЕсли;
	КонецЕсли;

	// Извлечение текстов макетов возможно только после получения объекта отчета.
	Если НастройкиДляПоиска <> Неопределено И ЗначениеЗаполнено(НастройкиДляПоиска.ИменаМакетов) Тогда
		ПоляДляПоиска.НаименованияПолей = "#" + ВО_ИзвлечьТекстМакета(ОтчетОбъект, НастройкиДляПоиска.ИменаМакетов);
		Если Не ЗаполнитьПараметрыИОтборы Тогда
			ВО_УстановитьПоляДляПоиска(ВариантОбъект, ПоляДляПоиска);

			Возврат Истина; // Заполнение выполнено - объект надо записать.
		КонецЕсли;
	КонецЕсли;

	// Схема компоновки, на основании которой будет выполняться отчет.
	СхемаКД = ОтчетОбъект.СхемаКомпоновкиДанных;

	// Если отчет не на СКД, следовательно представления не заполняются или заполняются прикладными механизмами.
	Если СхемаКД = Неопределено Тогда
		ТекстОшибки = СтрШаблон("Для варианта ""%1"" отчета ""%2"" не заполнены настройки поиска:
			|Наименования полей, параметров и отборов.",
			ВариантОбъект.КлючВарианта, ВариантОбъект.Отчет);

		ВО_ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Информация, ТекстОшибки, ВариантОбъект.Ссылка);

		Возврат Ложь;
	КонецЕсли;

	НастройкиКД = ?(СведенияОбОтчете <> Неопределено, СведенияОбОтчете.НастройкиКД, Неопределено);
	Если ТипЗнч(НастройкиКД) <> Тип("НастройкиКомпоновкиДанных") Тогда
		ВариантНастроекКД = СхемаКД.ВариантыНастроек.Найти(ВариантОбъект.КлючВарианта);
		Если ВариантНастроекКД <> Неопределено Тогда
			НастройкиКД = ВариантНастроекКД.Настройки;
		КонецЕсли;
	КонецЕсли;

	// Чтение настроек из данных варианта.
	Если ТипЗнч(НастройкиКД) <> Тип("НастройкиКомпоновкиДанных") И ТипЗнч(ВариантОбъект) = Тип("СправочникОбъект.ВариантыОтчетов") Тогда
		Попытка
			НастройкиКД = ВариантОбъект.Настройки.Получить();
		Исключение
			ШаблонСообщения = "Не удалось прочитать настройки пользовательского варианта отчета:
				|%1";
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВО_ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстСообщения, ВариантОбъект.Ссылка);

			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;

	// Последняя проверка.
	Если ТипЗнч(НастройкиКД) <> Тип("НастройкиКомпоновкиДанных") Тогда
		Если ТипЗнч(ВариантОбъект) = Тип("СправочникОбъект.ПредопределенныеВариантыОтчетов") Или ТипЗнч(ВариантОбъект) = Тип("СправочникОбъект.ПредопределенныеВариантыОтчетовРасширений") Тогда
			ВО_ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Ошибка, СтрШаблон("Не удалось прочитать настройки предопределенного варианта отчета ""%1"".", ВариантОбъект.КлючЗамеров), ВариантОбъект.Ссылка);
		КонецЕсли;

		Возврат Ложь;
	КонецЕсли;

	ХешНовыхНастроек = БазоваяПодсистемаСервер.ОН_КонтрольнаяСуммаСтрокой(БазоваяПодсистемаСервер.ОН_ЗначениеВСтрокуXML(НастройкиКД));
	Если ПроверятьХеш И ВариантОбъект.ХешНастроек = ХешНовыхНастроек Тогда
		Возврат Ложь; // Настройки не изменились.
	КонецЕсли;
	ВариантОбъект.ХешНастроек = ХешНовыхНастроек;

	ОтчетОбъект.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКД));
	ВариантыОтчетовКлиентСервер.О_ЗагрузитьНастройки(ОтчетОбъект.КомпоновщикНастроек, НастройкиКД);

	Если ЗаполнитьПоля Тогда
		// Преобразование всех настроек автоматической группировки в наборы полей.
		//   См. "АвтоВыбранноеПолеКомпоновкиДанных", "АвтоПолеГруппировкиКомпоновкиДанных",
		//   "АвтоЭлементПорядкаКомпоновкиДанных" в синтакс-помощнике.
		ОтчетОбъект.КомпоновщикНастроек.РазвернутьАвтоПоля();
		ПоляДляПоиска.НаименованияПолей = ВО_СформироватьПредставленияПолей(ОтчетОбъект.КомпоновщикНастроек);
	КонецЕсли;

	Если ЗаполнитьПараметрыИОтборы Тогда
		ПоляДляПоиска.НаименованияПараметровИОтборов = ВО_СформироватьПредставленияПараметровИОтборов(ОтчетОбъект.КомпоновщикНастроек);
	КонецЕсли;

	ВО_УстановитьПоляДляПоиска(ВариантОбъект, ПоляДляПоиска);

	Возврат Истина;
КонецФункции

Процедура ВО_УстановитьПоляДляПоиска(ВариантОтчета, ПоляДляПоиска)
	ЭтоПользовательскийВариантОтчета = (ТипЗнч(ВариантОтчета) = Тип("СправочникОбъект.ВариантыОтчетов"));
	Если ТекущийЯзык() = Метаданные.ОсновнойЯзык Или ЭтоПользовательскийВариантОтчета Тогда
		ЗаполнитьЗначенияСвойств(ВариантОтчета, ПоляДляПоиска);

		Возврат;
	КонецЕсли;

	ПредставленияДляЯзыка = ВариантОтчета.Представления.Найти(ТекущийЯзык().КодЯзыка, "КодЯзыка");
	Если ПредставленияДляЯзыка = Неопределено Тогда
		ПредставленияДляЯзыка = ВариантОтчета.Представления.Добавить();
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(ПредставленияДляЯзыка, ПоляДляПоиска);
	ПредставленияДляЯзыка.КодЯзыка = ТекущийЯзык().КодЯзыка;
КонецПроцедуры

Функция ВО_ИзменилисьНастройкиПоиска(ВариантИзБазы, СтарыеСведения)
	Возврат ВариантИзБазы.ХешНастроек <> СтарыеСведения.ХешНастроек
		Или ВариантИзБазы.НаименованияПолей <> СтарыеСведения.НаименованияПолей
		Или ВариантИзБазы.НаименованияПараметровИОтборов <> СтарыеСведения.НаименованияПараметровИОтборов
		Или ВариантИзБазы.КлючевыеСлова <> СтарыеСведения.КлючевыеСлова;
КонецФункции

Процедура ВО_ЗаписатьПредопределенный(ВариантОбъект)
	ВариантОбъект.ДополнительныеСвойства.Вставить("ЗаполнениеПредопределенных");
	ОбновлениеВерсииИБСервер.ОИБ_ЗаписатьОбъект(ВариантОбъект);
КонецПроцедуры

Процедура ВО_ОбновитьРазделенныйПредопределенный(Результат, ИзменяемыеРеквизиты, СтрокаТаблицы)
	Если СтрокаТаблицы.Обработана Тогда
		Возврат;
	КонецЕсли;

	СтрокаТаблицы.Обработана = Истина;

	Если СтрокаТаблицы.УстановитьПометкуУдаления Тогда
		Если СтрокаТаблицы.РеквизитРодитель = Результат.ПустаяСсылка И СтрокаТаблицы.РеквизитПометкаУдаления = Истина Тогда
			Возврат; // Уже помечен.
		КонецЕсли;

		НачатьТранзакцию();
		Попытка
			Блокировка			= Новый БлокировкаДанных;
			ЭлементБлокировки	= Блокировка.Добавить("Справочник.ВариантыОтчетов");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаТаблицы.РеквизитСсылка);
			Блокировка.Заблокировать();

			ВариантОбъект = СтрокаТаблицы.РеквизитСсылка.ПолучитьОбъект();
			ВариантОбъект.Заблокировать();

			ВариантОбъект.Родитель			= Результат.ПустаяСсылка;
			ВариантОбъект.ПометкаУдаления	= Истина;
			ОбновлениеВерсииИБСервер.ОИБ_ЗаписатьОбъект(ВариантОбъект);

			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();

			ВызватьИсключение;
		КонецПопытки;

		Результат.ЕстьИзменения = Истина;

		Возврат;
	КонецЕсли;

	Если СтрокаТаблицы.ГруппироватьПоОтчету И Не ЗначениеЗаполнено(СтрокаТаблицы.ПредопределенныйВариантРодитель) Тогда
		СтрокаТаблицы.Родитель = Результат.ПустаяСсылка;
	КонецЕсли;
	Результат.ОбработанныеПредопределенные[СтрокаТаблицы.ПредопределенныйВариант] = Истина;
	ЗаполнитьЗначенияСвойств(ИзменяемыеРеквизиты, СтрокаТаблицы);
	ИзменяемыеРеквизиты.ПометкаУдаления = Ложь;

	Если Не СтрокаТаблицы.СоздатьНовый И ВО_СовпадаютЗначенияСвойств(ИзменяемыеРеквизиты, СтрокаТаблицы, "Реквизит") Тогда
		Возврат; // Изменений нет.
	КонецЕсли;

	НачатьТранзакцию();
	Попытка
		Если СтрокаТаблицы.СоздатьНовый Тогда // Добавить.
			ВариантОбъект							= Справочники.ВариантыОтчетов.СоздатьЭлемент();
			ВариантОбъект.ПредопределенныйВариант	= СтрокаТаблицы.ПредопределенныйВариант;
			ВариантОбъект.Пользовательский			= Ложь;
		Иначе // Обновить (если есть изменения).
			Блокировка			= Новый БлокировкаДанных;
			ЭлементБлокировки	= Блокировка.Добавить("Справочник.ВариантыОтчетов");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаТаблицы.РеквизитСсылка);
			Блокировка.Заблокировать();

			// Перенос пользовательских настроек.
			ВО_ЗаменитьКлючиПользовательскихНастроек(ИзменяемыеРеквизиты, СтрокаТаблицы);

			ВариантОбъект = СтрокаТаблицы.РеквизитСсылка.ПолучитьОбъект();
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(ВариантОбъект, ИзменяемыеРеквизиты);

		ТипОтчетаСтрокой		= ВариантыОтчетовКлиентСервер.ВО_ТипОтчетаСтрокой(Неопределено, ВариантОбъект.Отчет);
		ВариантОбъект.ТипОтчета	= Перечисления.ТипыОтчетов[ТипОтчетаСтрокой];
		ОбновлениеВерсииИБСервер.ОИБ_ЗаписатьОбъект(ВариантОбъект);

		РегистрыСведений.НастройкиВариантовОтчетов.ЗаписатьНастройкиДоступностиВариантаОтчета(ВариантОбъект.Ссылка, СтрокаТаблицы.СоздатьНовый);

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;

	Результат.ЕстьИзменения = Истина;
	Если СтрокаТаблицы.СоздатьНовый Тогда
		СтрокаТаблицы.РеквизитСсылка = ВариантОбъект.Ссылка;
	КонецЕсли;
КонецПроцедуры

Функция ВО_ИзмененияКлючей()
	РеквизитыВариантов = Метаданные.Справочники.ВариантыОтчетов.Реквизиты;

	Изменения	= Новый ТаблицаЗначений;
	Изменения.Колонки.Добавить("Отчет",                 Новый ОписаниеТипов("ОбъектМетаданных"));
	Изменения.Колонки.Добавить("СтароеИмяВарианта",     РеквизитыВариантов.КлючВарианта.Тип);
	Изменения.Колонки.Добавить("АктуальноеИмяВарианта", РеквизитыВариантов.КлючВарианта.Тип);

	// Переопределяемая часть.
	ИнтеграцияПодсистемСервер.ПриИзмененииКлючейВариантовОтчетов(Изменения);

	Изменения.Колонки.Найти("Отчет").Имя = "ОтчетМетаданные";
	Изменения.Колонки.Добавить("Отчет",				РеквизитыВариантов.Отчет.Тип);
	Изменения.Индексы.Добавить("ОтчетМетаданные,	СтароеИмяВарианта");

	// Проверить корректность замен.
	Для Каждого Изменение Из Изменения Цикл
		Изменение.Отчет = Справочники.ИдентификаторыОбъектовМетаданных.ИдентификаторОбъектаМетаданных(Изменение.ОтчетМетаданные, Истина);
		Найденные = Изменения.НайтиСтроки(Новый Структура("ОтчетМетаданные, СтароеИмяВарианта", Изменение.ОтчетМетаданные, Изменение.АктуальноеИмяВарианта));
		Если Найденные.Количество() > 0 Тогда
			Конфликт = Найденные[0];
			ВызватьИсключение СтрШаблон("Ошибка регистрации изменений имени варианта отчета ""%1"":
				|Актуальное имя варианта ""%2"" (старое имя ""%3"")
				|также числится как старое имя ""%4"" (актуальное имя ""%5"").",
				Строка(Изменение.Отчет),
				Изменение.АктуальноеИмяВарианта,
				Изменение.СтароеИмяВарианта,
				Конфликт.СтароеИмяВарианта,
				Конфликт.АктуальноеИмяВарианта);
		КонецЕсли;
		Найденные = Изменения.НайтиСтроки(Новый Структура("ОтчетМетаданные, СтароеИмяВарианта", Изменение.ОтчетМетаданные, Изменение.СтароеИмяВарианта));
		Если Найденные.Количество() > 2 Тогда
			Конфликт = Найденные[1];
			ВызватьИсключение СтрШаблон("Ошибка регистрации изменений имени варианта отчета ""%1"":
				|Старое имя варианта ""%2"" (актуальное имя ""%3"")
				|также числится как старое имя
				|варианта отчета ""%4"" (актуальное имя ""%5"").",
				Строка(Изменение.Отчет),
				Изменение.СтароеИмяВарианта,
				Изменение.АктуальноеИмяВарианта,
				Строка(Конфликт.ОтчетМетаданные.Представление()),
				Конфликт.АктуальноеИмяВарианта);
		КонецЕсли;
	КонецЦикла;

	Возврат Изменения;
КонецФункции

Процедура ВО_ЗаписатьВЖурнал(Уровень, Сообщение, ВариантОтчета = Неопределено) Экспорт
	Если ТипЗнч(ВариантОтчета) = Тип("ОбъектМетаданных") Тогда
		ОбъектМетаданных	= ВариантОтчета;
		Данные				= ОбъектМетаданных.Представление();
	Иначе
		ОбъектМетаданных	= Метаданные.Справочники.ВариантыОтчетов;
		Данные				= ВариантОтчета;
	КонецЕсли;
	ЗаписьЖурналаРегистрации("Варианты отчетов", Уровень, ОбъектМетаданных, Данные, Сообщение);
КонецПроцедуры

Процедура ВО_ЗаписатьВЖурналЗавершениеПроцедуры(ИмяПроцедуры, ИзмененоОбъектов = Неопределено)
	Текст = СтрШаблон("Завершение процедуры ""%1"".", ИмяПроцедуры);
	Если ИзмененоОбъектов <> Неопределено Тогда
		Текст = Текст + " "  + СтрШаблон("Изменено %1 объектов.", ИзмененоОбъектов);
	КонецЕсли;
	БазоваяПодсистемаСервер.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Варианты отчетов", УровеньЖурналаРегистрации.Информация,,, Текст);
КонецПроцедуры

Функция ВО_ОбновитьПредопределенныйВариантОтчета(Режим, ОписаниеВарианта, Результат)
	НачатьТранзакцию();
	Попытка
		ВариантИзБазы = ОписаниеВарианта.ВариантИзБазы;
		// Зарезервировано для новых подсистем
		Если ОписаниеВарианта.НайденВБазеДанных Тогда
			Если ВариантИзБазы.ПометкаУдаления = Истина Или ВО_ИзменилисьКлючевыеНастройкиПредопределенного(ОписаниеВарианта, ВариантИзБазы) Тогда
				Результат.ЕстьВажныеИзменения = Истина;
			ИначеЕсли Не ВО_ИзменилисьВторостепенныеНастройкиПредопределенного(ОписаниеВарианта, ВариантИзБазы) Тогда
				ЗафиксироватьТранзакцию();

				Возврат ВариантИзБазы.Ссылка;
			КонецЕсли;

			ВариантИзБазы = ОписаниеВарианта.ВариантИзБазы;

			Если Режим = "ОбщиеДанныеКонфигурации" Тогда
				ИмяТаблицы = "Справочник.ПредопределенныеВариантыОтчетов";
			ИначеЕсли Режим = "ОбщиеДанныеРасширений" Тогда
				ИмяТаблицы = "Справочник.ПредопределенныеВариантыОтчетовРасширений";
			КонецЕсли;
			Блокировка			= Новый БлокировкаДанных;
			ЭлементБлокировки	= Блокировка.Добавить(ИмяТаблицы);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВариантИзБазы.Ссылка);
			Блокировка.Заблокировать();

			ВариантОбъект = ВариантИзБазы.Ссылка.ПолучитьОбъект(); // СправочникОбъект.ПредопределенныеВариантыОтчетов, СправочникОбъект.ПредопределенныеВариантыОтчетовРасширений
			ВариантОбъект.Размещение.Очистить();
			Если ВариантОбъект.ПометкаУдаления Тогда
				ВариантОбъект.ПометкаУдаления = Ложь;
			КонецЕсли;
		Иначе
			Результат.ЕстьВажныеИзменения = Истина; // Регистрация нового (потребуется обновление разделенных данных).
			Если Режим = "ОбщиеДанныеКонфигурации" Тогда
				ВариантОбъект = Справочники.ПредопределенныеВариантыОтчетов.СоздатьЭлемент();
			ИначеЕсли Режим = "ОбщиеДанныеРасширений" Тогда
				ВариантОбъект = Справочники.ПредопределенныеВариантыОтчетовРасширений.СоздатьЭлемент();
			КонецЕсли;
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(ВариантОбъект, ОписаниеВарианта,  "Отчет, КлючВарианта, Включен, ВидимостьПоУмолчанию, ГруппироватьПоОтчету");
		ПоляДляПоиска				= ВО_ПоляДляПоиска(ВариантОбъект);
		ПоляДляПоиска.Наименование	= ОписаниеВарианта.Наименование;
		ПоляДляПоиска.Описание		= ОписаниеВарианта.Описание;
		ВО_УстановитьПоляДляПоиска(ВариантОбъект, ПоляДляПоиска);

		ВариантОбъект.Родитель = ОписаниеВарианта.ВариантРодитель;

		РазмещениеВарианта = Новый Массив;
		Для Каждого Раздел Из ОписаниеВарианта.Размещение Цикл
			ПолноеИмя = ?(ТипЗнч(Раздел.Ключ) = Тип("Строка"), Раздел.Ключ, Раздел.Ключ.ПолноеИмя());
			РазмещениеВарианта.Добавить(ПолноеИмя);
		КонецЦикла;
		ИдентификаторыПодсистем = Справочники.ИдентификаторыОбъектовМетаданных.ИдентификаторыОбъектовМетаданных(РазмещениеВарианта, Истина);
		Для Каждого РазмещениеОтчета Из ОписаниеВарианта.Размещение Цикл
			СтрокаРазмещения				= ВариантОбъект.Размещение.Добавить();
			ПолноеИмя						= ?(ТипЗнч(РазмещениеОтчета.Ключ) = Тип("Строка"), РазмещениеОтчета.Ключ, РазмещениеОтчета.Ключ.ПолноеИмя());
			СтрокаРазмещения.Подсистема		= ИдентификаторыПодсистем[ПолноеИмя];
			СтрокаРазмещения.Важный			= (НРег(РазмещениеОтчета.Значение) = НРег("Важный"));
			СтрокаРазмещения.СмТакже		= (НРег(РазмещениеОтчета.Значение) = НРег("СмТакже"));
		КонецЦикла;

		Если Результат.ОбновлятьЗамеры Тогда
			ВариантОбъект.КлючЗамеров = ОписаниеВарианта.КлючЗамеров;
		КонецЕсли;

		Результат.ЕстьИзменения = Истина;
		ВО_ЗаписатьПредопределенный(ВариантОбъект);

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;

	Возврат ВариантОбъект.Ссылка;
КонецФункции

Функция ВО_ПараметрыЗаполненияПредставленийВариантовОтчетов(Языки = Неопределено, ИндексТекущегоЯзыка = 0)
	Если Языки = Неопределено Тогда
		Языки = ВО_ЯзыкиПредставленийВариантовОтчетовДляЗаполнения();
	КонецЕсли;

	Если ИндексТекущегоЯзыка > Языки.ВГраница() Тогда
		Возврат Неопределено;
	КонецЕсли;

	КодЯзыка				= Языки[ИндексТекущегоЯзыка];
	СлужебныйПользователь	= ВО_СлужебныйПользователь(КодЯзыка);

	Если СлужебныйПользователь = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	МетаданныеЗадания	= Метаданные.РегламентныеЗадания.ОбновлениеПредопределенныхВариантовОтчетов;
	КлючЗадания			= "ЗаполнениеПредставленийВариантовОтчетовДляЯзыка" + ВРег(КодЯзыка);
	НаименованиеЗадания	= СтрШаблон("Заполнение представлений предопределенных вариантов отчетов для языка %1", КодЯзыка);

	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(Языки);
	ПараметрыЗадания.Добавить(ИндексТекущегоЯзыка);

	РасписаниеЗадания				= Новый РасписаниеРегламентногоЗадания;
	РасписаниеЗадания.ВремяНачала	= ТекущаяДатаСеанса() + 60;

	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Метаданные",		МетаданныеЗадания);
	ПараметрыЗаполнения.Вставить("ИмяПользователя",	СлужебныйПользователь);
	ПараметрыЗаполнения.Вставить("Ключ",			КлючЗадания);
	ПараметрыЗаполнения.Вставить("Наименование",	НаименованиеЗадания);
	ПараметрыЗаполнения.Вставить("Параметры",		ПараметрыЗадания);
	ПараметрыЗаполнения.Вставить("Расписание",		РасписаниеЗадания);
	ПараметрыЗаполнения.Вставить("Использование",	Истина);

	Возврат ПараметрыЗаполнения;
КонецФункции

Функция ВО_ТаблицаЗамеров()
	Результат = Новый ТаблицаЗначений;

	Результат.Колонки.Добавить("СтароеИмя",					Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	Результат.Колонки.Добавить("АктуальноеИмя",				Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	Результат.Колонки.Добавить("АктуальноеНаименование",	Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));

	Возврат Результат;
КонецФункции

Процедура ВО_ЗаполнитьОчищенныеНаименования(СвойстваВариантовОтчетов, КэшСвойствВариантовОтчетов)
	НайденныеСвойства = СвойстваВариантовОтчетов.НайтиСтроки(Новый Структура("Наименование", "")); // см. КоллекцияПредопределенныхВариантовОтчетов
	Если НайденныеСвойства.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	КэшСвойствВариантовОтчетов.Свернуть("Отчет, Наименование");
	КэшСвойствВариантовОтчетов.Индексы.Добавить("Отчет");

	Для Каждого Свойства Из НайденныеСвойства Цикл
		КэшированныеСвойства = КэшСвойствВариантовОтчетов.Найти(Свойства.Отчет, "Отчет");

		Если КэшированныеСвойства <> Неопределено И ЗначениеЗаполнено(КэшированныеСвойства.Наименование) Тогда
			Свойства.Наименование = КэшированныеСвойства.Наименование;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ВО_КоллекцияОсновныхВариантовОтчетов()
	ОсновныеВариантыОтчетов = Новый ТаблицаЗначений;

	ОсновныеВариантыОтчетов.Колонки.Добавить("Отчет",	Метаданные.Справочники.ВариантыОтчетов.Реквизиты.Отчет.Тип);
	ОсновныеВариантыОтчетов.Колонки.Добавить("Вариант",	Новый ОписаниеТипов("СправочникСсылка.ВариантыОтчетов"));

	Возврат ОсновныеВариантыОтчетов;
КонецФункции

Функция ВО_КоллекцияПредопределенныхВариантовОтчетов() Экспорт
	РеквизитыСправочника		= Метаданные.Справочники.ВариантыОтчетов.Реквизиты;

	ОписаниеПризнака			= Новый ОписаниеТипов("Булево");
	ОписаниеМассива				= Новый ОписаниеТипов("Массив");
	ОписаниеСоответствия		= Новый ОписаниеТипов("Соответствие");
	ОписаниеСтруктуры			= Новый ОписаниеТипов("Структура");
	ОписаниеОбъектаМетаданных	= Новый ОписаниеТипов("ОбъектМетаданных");
	ОписаниеВариантаОтчета		= Новый ОписаниеТипов("СправочникСсылка.ПредопределенныеВариантыОтчетов, СправочникСсылка.ПредопределенныеВариантыОтчетовРасширений");

	Результат = Новый ТаблицаЗначений;

	Результат.Колонки.Добавить("Отчет",						РеквизитыСправочника.Отчет.Тип);
	Результат.Колонки.Добавить("Метаданные",				ОписаниеОбъектаМетаданных);
	Результат.Колонки.Добавить("ИспользуетСКД",				ОписаниеПризнака);
	Результат.Колонки.Добавить("КлючВарианта",				РеквизитыСправочника.КлючВарианта.Тип);
	Результат.Колонки.Добавить("ОписаниеПолучено",			ОписаниеПризнака);
	Результат.Колонки.Добавить("Включен",					ОписаниеПризнака);
	Результат.Колонки.Добавить("ВидимостьПоУмолчанию",		ОписаниеПризнака);
	Результат.Колонки.Добавить("Наименование",				Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000)));
	Результат.Колонки.Добавить("Описание",					Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000)));
	Результат.Колонки.Добавить("Размещение",				ОписаниеСоответствия);
	Результат.Колонки.Добавить("НастройкиДляПоиска",		ОписаниеСтруктуры);
	Результат.Колонки.Добавить("СистемнаяИнформация",		ОписаниеСтруктуры);
	Результат.Колонки.Добавить("Тип",						Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000)));
	Результат.Колонки.Добавить("ЭтоВариант",				ОписаниеПризнака);
	Результат.Колонки.Добавить("ФункциональныеОпции",		ОписаниеМассива);
	Результат.Колонки.Добавить("ГруппироватьПоОтчету",		ОписаниеПризнака);
	Результат.Колонки.Добавить("КлючЗамеров",				Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000)));
	Результат.Колонки.Добавить("ОсновнойВариант",			РеквизитыСправочника.КлючВарианта.Тип);
	Результат.Колонки.Добавить("ФорматНастроекСКД",			ОписаниеПризнака);
	Результат.Колонки.Добавить("ОпределитьНастройкиФормы",	ОписаниеПризнака);

	// Вспомогательные сведения для процедуры ОбновитьНастройкиПредопределенных.
	Результат.Колонки.Добавить("НайденВБазеДанных",			ОписаниеПризнака);
	Результат.Колонки.Добавить("ВариантИзБазы"); // строка выборки из таблицы
	Результат.Колонки.Добавить("ВариантРодитель",			ОписаниеВариантаОтчета);

	Результат.Индексы.Добавить("Отчет");
	Результат.Индексы.Добавить("Отчет, ЭтоВариант");
	Результат.Индексы.Добавить("Отчет, КлючВарианта");
	Результат.Индексы.Добавить("Отчет, КлючВарианта, ЭтоВариант");
	Результат.Индексы.Добавить("КлючВарианта");
	Результат.Индексы.Добавить("Метаданные, КлючВарианта");
	Результат.Индексы.Добавить("Метаданные, ЭтоВариант");

	Возврат Результат;
КонецФункции

Функция ВО_ГлобальныеНастройки() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ВыводитьОтчетыВместоВариантов",					Ложь);
	Результат.Вставить("ВыводитьОписания",								Истина);
	Результат.Вставить("РазрешеноИзменятьВарианты",						Истина);
	Результат.Вставить("ВыводитьОбщиеНастройкиКолонтитулов",			Истина);
	Результат.Вставить("ВыводитьИндивидуальныеНастройкиКолонтитулов",	Истина);

	Результат.Вставить("Поиск", Новый Структура);
	Результат.Поиск.Вставить("ПодсказкаВвода", "Наименование, поле или автор отчета");

	Результат.Вставить("ДругиеОтчеты", Новый Структура);
	Результат.ДругиеОтчеты.Вставить("ЗакрыватьПослеВыбора",	Истина);
	Результат.ДругиеОтчеты.Вставить("ПоказыватьФлажок",		Ложь);

	ИнтеграцияПодсистемСервер.ПриОпределенииНастроекВариантовОтчетов(Результат);

	Возврат Результат;
КонецФункции

Функция ВО_РазмещениеОтчетовВПодсистемах(Результат = Неопределено, РодительскаяПодсистема = Неопределено)
	Если Результат = Неопределено Тогда
		ПолноеИмяОписаниеТипов = Метаданные.Справочники.ИдентификаторыОбъектовМетаданных.Реквизиты.ПолноеИмя.Тип;

		Результат = Новый ТаблицаЗначений;
		Результат.Колонки.Добавить("ОтчетМетаданные",      Новый ОписаниеТипов("ОбъектМетаданных"));
		Результат.Колонки.Добавить("ОтчетПолноеИмя",       ПолноеИмяОписаниеТипов);
		Результат.Колонки.Добавить("ПодсистемаМетаданные", Новый ОписаниеТипов("ОбъектМетаданных"));
		Результат.Колонки.Добавить("ПодсистемаПолноеИмя",  ПолноеИмяОписаниеТипов);

		Результат.Индексы.Добавить("ОтчетПолноеИмя");
		Результат.Индексы.Добавить("ОтчетМетаданные");

		РодительскаяПодсистема = Метаданные;
	КонецЕсли;

	// Перебор вложенных подсистем родителя.
	Для Каждого ДочерняяПодсистема Из РодительскаяПодсистема.Подсистемы Цикл
		Если ДочерняяПодсистема.ВключатьВКомандныйИнтерфейс Тогда
			Для Каждого ОтчетМетаданные Из ДочерняяПодсистема.Состав Цикл
				Если Не Метаданные.Отчеты.Содержит(ОтчетМетаданные) Тогда
					Продолжить;
				КонецЕсли;

				СтрокаТаблицы						= Результат.Добавить();
				СтрокаТаблицы.ОтчетМетаданные		= ОтчетМетаданные;
				СтрокаТаблицы.ОтчетПолноеИмя		= ОтчетМетаданные.ПолноеИмя();
				СтрокаТаблицы.ПодсистемаМетаданные	= ДочерняяПодсистема;
				СтрокаТаблицы.ПодсистемаПолноеИмя	= ДочерняяПодсистема.ПолноеИмя();
			КонецЦикла;
		КонецЕсли;

		ВО_РазмещениеОтчетовВПодсистемах(Результат, ДочерняяПодсистема);
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция ВО_ТипОтчетаСтрокой(ОтчетСсылка) Экспорт
	ТипСсылки = ТипЗнч(ОтчетСсылка);

	Если ТипСсылки = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
		Возврат "Внутренний";
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений") Тогда
		Возврат "Расширение";
	ИначеЕсли ТипСсылки = Тип("Строка") Тогда
		Возврат "Внешний";
	ИначеЕсли ТипСсылки = ВО_ТипСсылкиДополнительногоОтчета() Тогда
		Возврат "Дополнительный";
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

Функция ВО_ТипСсылкиДополнительногоОтчета()
	// Зарезервировано для новых подсистем

	Возврат Неопределено;
КонецФункции

Функция ВО_ОписаниеОтчетаПоУмолчанию(ОписанияОтчетов, МетаданныеОтчета, СсылкаОтчета, ТипОтчета = Неопределено, ГруппироватьПоОтчетам = Неопределено)
	Если ТипОтчета = Неопределено Тогда
		ТипОтчета = ВО_ТипОтчетаСтрокой(СсылкаОтчета);
	КонецЕсли;

	Если ГруппироватьПоОтчетам = Неопределено Тогда
		ГруппироватьПоОтчетам = ВО_ГлобальныеНастройки().ВыводитьОтчетыВместоВариантов;
	КонецЕсли;

	ИспользуетСКД		= (МетаданныеОтчета.ОсновнаяСхемаКомпоновкиДанных <> Неопределено);
	ФорматНастроекСКД	= (ИспользуетСКД И МетаданныеОтчета.Реквизиты.Количество() = 0);
	НастройкиДляПоиска	= Новый Структура("НаименованияПолей, НаименованияПараметровИОтборов, КлючевыеСлова, ИменаМакетов");

	ОписаниеОтчета							= ОписанияОтчетов.Добавить();
	ОписаниеОтчета.Отчет					= СсылкаОтчета;
	ОписаниеОтчета.Метаданные				= МетаданныеОтчета;
	ОписаниеОтчета.Включен					= Истина;
	ОписаниеОтчета.ВидимостьПоУмолчанию		= Истина;
	ОписаниеОтчета.Описание					= МетаданныеОтчета.Пояснение;
	ОписаниеОтчета.Наименование				= МетаданныеОтчета.Представление();
	ОписаниеОтчета.ОписаниеПолучено			= Истина;
	ОписаниеОтчета.Тип						= ТипОтчета;
	ОписаниеОтчета.ГруппироватьПоОтчету		= ГруппироватьПоОтчетам;
	ОписаниеОтчета.ИспользуетСКД			= ИспользуетСКД;
	ОписаниеОтчета.ФорматНастроекСКД		= ФорматНастроекСКД;
	ОписаниеОтчета.НастройкиДляПоиска		= НастройкиДляПоиска;

	Возврат ОписаниеОтчета;
КонецФункции

Процедура ВО_НастроитьОтчетВМодулеМенеджера(Настройки, ОтчетМетаданные) Экспорт
	НастройкиОтчета	= ВО_ОписаниеОтчета(Настройки, ОтчетМетаданные);

	Попытка
		Отчеты[ОтчетМетаданные.Имя].НастроитьВариантыОтчета(Настройки, НастройкиОтчета);
	Исключение
		ТекстОшибки = СтрШаблон("Недопустимое значение параметра КлючВарианта в процедуре ВариантыОтчетовСервер.ВО_НастроитьОтчетВМодулеМенеджера.
			|Не удалось настроить варианты отчета из модуля менеджера по причине:
			|%1",
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВО_ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстОшибки, ОтчетМетаданные);
	КонецПопытки;
КонецПроцедуры

Функция ВО_ОписаниеОтчета(Настройки, Отчет) Экспорт
	Если ТипЗнч(Отчет) = Тип("ОбъектМетаданных") Тогда
		Результат = Настройки.НайтиСтроки(Новый Структура("Метаданные, ЭтоВариант", Отчет, Ложь));
	Иначе
		Результат = Настройки.НайтиСтроки(Новый Структура("Отчет, ЭтоВариант", Отчет, Ложь));
	КонецЕсли;

	Если Результат.Количество() = 0 Тогда
		Результат = ВО_НайденныеОписанияОтчета(Отчет);
	КонецЕсли;

	Если Результат.Количество() <> 1 Тогда
		ВызватьИсключение СтрШаблон("Недопустимое значение параметра Отчет в функции ВариантыОтчетов.ОписаниеОтчета.
			|Отчет ""%1"" не подключен к подсистеме ""%2"". Проверьте свойство ""Хранилище вариантов"" в свойствах отчета.",
			Строка(Отчет), "Варианты отчетов");
	КонецЕсли;

	Возврат Результат[0];
КонецФункции

Функция ВО_ЭтоПредопределенныйВариантОтчета(ВариантОтчета) Экспорт
	ТипВариантаОтчета = ТипЗнч(ВариантОтчета);

	Если ТипВариантаОтчета = Тип("СправочникОбъект.ПредопределенныеВариантыОтчетов") Или ТипВариантаОтчета = Тип("СправочникОбъект.ПредопределенныеВариантыОтчетовРасширений") Или ТипВариантаОтчета = Тип("СправочникСсылка.ПредопределенныеВариантыОтчетов") Или ТипВариантаОтчета = Тип("СправочникСсылка.ПредопределенныеВариантыОтчетовРасширений") Тогда 
		Возврат Истина;
	КонецЕсли;

	СвойстваВариантаОтчета = Новый Структура("Пользовательский, ПредопределенныйВариант");
	ЗаполнитьЗначенияСвойств(СвойстваВариантаОтчета, ВариантОтчета);

	Возврат СвойстваВариантаОтчета.Пользовательский <> Истина И ЗначениеЗаполнено(СвойстваВариантаОтчета.ПредопределенныйВариант);
КонецФункции

Функция ВО_ПодключитьОтчетОбъект(СсылкаОтчета, ПолучатьМетаданные)
	Результат = Новый Структура("Объект, Имя, ПолноеИмя, Метаданные, Ссылка, ТекстОшибки");
	Результат.Вставить("Успех", Ложь);

	Если СсылкаОтчета = Неопределено Тогда
		Результат.ТекстОшибки = СтрШаблон("В методе ""%1"" не указан параметр ""%2"".", "ПодключитьОтчетОбъект", "СсылкаОтчета");

		Возврат Результат;
	Иначе
		Результат.Ссылка = СсылкаОтчета;
	КонецЕсли;

	Если ТипЗнч(Результат.Ссылка) = Тип("Строка") Тогда
		Результат.ТекстОшибки = СтрШаблон("Отчет ""%1"" записан как внешний и не может быть подключен из программы", Результат.Ссылка);

		Возврат Результат;
	КонецЕсли;

	Если ТипЗнч(Результат.Ссылка) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Или ТипЗнч(Результат.Ссылка) = Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений") Тогда
		Результат.Метаданные = Справочники.ИдентификаторыОбъектовМетаданных.ОбъектМетаданныхПоИдентификатору(Результат.Ссылка, Ложь);

		Если ТипЗнч(Результат.Метаданные) <> Тип("ОбъектМетаданных") Тогда
			Результат.ТекстОшибки = СтрШаблон("Отчет ""%1"" не существует в программе", Результат.Имя);

			Возврат Результат;
		КонецЕсли;
		Результат.Имя = Результат.Метаданные.Имя;
		Если Не ПравоДоступа("Использование", Результат.Метаданные) Тогда
			Результат.ТекстОшибки = "Недостаточно прав доступа";

			Возврат Результат;
		КонецЕсли;
		Попытка
			Результат.Объект	= Отчеты[Результат.Имя].Создать();
			Результат.Успех		= Истина;
		Исключение
			ТекстОшибки = СтрШаблон("Не удалось подключить отчет %1:", Результат.Метаданные);
			ТекстОшибки = ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВО_ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстОшибки, Результат.Метаданные);
		КонецПопытки;
	Иначе
		// Зарезервировано для новых подсистем
	КонецЕсли;

	Если Результат.Успех И ПолучатьМетаданные Тогда
		Результат.ПолноеИмя = Результат.Метаданные.ПолноеИмя();
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция ВО_ИзвлечьТекстМакета(ОтчетОбъект, ИменаМакетов)
	Если ТипЗнч(ИменаМакетов) = Тип("Строка") Тогда
		ИменаМакетов = СтрРазделить(ИменаМакетов, ",", Ложь);
	КонецЕсли;
	ТекстыОбластей = Новый Массив;
	Для Каждого ИмяМакета Из ИменаМакетов Цикл
		Макет = ОтчетОбъект.ПолучитьМакет(СокрЛП(ИмяМакета));
		Если ТипЗнч(Макет) = Тип("ТабличныйДокумент") Тогда
			Низ					= Макет.ВысотаТаблицы;
			Право				= Макет.ШиринаТаблицы;
			ПроверенныеЯчейки	= Новый Соответствие;
			Для НомерКолонки = 1 По Право Цикл
				Для НомерСтроки = 1 По Низ Цикл
					Ячейка = Макет.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
					Если ПроверенныеЯчейки[Ячейка.Имя] <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ПроверенныеЯчейки[Ячейка.Имя] = Истина;
					Если ТипЗнч(Ячейка) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
						Продолжить;
					КонецЕсли;
					ТекстОбласти = СокрЛП(Ячейка.Текст);
					Если ПустаяСтрока(ТекстОбласти) Тогда
						Продолжить;
					КонецЕсли;

					ТекстыОбластей.Добавить(ТекстОбласти);
				КонецЦикла;
			КонецЦикла;
		ИначеЕсли ТипЗнч(Макет) = Тип("ТекстовыйДокумент") Тогда
			ТекстыОбластей.Добавить(СокрЛП(Макет.ПолучитьТекст()));
		КонецЕсли;
	КонецЦикла;

	Возврат СтрСоединить(ТекстыОбластей, Символы.ПС);
КонецФункции

Функция ВО_СформироватьПредставленияПолей(КомпоновщикНастроекКД)
	Результат = СтрРазделить(Строка(КомпоновщикНастроекКД.Настройки.Выбор), ",", Ложь);

	Коллекции = Новый Массив;
	Коллекции.Добавить(КомпоновщикНастроекКД.Настройки.Структура);
	Индекс = 0;
	Пока Индекс < Коллекции.Количество() Цикл
		Коллекция	= Коллекции[Индекс];
		Индекс		= Индекс + 1;

		Для Каждого Настройка Из Коллекция Цикл
			Если ТипЗнч(Настройка) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
				Если Не Настройка.Использование Тогда
					Продолжить;
				КонецЕсли;
				Настройка = Настройка.Настройки;
			КонецЕсли;

			БазоваяПодсистемаКлиентСервер.ОН_ДополнитьМассив(Результат, СтрРазделить(Строка(Настройка.Выбор), ",", Ложь));

			Если ТипЗнч(Настройка) = Тип("НастройкиКомпоновкиДанных") Тогда
				Коллекции.Добавить(Настройка.Структура);
			ИначеЕсли ТипЗнч(Настройка) = Тип("ГруппировкаКомпоновкиДанных") Тогда
				Если Не Настройка.Использование Тогда
					Продолжить;
				КонецЕсли;
				Коллекции.Добавить(Настройка.Структура);
			ИначеЕсли ТипЗнч(Настройка) = Тип("ТаблицаКомпоновкиДанных") Тогда
				Если Не Настройка.Использование Тогда
					Продолжить;
				КонецЕсли;
				Коллекции.Добавить(Настройка.Строки);
			ИначеЕсли ТипЗнч(Настройка) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
				Если Не Настройка.Использование Тогда
					Продолжить;
				КонецЕсли;
				Коллекции.Добавить(Настройка.Структура);
			ИначеЕсли ТипЗнч(Настройка) = Тип("ДиаграммаКомпоновкиДанных") Тогда
				Если Не Настройка.Использование Тогда
					Продолжить;
				КонецЕсли;
				Коллекции.Добавить(Настройка.Серии);
				Коллекции.Добавить(Настройка.Точки);
			ИначеЕсли ТипЗнч(Настройка) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
				Если Не Настройка.Использование Тогда
					Продолжить;
				КонецЕсли;
				Коллекции.Добавить(Настройка.Структура);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Результат = БазоваяПодсистемаКлиентСервер.ОН_СвернутьМассив(Результат);

	Возврат СтрСоединить(Результат, Символы.ПС);
КонецФункции

Функция ВО_СформироватьПредставленияПараметровИОтборов(КомпоновщикНастроек)
	Результат = Новый Массив;

	Настройки					= КомпоновщикНастроек.Настройки;
	ПользовательскиеНастройки	= КомпоновщикНастроек.ПользовательскиеНастройки;

	Режимы = РежимОтображенияЭлементаНастройкиКомпоновкиДанных;
	Для Каждого ПользовательскаяНастройка Из ПользовательскиеНастройки.Элементы Цикл
		ТипНастройки = ТипЗнч(ПользовательскаяНастройка);
		Если ТипНастройки = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			ЭтоОтбор = Ложь;
		ИначеЕсли ТипНастройки = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЭтоОтбор = Истина;
		Иначе
			Продолжить;
		КонецЕсли;

		Если ПользовательскаяНастройка.РежимОтображения = Режимы.Недоступный Тогда
			Продолжить;
		КонецЕсли;

		Идентификатор = ПользовательскаяНастройка.ИдентификаторПользовательскойНастройки;

		ОбщаяНастройка = ВариантыОтчетовКлиентСервер.О_ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки, Идентификатор,, ПользовательскиеНастройки);

		Если ОбщаяНастройка = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если ПользовательскаяНастройка.РежимОтображения = Режимы.Авто И ОбщаяНастройка.РежимОтображения <> Режимы.БыстрыйДоступ Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПредставлений = Новый Структура("Представление, ПредставлениеПользовательскойНастройки", "", "");
		ЗаполнитьЗначенияСвойств(СтруктураПредставлений, ОбщаяНастройка);
		Если ЗначениеЗаполнено(СтруктураПредставлений.ПредставлениеПользовательскойНастройки) Тогда
			ЭлементЗаголовок = СтруктураПредставлений.ПредставлениеПользовательскойНастройки;
		ИначеЕсли ЗначениеЗаполнено(СтруктураПредставлений.Представление) Тогда
			ЭлементЗаголовок = СтруктураПредставлений.Представление;
		Иначе
			ДоступнаяНастройка = ВариантыОтчетовКлиентСервер.О_НайтиДоступнуюНастройку(Настройки, ОбщаяНастройка);
			Если ДоступнаяНастройка <> Неопределено И ЗначениеЗаполнено(ДоступнаяНастройка.Заголовок) Тогда
				ЭлементЗаголовок = ДоступнаяНастройка.Заголовок;
			Иначе
				ЭлементЗаголовок = Строка(?(ЭтоОтбор, ОбщаяНастройка.ЛевоеЗначение, ОбщаяНастройка.Параметр));
			КонецЕсли;
		КонецЕсли;

		ЭлементЗаголовок = СокрЛП(ЭлементЗаголовок);
		Если ЭлементЗаголовок <> "" Тогда
			Результат.Добавить(ЭлементЗаголовок);
		КонецЕсли;
	КонецЦикла;

	Результат = БазоваяПодсистемаКлиентСервер.ОН_СвернутьМассив(Результат);

	Возврат СтрСоединить(Результат, Символы.ПС);
КонецФункции

Процедура ВО_ЗаменитьКлючиПользовательскихНастроек(СтарыйВариант, АктуальныйВариант)
	Если СтарыйВариант.КлючВарианта = АктуальныйВариант.КлючВарианта Или Не ЗначениеЗаполнено(СтарыйВариант.КлючВарианта) Или Не ЗначениеЗаполнено(АктуальныйВариант.КлючВарианта) Или ТипЗнч(АктуальныйВариант.Отчет) <> Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
		Возврат;
	КонецЕсли;

	ОтчетПолноеИмя		= АктуальныйВариант.Отчет.ПолноеИмя;
	СтарыйКлючОбъекта	= ОтчетПолноеИмя + "/" + СтарыйВариант.КлючВарианта;
	НовыйКлючОбъекта	= ОтчетПолноеИмя + "/" + АктуальныйВариант.КлючВарианта;

	Отбор				= Новый Структура("КлючОбъекта", СтарыйКлючОбъекта);
	ВыборкаХранилища	= ХранилищеПользовательскихНастроекОтчетов.Выбрать(Отбор);
	ОшибокЧтенияПодряд	= 0;
	Пока Истина Цикл
		// Чтение настроек из хранилища по старому ключу.
		Попытка
			ЭлементВыборкиПолучен	= ВыборкаХранилища.Следующий();
			ОшибокЧтенияПодряд		= 0;
		Исключение
			ЭлементВыборкиПолучен	= Неопределено;
			ОшибокЧтенияПодряд		= ОшибокЧтенияПодряд + 1;
			ВО_ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Ошибка, "В процессе выборки вариантов отчетов из стандартного хранилища возникла ошибка:" + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), СтарыйВариант.Ссылка);
		КонецПопытки;

		Если ЭлементВыборкиПолучен = Ложь Тогда
			Прервать;
		ИначеЕсли ЭлементВыборкиПолучен = Неопределено Тогда
			Если ОшибокЧтенияПодряд > 100 Тогда
				Прервать;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		// Чтение описания настроек.
		ОписаниеНастроек = ХранилищеПользовательскихНастроекОтчетов.ПолучитьОписание(ВыборкаХранилища.КлючОбъекта, ВыборкаХранилища.КлючНастроек, ВыборкаХранилища.Пользователь);

		// Запись настроек в хранилище по новому ключу.
		ХранилищеПользовательскихНастроекОтчетов.Сохранить(НовыйКлючОбъекта, ВыборкаХранилища.КлючНастроек, ВыборкаХранилища.Настройки, ОписаниеНастроек, ВыборкаХранилища.Пользователь);
	КонецЦикла;

	// Очистка старых настроек хранилища.
	ХранилищеПользовательскихНастроекОтчетов.Удалить(СтарыйКлючОбъекта, Неопределено, Неопределено);
КонецПроцедуры

Функция ВО_СовпадаютЗначенияСвойств(Структура, Коллекция, ПрефиксВКоллекции = "")
	Для Каждого КлючИЗначение Из Структура Цикл
		Если Коллекция[ПрефиксВКоллекции + КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;
КонецФункции

Функция ВО_ИзменилисьКлючевыеНастройкиПредопределенного(ОписаниеВарианта, ВариантИзБазы)
	Возврат (ВариантИзБазы.Наименование <> ОписаниеВарианта.Наименование Или ВариантИзБазы.Родитель <> ОписаниеВарианта.ВариантРодитель Или ВариантИзБазы.ВидимостьПоУмолчанию <> ОписаниеВарианта.ВидимостьПоУмолчанию);
КонецФункции

Функция ВО_ИзменилисьВторостепенныеНастройкиПредопределенного(ОписаниеВарианта, ВариантИзБазы)
	// Шапка
	Если ВариантИзБазы.Включен <> ОписаниеВарианта.Включен Или ВариантИзБазы.Описание <> ОписаниеВарианта.Описание Или ВариантИзБазы.КлючЗамеров <> ОписаниеВарианта.КлючЗамеров Или ВариантИзБазы.ГруппироватьПоОтчету <> ОписаниеВарианта.ГруппироватьПоОтчету Тогда
		Возврат Истина;
	КонецЕсли;

	// Таблица "Размещение"
	ТаблицаРазмещения = ВариантИзБазы.Размещение;
	Если ТаблицаРазмещения.Количество() <> ОписаниеВарианта.Размещение.Количество() Тогда
		Возврат Истина;
	КонецЕсли;

	Для Каждого КлючИЗначение Из ОписаниеВарианта.Размещение Цикл
		Подсистема = Справочники.ИдентификаторыОбъектовМетаданных.ИдентификаторОбъектаМетаданных(КлючИЗначение.Ключ, Истина);
		Если ТипЗнч(Подсистема) = Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		СтрокаРазмещения = ТаблицаРазмещения.Найти(Подсистема, "Подсистема");
		Если СтрокаРазмещения = Неопределено Или СтрокаРазмещения.Важный <> (НРег(КлючИЗначение.Значение) = НРег("Важный")) Или СтрокаРазмещения.СмТакже <> (НРег(КлючИЗначение.Значение) = НРег("СмТакже")) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
КонецФункции

Функция ВО_НайденныеОписанияОтчета(Отчет)
	НайденныеОписанияОтчета = Новый Массив;

	Если ТипЗнч(Отчет) = Тип("ОбъектМетаданных") Тогда
		СсылкаОтчета		= Справочники.ИдентификаторыОбъектовМетаданных.ИдентификаторОбъектаМетаданных(Отчет, Истина);
		МетаданныеОтчета	= Отчет;
	Иначе
		СсылкаОтчета		= Отчет;
		МетаданныеОтчета	= Справочники.ИдентификаторыОбъектовМетаданных.ОбъектМетаданныхПоИдентификатору(Отчет, Истина);
	КонецЕсли;

	Если Не ВО_ОтчетПодключенКХранилищу(МетаданныеОтчета) Тогда
		Возврат НайденныеОписанияОтчета;
	КонецЕсли;

	ОписанияОтчетов	= ВО_КоллекцияПредопределенныхВариантовОтчетов();
	ОписаниеОтчета	= ВО_ОписаниеОтчетаПоУмолчанию(ОписанияОтчетов, МетаданныеОтчета, СсылкаОтчета);
	НайденныеОписанияОтчета.Добавить(ОписаниеОтчета);

	Возврат НайденныеОписанияОтчета;
КонецФункции

Функция ВО_ЯзыкиПредставленийВариантовОтчетовДляЗаполнения()
	Языки = Новый Массив;

	Исключения = Новый Массив;
	Исключения.Добавить(ТекущийЯзык());
	Исключения.Добавить(Метаданные.ОсновнойЯзык);

	Для Каждого Язык Из Метаданные.Языки Цикл
		Если Исключения.Найти(Язык) = Неопределено Тогда
			Языки.Добавить(Язык.КодЯзыка);
		КонецЕсли;
	КонецЦикла;

	Возврат Языки;
КонецФункции

Функция ВО_СлужебныйПользователь(Знач КодЯзыка)
	ИмяПользователя = "СлужебныйПользовательДляОбновленияПредставлений";

	// Обновление пользователя информационной базы.
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);

	Если ПользовательИБ = Неопределено Тогда
		Если ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;

		ПользовательИБ							= ПользователиИнформационнойБазы.СоздатьПользователя();
		ПользовательИБ.Имя						= ИмяПользователя;
		ПользовательИБ.Пароль					= Строка(Новый УникальныйИдентификатор);
		ПользовательИБ.ЗапрещеноИзменятьПароль	= Истина;
		ПользовательИБ.ПоказыватьВСпискеВыбора	= Ложь;
	КонецЕсли;

	ПользовательИБ.Язык	= БазоваяПодсистемаСервер.М_ЯзыкПоКоду(КодЯзыка);
	ПользовательИБ.Записать();

	// Обновление пользователя - элемента справочника Пользователи.
	ОписаниеПользователяИБ = Новый Структура;
	ОписаниеПользователяИБ.Вставить("Действие",						"Записать");
	ОписаниеПользователяИБ.Вставить("Имя",							ПользовательИБ.Имя);
	ОписаниеПользователяИБ.Вставить("АутентификацияСтандартная",	Истина);
	ОписаниеПользователяИБ.Вставить("ПоказыватьВСпискеВыбора",		ПользовательИБ.ПоказыватьВСпискеВыбора);
	ОписаниеПользователяИБ.Вставить("УникальныйИдентификатор",		ПользовательИБ.УникальныйИдентификатор);

	Отбор		= Новый Структура("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
	Выборка		= Справочники.Пользователи.Выбрать(,, Отбор);
	ЭтоНовый	= Не Выборка.Следующий();

	НачатьТранзакцию();

	Попытка
		Блокировка			= Новый БлокировкаДанных;
		ЭлементБлокировки	= Блокировка.Добавить(Метаданные.Справочники.Пользователи.ПолноеИмя());

		Если Не ЭтоНовый Тогда
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
		КонецЕсли;

		Блокировка.Заблокировать();

		Если ЭтоНовый Тогда
			Пользователь = Справочники.Пользователи.СоздатьЭлемент();
		Иначе
			Пользователь = Выборка.Ссылка.ПолучитьОбъект();
		КонецЕсли;

		Пользователь.Наименование	= ПользовательИБ.Имя;
		Пользователь.Служебный		= Истина;
		Пользователь.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
		Пользователь.Записать();

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ЗаписьЖурналаРегистрации("Варианты отчетов.Создание служебного пользователя", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Пользователи,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		Возврат Неопределено;
	КонецПопытки;

	Возврат ПользовательИБ.Имя;
КонецФункции

Функция ВО_ОтчетПодключенКХранилищу(ОтчетМетаданные, ПоУмолчаниюВсеПодключены = Неопределено) Экспорт
	ХранилищеМетаданные	= ОтчетМетаданные.ХранилищеВариантов;
	Если ХранилищеМетаданные = Неопределено Тогда
		Если ПоУмолчаниюВсеПодключены = Неопределено Тогда
			ПоУмолчаниюВсеПодключены = (Метаданные.ХранилищеВариантовОтчетов <> Неопределено И Метаданные.ХранилищеВариантовОтчетов.Имя = "ХранилищеВариантовОтчетов");
		КонецЕсли;
		ОтчетПодключен = ПоУмолчаниюВсеПодключены;
	Иначе
		ОтчетПодключен = (ХранилищеМетаданные = Метаданные.ХранилищаНастроек.ХранилищеВариантовОтчетов);
	КонецЕсли;

	Возврат ОтчетПодключен;
КонецФункции

Процедура ВО_ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	////////////////////////////////////////////////////////////////////////////////
	// 1. Обновление общих данных.

	Обработчик							= Обработчики.Добавить();
	Обработчик.УправлениеОбработчиками	= Истина;
	Обработчик.ОбщиеДанные				= Истина;
	Обработчик.РежимВыполнения			= "Оперативно";
	Обработчик.Версия					= "*";
	Обработчик.Процедура				= "ВариантыОтчетовСервер.ВО_ОперативноеОбновлениеОбщихДанныхКонфигурации";
	Обработчик.Приоритет				= 90;

	////////////////////////////////////////////////////////////////////////////////
	// 2. Обновление разделенных данных.

	// 2.3. Обновить разделенные данные в локальном режиме.
	Обработчик								= Обработчики.Добавить();
	Обработчик.ВыполнятьВГруппеОбязательных	= Истина;
	Обработчик.ОбщиеДанные					= Ложь;
	Обработчик.РежимВыполнения				= "Оперативно";
	Обработчик.Версия						= "*";
	Обработчик.Приоритет					= 70;
	Обработчик.Процедура					= "ВариантыОтчетовСервер.ВО_ОперативноеОбновлениеРазделенныхДанныхКонфигурации";

	// 2.4. Обновить служебного пользователя для обновления представлений.
	Обработчик								= Обработчики.Добавить();
	Обработчик.ВыполнятьВГруппеОбязательных	= Истина;
	Обработчик.ОбщиеДанные					= Ложь;
	Обработчик.РежимВыполнения				= "Оперативно";
	Обработчик.Версия						= "3.1.2.205";
	Обработчик.Приоритет					= 99;
	Обработчик.Процедура					= "ВариантыОтчетовСервер.ВО_ОперативноеОбновлениеСлужебногоПользователя";

	////////////////////////////////////////////////////////////////////////////////
	// 3. Отложенное обновление.

	// 3.2. Заполнить информацию для поиска предопределенных вариантов отчетов.

	Обработчик					= Обработчики.Добавить();
	Обработчик.РежимВыполнения	= "Отложенно";
	Обработчик.ОбщиеДанные		= Ложь;
	Обработчик.Идентификатор	= Новый УникальныйИдентификатор("38d2a135-53e0-4c68-9bd6-3d6df9b9dcfb");
	Обработчик.Версия			= "*";
	Обработчик.Процедура		= "ВариантыОтчетовСервер.ВО_ОбновитьИндексПоискаПредопределенныхВариантовОтчетов";
	Обработчик.Комментарий		= "Обновление индекса поиска отчетов, предусмотренных в программе.";

	// 3.3. Заполнить информацию для поиска пользовательских вариантов отчетов.
	Обработчик					= Обработчики.Добавить();
	Обработчик.РежимВыполнения	= "Отложенно";
	Обработчик.ОбщиеДанные		= Ложь;
	Обработчик.Идентификатор	= Новый УникальныйИдентификатор("5ba93197-230b-4ac8-9abb-ab3662e5ff76");
	Обработчик.Версия			= "*";
	Обработчик.Процедура		= "ВариантыОтчетовСервер.ВО_ОбновитьИндексПоискаПользовательскихВариантовОтчетов";
	Обработчик.Комментарий		= "Обновление индекса поиска отчетов, сохраненных пользователями.";

	// 3.4. Установить соответствующие ссылки на идентификаторы объектов метаданных в настройках вариантов универсального отчета.
	Обработчик										= Обработчики.Добавить();
	Обработчик.Версия								= "3.0.1.81";
	Обработчик.Идентификатор						= Новый УникальныйИдентификатор("6cd3c6c1-6919-4e18-9725-eb6dbb841f4a");
	Обработчик.РежимВыполнения						= "Отложенно";
	Обработчик.ОчередьОтложеннойОбработки			= 1;
	Обработчик.ПроцедураЗаполненияДанныхОбновления	= "Справочники.ВариантыОтчетов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.Процедура							= "Справочники.ВариантыОтчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ЧитаемыеОбъекты						= "Справочник.ВариантыОтчетов";
	Обработчик.ИзменяемыеОбъекты					= "Справочник.ВариантыОтчетов";
	Обработчик.БлокируемыеОбъекты					= "Справочник.ВариантыОтчетов";
	Обработчик.ПроцедураПроверки					= "ОбновлениеВерсииИБСервер.ОИБ_ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий							= "Установка параметра ИсточникДанных в настройках вариантов универсального отчета.
		|После завершения обработки, переименование объектов метаданных не приведет к потере сохраненных вариантов отчетов";

	Обработчик.ПриоритетыВыполнения					= ОбновлениеВерсииИБСервер.ОИБ_ПриоритетыВыполненияОбработчика();
	Приоритет										= Обработчик.ПриоритетыВыполнения.Добавить();
	Приоритет.Процедура								= "РегистрыСведений.НастройкиВариантовОтчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Приоритет.Порядок								= "До";

	// 3.5. Зарегистрировать настройки доступности вариантов отчетов в разрезе пользователей (групп пользователей).
	Обработчик										= Обработчики.Добавить();
	Обработчик.Версия								= "3.1.2.64";
	Обработчик.Идентификатор						= Новый УникальныйИдентификатор("eba9f8fb-2755-4d1a-99f5-cdd132e48cfc");
	Обработчик.РежимВыполнения						= "Отложенно";
	Обработчик.ОчередьОтложеннойОбработки			= 2;
	Обработчик.ПроцедураЗаполненияДанныхОбновления	= "РегистрыСведений.НастройкиВариантовОтчетов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.Процедура							= "РегистрыСведений.НастройкиВариантовОтчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ЧитаемыеОбъекты						= "Справочник.ВариантыОтчетов";
	Обработчик.ИзменяемыеОбъекты					= "Справочник.ВариантыОтчетов";
	Обработчик.БлокируемыеОбъекты					= "Справочник.ВариантыОтчетов, РегистрСведений.НастройкиВариантовОтчетов";
	Обработчик.ПроцедураПроверки					= "ОбновлениеВерсииИБСервер.ОИБ_ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий							= "Перенос всех настроек доступности вариантов отчетов в регистр сведений ""Настройки вариантов отчетов"".
		|До завершения обработки, настройка доступности вариантов отчетов в разрезе пользователей (групп пользователей) будет работать некорректно.";

	Обработчик.ПриоритетыВыполнения					= ОбновлениеВерсииИБСервер.ОИБ_ПриоритетыВыполненияОбработчика();
	Приоритет										= Обработчик.ПриоритетыВыполнения.Добавить();
	Приоритет.Процедура								= "Справочники.ВариантыОтчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Приоритет.Порядок								= "После";
КонецПроцедуры

Процедура ВО_ОперативноеОбновлениеОбщихДанныхКонфигурации(ПараметрыОбновления) Экспорт
	Режим = "ОбщиеДанныеКонфигурации";
	ВО_УстановитьПризнакЗаполненияПредставлений(ТекущаяДатаСеанса(), Истина, Режим);
	ВО_ОперативноеОбновлениеОбщихДанных(Режим, ПараметрыОбновления.РазделенныеОбработчики);

	ВО_ЗапланироватьЗаполнениеПредставлений();
КонецПроцедуры

Процедура ВО_ОперативноеОбновлениеРазделенныхДанныхКонфигурации() Экспорт
	ВО_АктуализироватьВариантыОтчетов("РазделенныеДанныеКонфигурации");
КонецПроцедуры

Процедура ВО_ОперативноеОбновлениеСлужебногоПользователя() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	ИмяПользователя	= "СлужебныйПользовательДляОбновленияПредставлений";
	ПользовательИБ	= ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);

	Если ПользовательИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Отбор	= Новый Структура("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
	Выборка	= Справочники.Пользователи.Выбрать(,, Отбор);

	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;

	НачатьТранзакцию();

	Попытка
		Блокировка			= Новый БлокировкаДанных;
		ЭлементБлокировки	= Блокировка.Добавить(Метаданные.Справочники.Пользователи.ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
		Блокировка.Заблокировать();

		Пользователь		= Выборка.Ссылка.ПолучитьОбъект();
		ОбновлениеВерсииИБСервер.ОИБ_УдалитьДанные(Пользователь);

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ЗаписьЖурналаРегистрации("Варианты ВариантыОтчетовСервер.ВО_Обновление служебного пользователя", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Пользователи,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

Процедура ВО_ОбновитьИндексПоискаПредопределенныхВариантовОтчетов(Параметры = Неопределено) Экспорт
	ВО_ОбновитьИндексПоиска("ОбщиеДанныеКонфигурации", Истина);
КонецПроцедуры

Процедура ВО_ОбновитьИндексПоискаПользовательскихВариантовОтчетов(Параметры = Неопределено) Экспорт
	ВО_ОбновитьИндексПоиска("РазделенныеДанныеКонфигурации", Истина);
КонецПроцедуры

Процедура ВО_ПриОчисткеВсехПараметровРаботыРасширений() Экспорт
	НаборЗаписей = РегистрыСведений.ПредопределенныеВариантыОтчетовВерсийРасширений.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВерсияРасширений.Установить(ПараметрыСеанса.ВерсияРасширений);
	НаборЗаписей.Записать();
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ВариантыОтчетов

Функция ВО_ТипОтчетаСтрокой(Знач ТипОтчета, Знач Отчет = Неопределено) Экспорт
	ТипТипаОтчета = ТипЗнч(ТипОтчета);
	Если ТипТипаОтчета = Тип("Строка") Тогда
		Возврат ТипОтчета;
	ИначеЕсли ТипТипаОтчета = Тип("ПеречислениеСсылка.ТипыОтчетов") Тогда
		Если ТипОтчета = ПредопределенноеЗначение("Перечисление.ТипыОтчетов.Внутренний") Тогда
			Возврат "Внутренний";
		ИначеЕсли ТипОтчета = ПредопределенноеЗначение("Перечисление.ТипыОтчетов.Расширение") Тогда
			Возврат "Расширение";
		ИначеЕсли ТипОтчета = ПредопределенноеЗначение("Перечисление.ТипыОтчетов.Дополнительный") Тогда
			Возврат "Дополнительный";
		ИначеЕсли ТипОтчета = ПредопределенноеЗначение("Перечисление.ТипыОтчетов.Внешний") Тогда
			Возврат "Внешний";
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Если ТипТипаОтчета <> Тип("Тип") Тогда
			ТипОтчета = ТипЗнч(Отчет);
		КонецЕсли;
		Если ТипОтчета = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
			Возврат "Внутренний";
		ИначеЕсли ТипОтчета = Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений") Тогда
			Возврат "Расширение";
		ИначеЕсли ТипОтчета = Тип("Строка") Тогда
			Возврат "Внешний";
		Иначе
			Возврат "Дополнительный";
		КонецЕсли;
	КонецЕсли;
КонецФункции

Процедура ВО_ДополнитьСтруктуруКлючом(Структура, Ключ, Значение = Неопределено) Экспорт
	Если Не Структура.Свойство(Ключ) Тогда
		Структура.Вставить(Ключ, Значение);
	КонецЕсли;
КонецПроцедуры

Функция ВО_РазложитьСтрокуПоискаВМассивСлов(СтрокаПоиска) Экспорт
	СловаИИхДлина = Новый СписокЗначений;
	ДлинаСтроки = СтрДлина(СтрокаПоиска);

	Слово			= "";
	ДлинаСлова		= 0;
	ОткрытаКавычка	= Ложь;
	Для НомерСимвола = 1 По ДлинаСтроки Цикл
		КодСимвола = КодСимвола(СтрокаПоиска, НомерСимвола);
		Если КодСимвола = 34 Тогда // 34 - двойная кавычка ".
			ОткрытаКавычка = Не ОткрытаКавычка;
		ИначеЕсли ОткрытаКавычка
			Или (КодСимвола >= 48 И КодСимвола <= 57) // цифры
			Или (КодСимвола >= 65 И КодСимвола <= 90) // латиница большие
			Или (КодСимвола >= 97 И КодСимвола <= 122) // латиница маленькие
			Или (КодСимвола >= 1040 И КодСимвола <= 1103) // кириллица
			Или КодСимвола = 95 Тогда // символ "_"
			Слово = Слово + Символ(КодСимвола);
			ДлинаСлова = ДлинаСлова + 1;
		ИначеЕсли Слово <> "" Тогда
			Если СловаИИхДлина.НайтиПоЗначению(Слово) = Неопределено Тогда
				СловаИИхДлина.Добавить(Слово, Формат(ДлинаСлова, "ЧЦ=3; ЧВН="));
			КонецЕсли;
			Слово = "";
			ДлинаСлова = 0;
		КонецЕсли;
	КонецЦикла;

	Если Слово <> "" И СловаИИхДлина.НайтиПоЗначению(Слово) = Неопределено Тогда
		СловаИИхДлина.Добавить(Слово, Формат(ДлинаСлова, "ЧЦ=3; ЧВН="));
	КонецЕсли;

	СловаИИхДлина.СортироватьПоПредставлению(НаправлениеСортировки.Убыв);

	Возврат СловаИИхДлина.ВыгрузитьЗначения();
КонецФункции

#КонецОбласти

#Область Отчеты

Функция О_ЗагрузитьНастройки(КомпоновщикНастроек, Настройки, ПользовательскиеНастройки = Неопределено, ФиксированныеНастройки = Неопределено) Экспорт
	НастройкиЗагружены = (ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") И Настройки <> КомпоновщикНастроек.Настройки);

	Если НастройкиЗагружены Тогда
		Если ТипЗнч(ПользовательскиеНастройки) <> Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
			ПользовательскиеНастройки = КомпоновщикНастроек.ПользовательскиеНастройки;
		КонецЕсли;

		Если ТипЗнч(ФиксированныеНастройки) <> Тип("НастройкиКомпоновкиДанных") Тогда
			ФиксированныеНастройки = КомпоновщикНастроек.ФиксированныеНастройки;
		КонецЕсли;

		ДоступныеЗначения = БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(КомпоновщикНастроек.Настройки.ДополнительныеСвойства, "ДоступныеЗначения");

		Если ДоступныеЗначения <> Неопределено Тогда
			Настройки.ДополнительныеСвойства.Вставить("ДоступныеЗначения", ДоступныеЗначения);
		КонецЕсли;

		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	КонецЕсли;

	Если ТипЗнч(ПользовательскиеНастройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") И ПользовательскиеНастройки <> КомпоновщикНастроек.ПользовательскиеНастройки Тогда
		КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
	КонецЕсли;

	Если ТипЗнч(ФиксированныеНастройки) = Тип("НастройкиКомпоновкиДанных") И ФиксированныеНастройки <> КомпоновщикНастроек.ФиксированныеНастройки Тогда
		КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(ФиксированныеНастройки);
	КонецЕсли;

	Возврат НастройкиЗагружены;
КонецФункции

Функция О_ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки, Идентификатор, Иерархия = Неопределено, ПользовательскиеНастройки = Неопределено) Экспорт
	Если Иерархия = Неопределено И ТипЗнч(ПользовательскиеНастройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда

		НайденныеЭлементы = ПользовательскиеНастройки.ПолучитьОсновныеНастройкиПоИдентификаторуПользовательскойНастройки(Идентификатор);

		Если НайденныеЭлементы.Количество() > 0 Тогда
			Возврат НайденныеЭлементы[0];
		КонецЕсли;
	КонецЕсли;

	Если Иерархия <> Неопределено Тогда
		Иерархия.Добавить(Настройки);
	КонецЕсли;

	ТипНастройки = ТипЗнч(Настройки);

	Если ТипНастройки <> Тип("НастройкиКомпоновкиДанных") Тогда
		Если Настройки.ИдентификаторПользовательскойНастройки = Идентификатор Тогда
			Возврат Настройки;
		ИначеЕсли ТипНастройки = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
			Возврат О_ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Настройки, Идентификатор, Иерархия);
		ИначеЕсли ТипНастройки = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") ИЛИ ТипНастройки = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") ИЛИ ТипНастройки = Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") Тогда
			Для Каждого ВложенныйЭлемент Из Настройки Цикл
				РезультатПоиска = О_ПолучитьОбъектПоПользовательскомуИдентификатору(ВложенныйЭлемент, Идентификатор, Иерархия);
				Если РезультатПоиска <> Неопределено Тогда
					Возврат РезультатПоиска;
				КонецЕсли;
			КонецЦикла;

			Если Иерархия <> Неопределено Тогда
				Иерархия.Удалить(Иерархия.ВГраница());
			КонецЕсли;

			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;

	Если Настройки.Выбор.ИдентификаторПользовательскойНастройки = Идентификатор Тогда
		Возврат Настройки.Выбор;
	ИначеЕсли Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = Идентификатор Тогда
		Возврат Настройки.УсловноеОформление;
	КонецЕсли;

	Если ТипНастройки <> Тип("ТаблицаКомпоновкиДанных") И ТипНастройки <> Тип("ДиаграммаКомпоновкиДанных") Тогда
		Если Настройки.Отбор.ИдентификаторПользовательскойНастройки = Идентификатор Тогда
			Возврат Настройки.Отбор;
		ИначеЕсли Настройки.Порядок.ИдентификаторПользовательскойНастройки = Идентификатор Тогда
			Возврат Настройки.Порядок;
		КонецЕсли;
	КонецЕсли;

	Если ТипНастройки = Тип("НастройкиКомпоновкиДанных") Тогда
		РезультатПоиска = О_НайтиЭлементНастройки(Настройки.ПараметрыДанных, Идентификатор);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
	КонецЕсли;

	Если ТипНастройки <> Тип("ТаблицаКомпоновкиДанных") И ТипНастройки <> Тип("ДиаграммаКомпоновкиДанных") Тогда
		РезультатПоиска = О_НайтиЭлементНастройки(Настройки.Отбор, Идентификатор);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
	КонецЕсли;

	РезультатПоиска = О_НайтиЭлементНастройки(Настройки.УсловноеОформление, Идентификатор);
	Если РезультатПоиска <> Неопределено Тогда
		Возврат РезультатПоиска;
	КонецЕсли;

	Если ТипНастройки = Тип("ТаблицаКомпоновкиДанных") Тогда
		РезультатПоиска = О_ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Строки, Идентификатор, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;

		РезультатПоиска = О_ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Колонки, Идентификатор, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
	ИначеЕсли ТипНастройки = Тип("ДиаграммаКомпоновкиДанных") Тогда
		РезультатПоиска = О_ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Точки, Идентификатор, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;

		РезультатПоиска = О_ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Серии, Идентификатор, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
	Иначе
		РезультатПоиска = О_ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Структура, Идентификатор, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
	КонецЕсли;

	Если Иерархия <> Неопределено Тогда
		Иерархия.Удалить(Иерархия.ВГраница());
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

Функция О_НайтиЭлементНастройки(ЭлементНастройки, ИдентификаторПользовательскойНастройки)
	// Поиск элемента с заданным значением свойства ИдентификаторПользовательскойНастройки (ИПН).

	Группы = Новый Массив;
	Группы.Добавить(ЭлементНастройки.Элементы);
	Индекс = 0;

	Пока Индекс < Группы.Количество() Цикл
		КоллекцияЭлементов	= Группы[Индекс];
		Индекс				= Индекс + 1;
		Для Каждого ПодчиненныйЭлемент Из КоллекцияЭлементов Цикл
			Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
				// Не содержит ИПН; Коллекция вложенных элементов не содержит ИПН.
			ИначеЕсли ТипЗнч(ПодчиненныйЭлемент) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
				// Не содержит ИПН; Коллекция вложенных элементов может содержать ИПН.
				Группы.Добавить(ПодчиненныйЭлемент.ЗначенияВложенныхПараметров);
			ИначеЕсли ПодчиненныйЭлемент.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
				// Найден нужный элемент.
				Возврат ПодчиненныйЭлемент;
			Иначе
				// Содержит ИПН; Коллекция вложенных элементов может содержать ИПН.
				Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
					Группы.Добавить(ПодчиненныйЭлемент.Элементы);
				ИначеЕсли ТипЗнч(ПодчиненныйЭлемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
					Группы.Добавить(ПодчиненныйЭлемент.ЗначенияВложенныхПараметров);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат Неопределено;
КонецФункции

Функция О_НайтиДоступнуюНастройку(Настройки, ЭлементНастройки) Экспорт
	Тип = ТипЗнч(ЭлементНастройки);
	Если Тип = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		ЭлементОтбора = ЭлементНастройки;

		Если ЗначениеЗаполнено(ЭлементНастройки.ИдентификаторПользовательскойНастройки) Тогда
			ЭлементОтбора = О_ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки, ЭлементНастройки.ИдентификаторПользовательскойНастройки);
		КонецЕсли;

		Возврат О_НайтиДоступноеПолеКД(Настройки, ЭлементОтбора.ЛевоеЗначение);
	ИначеЕсли Тип = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		Возврат О_НайтиДоступныйПараметрКД(Настройки, ЭлементНастройки.Параметр);
	ИначеЕсли Тип = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Возврат Настройки.ДоступныеОбъекты.Элементы.Найти(ЭлементНастройки.ИдентификаторОбъекта);
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

Функция О_НайтиДоступноеПолеКД(НастройкиКД, ПолеКД)
	Если ПолеКД = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если ТипЗнч(НастройкиКД) = Тип("ГруппировкаКомпоновкиДанных") Или ТипЗнч(НастройкиКД) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Или ТипЗнч(НастройкиКД) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		ДоступнаяНастройка = НастройкиКД.Отбор.ДоступныеПоляОтбора.НайтиПоле(ПолеКД);
	Иначе
		ДоступнаяНастройка = НастройкиКД.ДоступныеПоляОтбора.НайтиПоле(ПолеКД);
	КонецЕсли;

	Если ДоступнаяНастройка <> Неопределено Тогда
		Возврат ДоступнаяНастройка;
	КонецЕсли;

	МассивСтруктур = Новый Массив;
	МассивСтруктур.Добавить(НастройкиКД.Структура);
	Пока МассивСтруктур.Количество() > 0 Цикл
		СтруктураКД = МассивСтруктур[0];
		МассивСтруктур.Удалить(0);

		Для Каждого ЭлементСтруктурыКД Из СтруктураКД Цикл
			Если ТипЗнч(ЭлементСтруктурыКД) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
				ДоступнаяНастройка = ЭлементСтруктурыКД.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеКД);
				Если ДоступнаяНастройка <> Неопределено Тогда
					Возврат ДоступнаяНастройка;
				КонецЕсли;

				МассивСтруктур.Добавить(ЭлементСтруктурыКД.Настройки.Структура);
			ИначеЕсли ТипЗнч(ЭлементСтруктурыКД) = Тип("ГруппировкаКомпоновкиДанных") Тогда
				ДоступнаяНастройка = ЭлементСтруктурыКД.Отбор.ДоступныеПоляОтбора.НайтиПоле(ПолеКД);
				Если ДоступнаяНастройка <> Неопределено Тогда
					Возврат ДоступнаяНастройка;
				КонецЕсли;

				МассивСтруктур.Добавить(ЭлементСтруктурыКД.Структура);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат Неопределено;
КонецФункции

Функция О_НайтиДоступныйПараметрКД(НастройкиКД, ПараметрКД)
	Если ПараметрКД = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если НастройкиКД.ПараметрыДанных.ДоступныеПараметры <> Неопределено Тогда
		// Настройки, которым принадлежат параметры данных, связаны с источником доступных настроек.
		ДоступнаяНастройка = НастройкиКД.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(ПараметрКД);
		Если ДоступнаяНастройка <> Неопределено Тогда
			Возврат ДоступнаяНастройка;
		КонецЕсли;
	КонецЕсли;

	МассивСтруктур = Новый Массив;
	МассивСтруктур.Добавить(НастройкиКД.Структура);
	Пока МассивСтруктур.Количество() > 0 Цикл
		СтруктураКД = МассивСтруктур[0];
		МассивСтруктур.Удалить(0);

		Для Каждого ЭлементСтруктурыКД Из СтруктураКД Цикл
			Если ТипЗнч(ЭлементСтруктурыКД) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
				Если ЭлементСтруктурыКД.Настройки.ПараметрыДанных.ДоступныеПараметры <> Неопределено Тогда
					// Настройки, которым принадлежат параметры данных, связаны с источником доступных настроек.
					ДоступнаяНастройка = ЭлементСтруктурыКД.Настройки.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(ПараметрКД);
					Если ДоступнаяНастройка <> Неопределено Тогда
						Возврат ДоступнаяНастройка;
					КонецЕсли;
				КонецЕсли;

				МассивСтруктур.Добавить(ЭлементСтруктурыКД.Настройки.Структура);
			ИначеЕсли ТипЗнч(ЭлементСтруктурыКД) = Тип("ГруппировкаКомпоновкиДанных") Тогда
				МассивСтруктур.Добавить(ЭлементСтруктурыКД.Структура);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат Неопределено;
КонецФункции

Функция О_КлючУникальности(ПолноеИмяОтчета, КлючВарианта) Экспорт
	Результат = ПолноеИмяОтчета;
	Если ЗначениеЗаполнено(КлючВарианта) Тогда
		Результат = Результат + "/КлючВарианта." + КлючВарианта;
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция О_НайтиСтрокиТаблицы(ТаблицаРеквизит, ДанныеСтроки) Экспорт
	Если ТипЗнч(ТаблицаРеквизит) = Тип("ДанныеФормыКоллекция") Тогда // Таблица значений.
		Возврат ТаблицаРеквизит.НайтиСтроки(ДанныеСтроки);
	ИначеЕсли ТипЗнч(ТаблицаРеквизит) = Тип("ДанныеФормыДерево") Тогда // Дерево значений.
		Возврат О_НайтиРекурсивно(ТаблицаРеквизит.ПолучитьЭлементы(), ДанныеСтроки);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция О_НайтиРекурсивно(НаборСтрок, ДанныеСтроки, Найденные = Неопределено)
	Если Найденные = Неопределено Тогда
		Найденные = Новый Массив;
	КонецЕсли;

	Для Каждого СтрокаТаблицы Из НаборСтрок Цикл
		ЗначенияСовпадают = Истина;
		Для Каждого КлючИЗначение Из ДанныеСтроки Цикл
			Если СтрокаТаблицы[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
				ЗначенияСовпадают = Ложь;

				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначенияСовпадают Тогда
			Найденные.Добавить(СтрокаТаблицы);
		КонецЕсли;
		О_НайтиРекурсивно(СтрокаТаблицы.ПолучитьЭлементы(), ДанныеСтроки, Найденные);
	КонецЦикла;

	Возврат Найденные;
КонецФункции

#КонецОбласти

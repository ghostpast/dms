///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область РегламентныеЗадания

Функция РЗ_НайтиЗадания(Отбор) Экспорт
	РЗ_ВызватьИсключениеЕслиНетПраваАдминистрирования();

	КопияОтбора		= БазоваяПодсистемаСервер.ОН_СкопироватьРекурсивно(Отбор);
	СписокЗаданий	= РегламентныеЗадания.ПолучитьРегламентныеЗадания(КопияОтбора);

	Возврат СписокЗаданий;
КонецФункции

Процедура РЗ_ИзменитьЗадание(Знач Идентификатор, Знач Параметры) Экспорт
	РЗ_ВызватьИсключениеЕслиНетПраваАдминистрирования();

	ПараметрыЗадания = БазоваяПодсистемаСервер.ОН_СкопироватьРекурсивно(Параметры);

	Если ТипЗнч(Идентификатор) = Тип("РегламентноеЗадание") Тогда
		Идентификатор = Идентификатор.УникальныйИдентификатор;
	КонецЕсли;

	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Идентификатор = Новый УникальныйИдентификатор(Идентификатор);
	КонецЕсли;

	Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
	Если Задание <> Неопределено Тогда
		Если ПараметрыЗадания.Свойство("Наименование") Тогда
			Задание.Наименование = ПараметрыЗадания.Наименование;
		КонецЕсли;

		Если ПараметрыЗадания.Свойство("Использование") Тогда
			Задание.Использование = ПараметрыЗадания.Использование;
		КонецЕсли;

		Если ПараметрыЗадания.Свойство("Ключ") Тогда
			Задание.Ключ = ПараметрыЗадания.Ключ;
		КонецЕсли;

		Если ПараметрыЗадания.Свойство("ИмяПользователя") Тогда
			Задание.ИмяПользователя = ПараметрыЗадания.ИмяПользователя;
		КонецЕсли;

		Если ПараметрыЗадания.Свойство("ИнтервалПовтораПриАварийномЗавершении") Тогда
			Задание.ИнтервалПовтораПриАварийномЗавершении = ПараметрыЗадания.ИнтервалПовтораПриАварийномЗавершении;
		КонецЕсли;

		Если ПараметрыЗадания.Свойство("КоличествоПовторовПриАварийномЗавершении") Тогда
			Задание.КоличествоПовторовПриАварийномЗавершении = ПараметрыЗадания.КоличествоПовторовПриАварийномЗавершении;
		КонецЕсли;

		Если ПараметрыЗадания.Свойство("Параметры") Тогда
			Задание.Параметры = ПараметрыЗадания.Параметры;
		КонецЕсли;

		Если ПараметрыЗадания.Свойство("Расписание") Тогда
			Задание.Расписание = ПараметрыЗадания.Расписание;
		КонецЕсли;

		Задание.Записать();
	КонецЕсли;
КонецПроцедуры

Процедура РЗ_УстановитьИспользованиеПредопределенногоРегламентногоЗадания(ЗаданиеМетаданные, Использование) Экспорт
	Задание = РегламентныеЗадания.НайтиПредопределенное(ЗаданиеМетаданные);

	Если Задание.Использование <> Использование Тогда
		Задание.Использование = Использование;
		Задание.Записать();
	КонецЕсли;
КонецПроцедуры

Процедура РЗ_ОтменитьВыполнениеЗадания(Знач РегламентноеЗадание, ТекстДляЖурнала) Экспорт
	ТекущийСеанс = ПолучитьТекущийСеансИнформационнойБазы().ПолучитьФоновоеЗадание();
	Если ТекущийСеанс = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если РегламентноеЗадание = Неопределено Тогда
		Для Каждого Задание Из Метаданные.РегламентныеЗадания Цикл
			Если Задание.ИмяМетода = ТекущийСеанс.ИмяМетода Тогда
				РегламентноеЗадание = Задание;

				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если РегламентноеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ЗаписьЖурналаРегистрации("Отмена фонового задания", УровеньЖурналаРегистрации.Предупреждение, РегламентноеЗадание,, ТекстДляЖурнала);

	ТекущийСеанс.Отменить();
КонецПроцедуры

Процедура РЗ_ВызватьИсключениеЕслиНетПраваАдминистрирования()
	ПроверятьПраваАдминистрированияСистемы = Истина;

	Если НЕ ПользователиСервер.П_ЭтоПолноправныйПользователь(, ПроверятьПраваАдминистрированияСистемы) Тогда
		ВызватьИсключение "Нарушение прав доступа.";
	КонецЕсли;
КонецПроцедуры

Функция РЗ_Задание(Знач Идентификатор) Экспорт
	РЗ_ВызватьИсключениеЕслиНетПраваАдминистрирования();

	Если ТипЗнч(Идентификатор) = Тип("РегламентноеЗадание") Тогда
		Идентификатор = Идентификатор.УникальныйИдентификатор;
	КонецЕсли;

	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Идентификатор = Новый УникальныйИдентификатор(Идентификатор);
	КонецЕсли;

	Если ТипЗнч(Идентификатор) = Тип("ОбъектМетаданных") Тогда
		Если Идентификатор.Предопределенное Тогда
			РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное(Идентификатор);
		Иначе
			СписокЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные", Идентификатор));
			Если СписокЗаданий.Количество() > 0 Тогда
				РегламентноеЗадание = СписокЗаданий[0];
			КонецЕсли;
		КонецЕсли;
	Иначе
		РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
	КонецЕсли;

	Возврат РегламентноеЗадание;
КонецФункции

Функция сРЗ_РегламентноеЗаданиеДоступноПоФункциональнымОпциям(Задание, ЗависимостиЗаданий = Неопределено) Экспорт
	Если ЗависимостиЗаданий = Неопределено Тогда
		ЗависимостиЗаданий = сРЗ_РегламентныеЗаданияЗависимыеОтФункциональныхОпций();
	КонецЕсли;

	ОтключитьВПодчиненномУзлеРИБ		= Ложь;
	ОтключитьВАвтономномРабочемМесте	= Ложь;
	Использование						= Неопределено;
	ЭтоПодчиненныйУзелРИБ				= БазоваяПодсистемаСервер.ОН_ЭтоПодчиненныйУзелРИБ();
	ЭтоАвтономноеРабочееМесто			= БазоваяПодсистемаСервер.ОН_ЭтоАвтономноеРабочееМесто();

	НайденныеСтроки = ЗависимостиЗаданий.НайтиСтроки(Новый Структура("РегламентноеЗадание", Задание));
	Для Каждого СтрокаЗависимости Из НайденныеСтроки Цикл
		ОтключитьВПодчиненномУзлеРИБ		= (СтрокаЗависимости.ДоступноВПодчиненномУзлеРИБ = Ложь) И ЭтоПодчиненныйУзелРИБ;
		ОтключитьВАвтономномРабочемМесте	= (СтрокаЗависимости.ДоступноВАвтономномРабочемМесте = Ложь) И ЭтоАвтономноеРабочееМесто;

		Если ОтключитьВПодчиненномУзлеРИБ Или ОтключитьВАвтономномРабочемМесте Тогда
			Возврат Ложь;
		КонецЕсли;

		Если СтрокаЗависимости.ФункциональнаяОпция = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ЗначениеФО = ПолучитьФункциональнуюОпцию(СтрокаЗависимости.ФункциональнаяОпция.Имя);

		Если Использование = Неопределено Тогда
			Использование = ЗначениеФО;
		ИначеЕсли СтрокаЗависимости.ЗависимостьПоИ Тогда
			Использование = Использование И ЗначениеФО;
		Иначе
			Использование = Использование Или ЗначениеФО;
		КонецЕсли;
	КонецЦикла;

	Если Использование = Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Использование;
	КонецЕсли;
КонецФункции

Функция сРЗ_РегламентныеЗаданияЗависимыеОтФункциональныхОпций() Экспорт
	Зависимости = Новый ТаблицаЗначений;
	Зависимости.Колонки.Добавить("РегламентноеЗадание");
	Зависимости.Колонки.Добавить("ФункциональнаяОпция");
	Зависимости.Колонки.Добавить("ЗависимостьПоИ", Новый ОписаниеТипов("Булево"));
	Зависимости.Колонки.Добавить("ДоступноВПодчиненномУзлеРИБ");
	Зависимости.Колонки.Добавить("ВключатьПриВключенииФункциональнойОпции");
	Зависимости.Колонки.Добавить("ДоступноВАвтономномРабочемМесте");
	Зависимости.Колонки.Добавить("РаботаетСВнешнимиРесурсами",  Новый ОписаниеТипов("Булево"));
	Зависимости.Колонки.Добавить("Параметризуется",  Новый ОписаниеТипов("Булево"));

	ИнтеграцияПодсистемСервер.ПриОпределенииНастроекРегламентныхЗаданий(Зависимости);

	Зависимости.Сортировать("РегламентноеЗадание");

	Возврат Зависимости;
КонецФункции

Функция сРЗ_ЗначениеНастройки(ИмяНастройки) Экспорт
	Настройки = Новый Структура;
	Настройки.Вставить("РасположениеКомандыСнятияБлокировки", "Блокировку также можно снять позднее в разделе <b>Администрирование - Обслуживание</b>.");

	Возврат Настройки[ИмяНастройки];
КонецФункции

#КонецОбласти

#Область БлокировкаРаботыСВнешнимиРесурсами

Процедура БРСВР_ПриНачалеВыполненияРегламентногоЗадания(РегламентноеЗадание) Экспорт
	ЗапускЗаданияРазрешен = БазоваяПодсистемаСервер.ОН_ХранилищеЗагрузить(ХранилищеСистемныхНастроек, "РегламентныеЗадания", РегламентноеЗадание.ИмяМетода, Неопределено, Неопределено, Неопределено);

	Если ЗапускЗаданияРазрешен = Истина Тогда
		Возврат;
	КонецЕсли;

	Если Не БРСВР_РегламентноеЗаданиеРаботаетСВнешнимиРесурсами(РегламентноеЗадание) Тогда
		Возврат;
	КонецЕсли;

	Если Не ПараметрыСеанса.РаботаСВнешнимиРесурсамиЗаблокирована Тогда
		Возврат;
	КонецЕсли;

	НачатьТранзакцию();
	Попытка
		БРСВР_ЗаблокироватьДанныеПараметровБлокировки();

		ПараметрыБлокировки = БРСВР_СохраненныеПараметрыБлокировки();
		БРСВР_ОтключитьРегламентноеЗадание(ПараметрыБлокировки, РегламентноеЗадание);
		БРСВР_СохранитьПараметрыБлокировки(ПараметрыБлокировки);

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;

	ТекстИсключения = СтрШаблон("Изменилась строка соединения информационной базы.
			           |Возможно информационная база была перемещена.
			           |Регламентное задание ""%1"" отключено.",
			РегламентноеЗадание.Синоним);

	РЗ_ОтменитьВыполнениеЗадания(РегламентноеЗадание, ТекстИсключения);

	ВызватьИсключение ТекстИсключения;
КонецПроцедуры

Функция БРСВР_РегламентноеЗаданиеРаботаетСВнешнимиРесурсами(РегламентноеЗадание)
	ЗависимостиЗаданий = сРЗ_РегламентныеЗаданияЗависимыеОтФункциональныхОпций();

	Отбор = Новый Структура;
	Отбор.Вставить("РегламентноеЗадание",			РегламентноеЗадание);
	Отбор.Вставить("РаботаетСВнешнимиРесурсами",	Истина);

	НайденныеСтроки = ЗависимостиЗаданий.НайтиСтроки(Отбор);

	Возврат НайденныеСтроки.Количество() <> 0;
КонецФункции

Функция БРСВР_ТекущиеПараметрыБлокировки()
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторБазы",						БазоваяПодсистемаСервер.СП_ИдентификаторИнформационнойБазы());
	Результат.Вставить("ЭтоФайловаяБаза",						БазоваяПодсистемаСервер.ОН_ИнформационнаяБазаФайловая());
	Результат.Вставить("СтрокаСоединения",						СтрокаСоединенияИнформационнойБазы());
	Результат.Вставить("ИмяКомпьютера",							ИмяКомпьютера());
	Результат.Вставить("ПроверятьИмяСервера",					Истина);
	Результат.Вставить("РаботаСВнешнимиРесурсамиЗаблокирована",	Ложь);
	Результат.Вставить("ОтключенныеЗадания",					Новый Массив);
	Результат.Вставить("ПричинаБлокировки",						"");

	Возврат Результат;
КонецФункции

Функция БРСВР_СохраненныеПараметрыБлокировки() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Сохраненные = Константы.ПараметрыБлокировкиРаботыСВнешнимиРесурсами.Получить().Получить();
	УстановитьПривилегированныйРежим(Ложь);

	Результат = БРСВР_ТекущиеПараметрыБлокировки();

	Если Сохраненные = Неопределено Тогда
		БРСВР_СохранитьПараметрыБлокировки(Результат); // Автоматическая инициализация.
		Если БазоваяПодсистемаСервер.ОН_ИнформационнаяБазаФайловая() Тогда
			БРСВР_ЗаписатьИдентификаторФайловойБазыВФайлПроверки(Результат.ИдентификаторБазы);
		КонецЕсли;
	КонецЕсли;

	Если ТипЗнч(Сохраненные) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Результат, Сохраненные); // Переинициализация новых свойств.
	КонецЕсли;

	Возврат Результат;
КонецФункции

Процедура БРСВР_ЗаблокироватьДанныеПараметровБлокировки()
	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("Константа.ПараметрыБлокировкиРаботыСВнешнимиРесурсами");
	Блокировка.Заблокировать();
КонецПроцедуры

Процедура БРСВР_СохранитьПараметрыБлокировки(ПараметрыБлокировки)
	УстановитьПривилегированныйРежим(Истина);

	ХранилищеЗначения = Новый ХранилищеЗначения(ПараметрыБлокировки);
	Константы.ПараметрыБлокировкиРаботыСВнешнимиРесурсами.Установить(ХранилищеЗначения);

	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

Процедура БРСВР_ОтключитьРегламентноеЗадание(ПараметрыБлокировки, РегламентноеЗадание)
	Отбор = Новый Структура;
	Отбор.Вставить("Метаданные", РегламентноеЗадание);
	Отбор.Вставить("Использование", Истина);
	МассивЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор); // Массив из РегламентноеЗадание

	Для Каждого Задание Из МассивЗаданий Цикл
		Задание.Использование = Ложь;
		Задание.Записать();

		ПараметрыБлокировки.ОтключенныеЗадания.Добавить(Задание.УникальныйИдентификатор);
	КонецЦикла;
КонецПроцедуры

Процедура БРСВР_ЗаписатьИдентификаторФайловойБазыВФайлПроверки(ИдентификаторБазы)
	СодержимоеФайла = СтрШаблон("%1
		           |
		           |Файл создан автоматически прикладным решением ""%2"".
		           |Он содержит идентификатор информационной базы и позволяет определить, что эта информационная база была скопирована.
		           |
		           |При копировании файлов информационной базы, в том числе при создании резервной копии, не следует копировать этот файл.
		           |Одновременное использование двух копий информационной базы с одинаковым идентификатором может привести к конфликтам
		           |при синхронизации данных, отправке почты и другой работе с внешними ресурсами.
		           |
		           |Если файл отсутствует в каталоге с информационной базой, то программа запросит администратора, разрешено
		           |ли ей работать с внешними ресурсами.",
		ИдентификаторБазы,
		Метаданные.Синоним);

	ИмяФайла = БазоваяПодсистемаКлиентСервер.ОН_КаталогФайловойИнформационнойБазы() + ПолучитьРазделительПути() + "DoNotCopy.txt";

	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла);
	Попытка
		ЗаписьТекста.Записать(СодержимоеФайла);
	Исключение
		ЗаписьТекста.Закрыть();

		ВызватьИсключение;
	КонецПопытки;
	ЗаписьТекста.Закрыть();
КонецПроцедуры

Процедура БРСВР_РазрешитьРаботуСВнешнимиРесурсами() Экспорт
	НачатьТранзакцию();
	Попытка
		БРСВР_ЗаблокироватьДанныеПараметровБлокировки();

		ПараметрыБлокировки = БРСВР_СохраненныеПараметрыБлокировки();
		БРСВР_ВключитьОтключенныеРегламентныеЗадания(ПараметрыБлокировки);

		ПараметрыБлокировки						= БРСВР_ТекущиеПараметрыБлокировки();
		ПараметрыБлокировки.ПроверятьИмяСервера	= ПараметрыБлокировки.ПроверятьИмяСервера;
		БРСВР_СохранитьПараметрыБлокировки(ПараметрыБлокировки);

		Если БазоваяПодсистемаСервер.ОН_ИнформационнаяБазаФайловая() Тогда
			БРСВР_ЗаписатьИдентификаторФайловойБазыВФайлПроверки(ПараметрыБлокировки.ИдентификаторБазы);
		КонецЕсли;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

	// Зарезервировано для новых подсистем

	ПараметрыСеанса.РаботаСВнешнимиРесурсамиЗаблокирована = Ложь;

	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры

Процедура БРСВР_ЗапретитьРаботуСВнешнимиРесурсами() Экспорт
	НачатьТранзакцию();
	Попытка
		ИдентификаторИнформационнойБазы = Новый УникальныйИдентификатор;
		Константы.ИдентификаторИнформационнойБазы.Установить(Строка(ИдентификаторИнформационнойБазы));

		БРСВР_ЗаблокироватьДанныеПараметровБлокировки();

		ПараметрыБлокировки											= БРСВР_СохраненныеПараметрыБлокировки();
		ПараметрыБлокировки.ИдентификаторБазы						= ИдентификаторИнформационнойБазы;
		ПараметрыБлокировки.РаботаСВнешнимиРесурсамиЗаблокирована	= Истина;
		БРСВР_СохранитьПараметрыБлокировки(ПараметрыБлокировки);

		Если БазоваяПодсистемаСервер.ОН_ИнформационнаяБазаФайловая() Тогда
			БРСВР_ЗаписатьИдентификаторФайловойБазыВФайлПроверки(ПараметрыБлокировки.ИдентификаторБазы);
		КонецЕсли;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

	// Зарезервировано для новых подсистем

	ПараметрыСеанса.РаботаСВнешнимиРесурсамиЗаблокирована = Истина;

	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры

Процедура БРСВР_УстановитьПроверкуИмениСервераВПараметрыБлокировки(ПроверятьИмяСервера) Экспорт
	НачатьТранзакцию();
	Попытка
		БРСВР_ЗаблокироватьДанныеПараметровБлокировки();

		ПараметрыБлокировки						= БРСВР_СохраненныеПараметрыБлокировки();
		ПараметрыБлокировки.ПроверятьИмяСервера	= ПроверятьИмяСервера;
		БРСВР_СохранитьПараметрыБлокировки(ПараметрыБлокировки);

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

Процедура БРСВР_ВключитьОтключенныеРегламентныеЗадания(ПараметрыБлокировки)
	Для Каждого ИдентификаторЗадания Из ПараметрыБлокировки.ОтключенныеЗадания Цикл
			Отбор							= Новый Структура("УникальныйИдентификатор");
			Отбор.УникальныйИдентификатор	= ИдентификаторЗадания;
			НайденныеЗадания				= РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);

			Для Каждого ОтключенноеЗадание Из НайденныеЗадания Цикл
				ОтключенноеЗадание.Использование	= Истина;
				ОтключенноеЗадание.Записать();
			КонецЦикла;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

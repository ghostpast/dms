///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////


&НаКлиенте
Перем ОбработчикПослеФормированияНаКлиенте Экспорт;
&НаКлиенте
Перем ВыполнятьЗамеры;
&НаКлиенте
Перем ИдентификаторЗамера;
&НаКлиенте
Перем Непосредственно;
&НаКлиенте
Перем ФормированиеПриОткрытии;
&НаКлиенте
Перем ИнтервалОжидания;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОпределитьПоведениеВМобильномКлиенте();

	// Определение ключевых параметров отчета.
	РежимРасшифровки	= (Параметры.Свойство("Расшифровка") И Параметры.Расшифровка <> Неопределено);
	ПравоВывода			= ПравоДоступа("Вывод", Метаданные);

	ОтчетОбъект     = РеквизитФормыВЗначение("Отчет");
	ОтчетМетаданные = ОтчетОбъект.Метаданные();
	ОтчетПолноеИмя  = ОтчетМетаданные.ПолноеИмя();

	ПредопределенныеВарианты = Новый СписокЗначений;
	Если ОтчетОбъект.СхемаКомпоновкиДанных <> Неопределено Тогда
		Для Каждого Вариант Из ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек Цикл
			ПредопределенныеВарианты.Добавить(Вариант.Имя, Вариант.Представление);
		КонецЦикла;
	КонецЕсли;

	КонтекстВарианта = КонтекстВариантаОтчета();
	УстановитьКлючНазначенияИспользования();
	СохранитьПараметрыФормы();
	УстановитьКлючТекущегоВарианта(ОтчетПолноеИмя, ПредопределенныеВарианты);

	// Определение настроек отчета.
	ТипОтчетаСтрокой = ВариантыОтчетовСервер.ВО_ТипОтчетаСтрокой(Параметры.Отчет);
	Если ТипОтчетаСтрокой = Неопределено Тогда
		Информация      = ВариантыОтчетовСервер.ВО_ИнформацияОбОтчете(ОтчетПолноеИмя, Истина);
		Параметры.Отчет = Информация.Отчет;
	КонецЕсли;

	НастройкиОтчета = НастройкиОтчета(ОтчетОбъект, ОтчетМетаданные, ОтчетПолноеИмя, ПредопределенныеВарианты);

	ОбновитьИнформациюОВариантеОтчета();
	БазоваяПодсистемаКлиентСервер.ОН_ДополнитьСтруктуру(НастройкиОтчета, ВариантыОтчетовСервер.ВО_ПараметрыКлиента());

	НастройкиОтчета.Вставить("ПрочитатьФлажокФормироватьСразуИзПользовательскихНастроек", Истина);
	Если Параметры.Свойство("СформироватьПриОткрытии") И Параметры.СформироватьПриОткрытии = Истина Тогда
		Параметры.СформироватьПриОткрытии = Ложь;
		Элементы.ФормироватьСразу.Пометка = Истина;
		НастройкиОтчета.ПрочитатьФлажокФормироватьСразуИзПользовательскихНастроек = Ложь;
	КонецЕсли;

	Если БазоваяПодсистемаСервер.ОН_ЭтоВебКлиент() Тогда
		Элементы.ПредварительныйПросмотр.Видимость = Ложь;
	КонецЕсли;

	// Параметры по умолчанию.
	Если Не БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(НастройкиОтчета, "ВыводитьСуммуВыделенныхЯчеек", Истина) Тогда
		Элементы.ГруппаПоказатель.Видимость = Ложь;
		Элементы.ОбластьПоказателей.Видимость = Ложь;
		Элементы.КомандыВидовПоказателейЕще.Видимость = Ложь;
	КонецЕсли;

	УстановитьРазрешенияПользователя();

	// Регистрация команд и реквизитов формы, которые не удаляются при перезаполнении быстрых настроек.
	НаборРеквизитов = ПолучитьРеквизиты();
	Для Каждого Реквизит Из НаборРеквизитов Цикл
		ПолноеИмяРеквизита = Реквизит.Имя + ?(ПустаяСтрока(Реквизит.Путь), "", "." + Реквизит.Путь);
		ПостоянныеРеквизиты.Добавить(ПолноеИмяРеквизита);
	КонецЦикла;

	Для Каждого Команда Из Команды Цикл
		ПостоянныеКоманды.Добавить(Команда.Имя);
	КонецЦикла;

	Если Не ВариантыОтчетовСервер.сВО_РежимВариантаОтчета(КлючТекущегоВарианта) Тогда
		УстановитьВидимостьДоступность();
	КонецЕсли;

	ПроверитьДоступностьОбменаНастройкамиВарианта(ОтчетМетаданные);

	// Зарезервировано для новых подсистем

	Элементы.ГруппаОтправить.Видимость = Ложь;

	// Определение, что отчет может содержать некорректные данные.
	Если Не Элементы.ФормироватьСразу.Пометка Тогда
		Попытка
			ИспользуемыеТаблицы = ВариантыОтчетовСервер.ВО_ИспользуемыеТаблицы(ОтчетОбъект.СхемаКомпоновкиДанных);
			ИспользуемыеТаблицы.Добавить(НастройкиОтчета.ПолноеИмя);

			Если НастройкиОтчета.События.ПриОпределенииИспользуемыхТаблиц Тогда
				ОтчетОбъект.ПриОпределенииИспользуемыхТаблиц(КлючТекущегоВарианта, ИспользуемыеТаблицы);
			КонецЕсли;

			ВариантыОтчетовСервер.ВО_ПроверитьИспользуемыеТаблицы(ИспользуемыеТаблицы);
		Исключение
			ТекстОшибки = НСтр("ru = 'Не удалось определить используемые таблицы:'");
			ТекстОшибки = ТекстОшибки + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВариантыОтчетовСервер.ВО_ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстОшибки, НастройкиОтчета.ВариантСсылка);
		КонецПопытки;
	КонецЕсли;

	ВариантыОтчетовКлиентСервер.О_ОтобразитьСостояниеОтчета(ЭтотОбъект, "Отчет не сформирован. Нажмите ""Сформировать"" для получения отчета.");

	ИнтеграцияПодсистемСервер.ПриСозданииНаСервереВариантыОтчетов(ЭтотОбъект, Отказ, СтандартнаяОбработка);

	Если НастройкиОтчета.События.ПриСозданииНаСервере Тогда
		ОтчетОбъект.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	КонецЕсли;

	Элементы.ПраваПользователей.Видимость = Ложь;
	// Зарезервировано для новых подсистем
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ВыполнятьЗамеры = Ложь;

	// В безопасном режиме доп. отчеты формируются непосредственно,
	// т.к. они не могут подключать себя и использовать собственные методы в фоновых заданиях.
	Непосредственно	= НастройкиОтчета.Внешний Или НастройкиОтчета.Безопасный;
	ФормированиеПриОткрытии = Ложь;
	ИнтервалОжидания	= ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);

	Если Элементы.ФормироватьСразу.Пометка Тогда
		ФормированиеПриОткрытии = Истина;
		ПодключитьОбработчикОжидания("Сформировать", 0.1, Истина);
	Иначе
		СброситьТекущуюОбласть();
	КонецЕсли;

	БазоваяПодсистемаКлиент.сОН_УстановитьВидимостьПанелиПоказателей(Элементы, РазвернутьОбластьПоказателей);
	БазоваяПодсистемаКлиент.сОН_РассчитатьПоказатели(ЭтотОбъект, "ОтчетТабличныйДокумент", ОсновнойПоказатель);

	ПодключитьОбработчикОжидания("ОпределитьПоведениеНаНачальнойСтранице", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(Результат, ПодчиненнаяФорма)
	РезультатОбработан = Ложь;

	// Приемка результата из стандартных форм.
	Если ТипЗнч(ПодчиненнаяФорма) = Тип("ФормаКлиентскогоПриложения") Тогда
		ИмяПодчиненнойФормы = ПодчиненнаяФорма.ИмяФормы;
		Если ИмяПодчиненнойФормы = "ХранилищеНастроек.ХранилищеВариантовОтчетов.Форма.НастройкиОтчета" Или ПодчиненнаяФорма.ОписаниеОповещенияОЗакрытии <> Неопределено Тогда
			РезультатОбработан = Истина; // См. ВсеНастройкиЗавершение.
		ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
			ПозицияТочки = СтрДлина(ИмяПодчиненнойФормы);
			Пока КодСимвола(ИмяПодчиненнойФормы, ПозицияТочки) <> 46 Цикл // Не точка.
				ПозицияТочки = ПозицияТочки - 1;
			КонецЦикла;

			СуффиксФормыИсточника = ВРег(Сред(ИмяПодчиненнойФормы, ПозицияТочки + 1));
			Если СуффиксФормыИсточника = ВРег("ФормаНастроекОтчета") Или СуффиксФормыИсточника = ВРег("ФормаНастроек") Или СуффиксФормыИсточника = ВРег("ФормаВариантаОтчета") Или СуффиксФормыИсточника = ВРег("ФормаВарианта") Тогда
				ОбновитьЭлементыФормыНастроек(Результат);
				РезультатОбработан = Истина;
			КонецЕсли;
		КонецЕсли;

		ПрименитьНастройкиИзКонтекстногоМеню(Результат);
	ИначеЕсли ТипЗнч(ПодчиненнаяФорма) = Тип("КонструкторСхемыКомпоновкиДанных") Тогда
		ПрименитьСхемуИзКонструктора(Результат);
	КонецЕсли;

	// Механизмы расширения.
	// Зарезервировано для новых подсистем
	ИнтеграцияПодсистемКлиент.ПриОбработкеВыбора(ЭтотОбъект, Результат, ПодчиненнаяФорма, РезультатОбработан);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ОповещениеОбработано = Ложь;

	Если ИмяСобытия = "Запись_НаборКонстант" Тогда
		ОповещениеОбработано				= Истина;
		ВариантыПанелиКлючТекущегоВарианта	= ПустойКлючВарианта();
	ИначеЕсли ИмяСобытия = "Запись_ВариантыОтчетов" Тогда
		ОповещениеОбработано		= Истина;
		КлючВарианта				= Неопределено;
		НастройкиОтчета.КлючСхемы	= "";

		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			Параметр.Свойство("КлючВарианта", КлючВарианта);
		КонецЕсли;

		Если ЗначениеЗаполнено(КлючВарианта) Тогда
			УстановитьТекущийВариант(КлючВарианта);
		Иначе
			ВариантыПанелиКлючТекущегоВарианта = ПустойКлючВарианта();
		КонецЕсли;

	ИначеЕсли ИмяСобытия = "ПрименитьПереданныеНастройки" Тогда
		ОповещениеОбработано = Истина;
		ПрименитьПереданныеНастройки(Параметр);
	КонецЕсли;

	ПрименитьНастройкиИзКонтекстногоМеню(Параметр);

	ИнтеграцияПодсистемКлиент.ПриОбработкеОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник, ОповещениеОбработано);
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойВариантаНаСервере(НовыеНастройкиКД)
	// Ничего не делать если отчет не на СКД и никаких настроек не загружено.
	Если НовыеНастройкиКД = Неопределено Или Не ВариантыОтчетовСервер.сВО_РежимВариантаОтчета(КлючТекущегоВарианта) Тогда
		Возврат;
	КонецЕсли;

	Если РежимРасшифровки Тогда
		ДополнительныеСвойства = НовыеНастройкиКД.ДополнительныеСвойства;

		Если ДополнительныеСвойства.Свойство("КлючВарианта") И ЗначениеЗаполнено(ДополнительныеСвойства.КлючВарианта) И ЗначениеЗаполнено(КлючТекущегоВарианта) И ДополнительныеСвойства.КлючВарианта <> КлючТекущегоВарианта Тогда
			ДополнительныеСвойства.Вставить("КлючВарианта", КлючТекущегоВарианта);
		КонецЕсли;
	КонецЕсли;

	ИнтеграцияПодсистемСервер.ПередЗагрузкойВариантаНаСервере(ЭтотОбъект, НовыеНастройкиКД);

	Если НастройкиОтчета.События.ПередЗагрузкойВариантаНаСервере Тогда
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
		ОтчетОбъект.ПередЗагрузкойВариантаНаСервере(ЭтотОбъект, НовыеНастройкиКД);
	КонецЕсли;

	// Подготовка к вызову события переинициализации.
	Если НастройкиОтчета.События.ПередЗагрузкойНастроекВКомпоновщик Тогда
		Попытка
			НовыеНастройкиXML = БазоваяПодсистемаСервер.ОН_ЗначениеВСтрокуXML(НовыеНастройкиКД);
		Исключение
			НовыеНастройкиXML = Неопределено;
		КонецПопытки;
		НастройкиОтчета.Вставить("НовыеНастройкиXML", НовыеНастройкиXML);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(НовыеНастройкиКД)
	// Ничего не делать если отчет не на СКД и никаких настроек не загружено.
	Если Не ВариантыОтчетовСервер.сВО_РежимВариантаОтчета(КлючТекущегоВарианта) И НовыеНастройкиКД = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Загрузка фиксированных настроек для режима расшифровки.
	Если РежимРасшифровки Тогда
		ОтчетНаименованиеТекущегоВарианта = БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(НовыеНастройкиКД.ДополнительныеСвойства, "ВариантНаименование");

		Если Параметры <> Неопределено И Параметры.Свойство("Расшифровка") И ТипЗнч(Параметры.Расшифровка) = Тип("ОписаниеОбработкиРасшифровкиКомпоновкиДанных") Тогда
			Отчет.КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(Параметры.Расшифровка.ПрименяемыеНастройки);
			Отчет.КомпоновщикНастроек.ФиксированныеНастройки.ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
		КонецЕсли;

		Если КлючТекущегоВарианта = Неопределено Тогда
			КлючТекущегоВарианта = БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(НовыеНастройкиКД.ДополнительныеСвойства, "КлючВарианта");
		КонецЕсли;
	КонецЕсли;

	// Установка фиксированных отборов выполняется через компоновщик, т.к. в нем наиболее полная коллекция настроек.
	// В ПередЗагрузкой в параметрах могут отсутствовать те параметры, настройки которых не переопределялись.
	Если ТипЗнч(ФормаПараметры.Отбор) = Тип("Структура") Тогда
		ВариантыОтчетовСервер.О_УстановитьФиксированныеОтборы(ФормаПараметры.Отбор, Отчет.КомпоновщикНастроек.Настройки, НастройкиОтчета);
	КонецЕсли;

	// Обновление ссылки варианта отчета.
	Если ВариантыПанелиКлючТекущегоВарианта <> КлючТекущегоВарианта Тогда
		ОбновитьИнформациюОВариантеОтчета();
	КонецЕсли;

	Если НастройкиОтчета.События.ПриЗагрузкеВариантаНаСервере Тогда
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
		ОтчетОбъект.ПриЗагрузкеВариантаНаСервере(ЭтотОбъект, НовыеНастройкиКД);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойПользовательскихНастроекНаСервере(НовыеПользовательскиеНастройкиКД)
	Если НастройкиОтчета.События.ПередЗагрузкойНастроекВКомпоновщик Тогда
		// Подготовка к переинициализации.
		Попытка
			НовыеПользовательскиеНастройкиXML = БазоваяПодсистемаСервер.ОН_ЗначениеВСтрокуXML(НовыеПользовательскиеНастройкиКД);
		Исключение
			НовыеПользовательскиеНастройкиXML = Неопределено;
		КонецПопытки;
		НастройкиОтчета.Вставить("НовыеПользовательскиеНастройкиXML", НовыеПользовательскиеНастройкиXML);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(НовыеПользовательскиеНастройкиКД)
	Если Не ВариантыОтчетовСервер.сВО_РежимВариантаОтчета(КлючТекущегоВарианта) Тогда
		Возврат;
	КонецЕсли;

	Если НастройкиОтчета.События.ПриЗагрузкеПользовательскихНастроекНаСервере Тогда
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
		ОтчетОбъект.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтотОбъект, НовыеПользовательскиеНастройкиКД);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	Если Не ВариантыОтчетовСервер.сВО_РежимВариантаОтчета(КлючТекущегоВарианта) Тогда
		Возврат;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

	ПараметрыОбновления = Новый Структура("ИмяСобытия", "ПриОбновленииСоставаПользовательскихНастроекНаСервере");
	ОбновитьЭлементыФормыНастроекНаСервере(ПараметрыОбновления);
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Если Не ВариантыОтчетовСервер.сВО_РежимВариантаОтчета(КлючТекущегоВарианта) Тогда
		Возврат;
	КонецЕсли;

	ЭлементыНастроек = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	Для Каждого ЭлементНастройки Из ЭлементыНастроек Цикл
		Если ТипЗнч(ЭлементНастройки) <> Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Или ТипЗнч(ЭлементНастройки.Значение) <> Тип("СтандартныйПериод") Или Не ЭлементНастройки.Использование Тогда
			Продолжить;
		КонецЕсли;

		ШаблонИмени = ПутьКДаннымЭлементов.ПоИндексу[ЭлементыНастроек.Индекс(ЭлементНастройки)];
		Если ШаблонИмени = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ДатаНачала		= Элементы.Найти(ШаблонИмени + "ДатаНачала");
		ДатаОкончания	= Элементы.Найти(ШаблонИмени + "ДатаОкончания");
		Если ДатаНачала = Неопределено Или ДатаОкончания = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Значение = ЭлементНастройки.Значение; // СтандартныйПериод
		Если ДатаНачала.АвтоОтметкаНезаполненного = Истина И Не ЗначениеЗаполнено(Значение.ДатаНачала) И Не ЗначениеЗаполнено(Значение.ДатаОкончания) Тогда
			ТекстОшибки = "Не указан период";
			ПутьКДанным = ДатаНачала.ПутьКДанным;
		ИначеЕсли Значение.ДатаНачала > Значение.ДатаОкончания Тогда
			ТекстОшибки = "Конец периода должен быть больше начала";
			ПутьКДанным = ДатаОкончания.ПутьКДанным;
		Иначе
			Продолжить;
		КонецЕсли;

		БазоваяПодсистемаСервер.ОН_СообщитьПользователю(ТекстОшибки,, ПутьКДанным,, Отказ);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииВариантаНаСервере(НастройкиКД)
	Если Не ВариантыОтчетовСервер.сВО_РежимВариантаОтчета(КлючТекущегоВарианта) Тогда
		Возврат;
	КонецЕсли;

	НовыеНастройкиКД					= Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	ВариантыОтчетовКлиентСервер.О_ЗагрузитьНастройки(Отчет.КомпоновщикНастроек, НовыеНастройкиКД);
	НастройкиКД.ДополнительныеСвойства.Вставить("Адрес", ПоместитьВоВременноеХранилище(НовыеНастройкиКД));
	НастройкиКД							= НовыеНастройкиКД;
	ВариантыПанелиКлючТекущегоВарианта	= ПустойКлючВарианта();
	ОбновитьИнформациюОВариантеОтчета();
	УстановитьВидимостьДоступность(Истина);
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(ПользовательскиеНастройкиКД)
	Если Не ВариантыОтчетовСервер.сВО_РежимВариантаОтчета(КлючТекущегоВарианта) Тогда
		Возврат;
	КонецЕсли;

	ВариантыОтчетовСервер.ВО_ПриСохраненииПользовательскихНастроекНаСервере(ЭтотОбъект, ПользовательскиеНастройкиКД);
	ОбновитьКомандыВыбораВариантов();
КонецПроцедуры

&НаКлиенте
Процедура ОтчетТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	ОбработкаРасшифровки = Ложь;

	Если СтандартнаяОбработка Тогда
		ИнтеграцияПодсистемКлиент.ПриОбработкеВыбораТабличногоДокумента(ЭтотОбъект, Элемент, Область, СтандартнаяОбработка);
	КонецЕсли;

	Если Не ОбработкаРасшифровки И СтандартнаяОбработка И ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		Если ПерейтиПоСсылке(Область.Текст) Тогда
			СтандартнаяОбработка = Ложь;

			Возврат;
		КонецЕсли;

		Попытка
			ЗначениеРасшифровки = Область.Расшифровка;
		Исключение
			ЗначениеРасшифровки = Неопределено;
			// Для некоторых типов областей табличного документа (свойство ТипОбласти)
			// чтение расшифровки недоступно, поэтому делается попытка-исключение.
		КонецПопытки;

		Если ЗначениеРасшифровки <> Неопределено И ПерейтиПоСсылке(ЗначениеРасшифровки) Тогда
			СтандартнаяОбработка = Ложь;

			Возврат;
		КонецЕсли;

		Если ПерейтиПоСсылке(Область.Маска) Тогда
			СтандартнаяОбработка = Ложь;

			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если Не ОбработкаРасшифровки И СтандартнаяОбработка Тогда
		ВариантыОтчетовКлиент.сВО_ПоказатьКонтекстнуюНастройкуОтчета(ЭтотОбъект, Элемент, Область, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	ИнтеграцияПодсистемКлиент.ПриОбработкеРасшифровки(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка);

	Если СтандартнаяОбработка Тогда
		ВариантыОтчетовКлиент.сВО_ОбработкаРасшифровки(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетТабличныйДокументОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	// Зарезервировано для новых подсистем

	ИнтеграцияПодсистемКлиент.ПриОбработкеДополнительнойРасшифровки(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка);

	Если СтандартнаяОбработка Тогда
		Данные = ДанныеЭлементаРасшифровки(Расшифровка);
		ВариантыОтчетовКлиент.сВО_ОбработкаДополнительнойРасшифровки(ЭтотОбъект, Данные, Элемент, Расшифровка, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетТабличныйДокументПриАктивизации(Элемент)
#Если ВебКлиент Тогда
	ПодключитьОбработчикОжидания("ПодготовитьКомандыКонтекстнойНастройки", 0.1, Истина);
#Иначе
	ПодготовитьКомандыКонтекстнойНастройки();
#КонецЕсли

	ПодключитьОбработчикОжидания("РассчитатьПоказателиДинамически", 0.2, Истина);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлементНастройки_ПриИзменении(Элемент)
	КомпоновщикНастроек = Отчет.КомпоновщикНастроек;

	Индекс = ПутьКДаннымЭлементов.ПоИмени[Элемент.Имя];
	Если Индекс = Неопределено Тогда
		Индекс = ВариантыОтчетовКлиентСервер.О_ИндексЭлементаНастройкиПоПути(Элемент.Имя);
	КонецЕсли;

	ЭлементНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[Индекс];

	ЭтоФлажок = СтрНачинаетсяС(Элемент.Имя, "Флажок") Или СтрЗаканчиваетсяНа(Элемент.Имя, "Флажок");
	Если ЭтоФлажок Тогда
		ЭлементНастройки.Значение = ЭтотОбъект[Элемент.Имя];
	КонецЕсли;

	Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И НастройкиОтчета.ЗагрузитьНастройкиПриИзмененииПараметров.Найти(ЭлементНастройки.Параметр) <> Неопределено Тогда
		КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ОтчетИнициализирован", Ложь);

		ПараметрыОбновления = Новый Структура;
		ПараметрыОбновления.Вставить("КомпоновщикНастроекКД",					КомпоновщикНастроек);
		ПараметрыОбновления.Вставить("ПользовательскиеНастройкиМодифицированы",	Истина);

		ОбновитьЭлементыФормыНастроек(ПараметрыОбновления);
	КонецЕсли;

	ВариантыОтчетовКлиентСервер.О_ОповеститьОИзмененииНастроек(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлементНастройки_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПоказатьСписокВыбора(Элемент, СтандартнаяОбработка)
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Период_ПриИзменении(Элемент)
	ВариантыОтчетовКлиент.О_УстановитьПериод(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыбратьПериод(Команда)
	ВариантыОтчетовКлиент.О_ВыбратьПериод(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВсеНастройки(Команда)
	Имя = НастройкиОтчета.ПолноеИмя + ".ФормаНастроек";

	ПараметрыФормы = Новый Структура;
	БазоваяПодсистемаКлиентСервер.ОН_ДополнитьСтруктуру(ПараметрыФормы, ФормаПараметры, Истина);
	ПараметрыФормы.Вставить("КлючВарианта",					Строка(КлючТекущегоВарианта));
	ПараметрыФормы.Вставить("Вариант",						Отчет.КомпоновщикНастроек.Настройки);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки",	Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("НастройкиОтчета",				НастройкиОтчета);
	ПараметрыФормы.Вставить("ВариантНаименование",			Строка(ОтчетНаименованиеТекущегоВарианта));

	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;

	Обработчик = Новый ОписаниеОповещения("ВсеНастройкиЗавершение", ЭтотОбъект);

	// Зарезервировано для новых подсистем

	ОткрытьФорму(Имя, ПараметрыФормы, ЭтотОбъект, , , , Обработчик, Режим);

	// Зарезервировано для новых подсистем
КонецПроцедуры

&НаКлиенте
Процедура ВсеНастройкиЗавершение(Результат, ПараметрыВыполнения) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НастройкиОтчета.Вставить("РезультатНастройки", Результат);
	ПодключитьОбработчикОжидания("ОбновитьЭлементыФормыНастроекОтложенно", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВариантОтчета(Команда)
	ПараметрыФормы = Новый Структура;
	БазоваяПодсистемаКлиентСервер.ОН_ДополнитьСтруктуру(ПараметрыФормы, ФормаПараметры, Истина);
	ПараметрыФормы.Вставить("НастройкиОтчета",							НастройкиОтчета);
	ПараметрыФормы.Вставить("Вариант",									Отчет.КомпоновщикНастроек.Настройки);
	ПараметрыФормы.Вставить("КлючВарианта",								Строка(КлючТекущегоВарианта));
	ПараметрыФормы.Вставить("ПользовательскиеНастройки",				Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("ПредставлениеВарианта",					Строка(ОтчетНаименованиеТекущегоВарианта));
	ПараметрыФормы.Вставить("ПредставлениеПользовательскихНастроек",	"");

	ОткрытьФорму(НастройкиОтчета.ПолноеИмя + ".ФормаВарианта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоУмолчанию(Команда)
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ИмяСобытия", "НастройкиПоУмолчанию");

	Если ВариантМодифицирован Тогда
		ПараметрыЗаполнения.Вставить("СброситьНастройкиВарианта",	Истина);
		ПараметрыЗаполнения.Вставить("ВариантМодифицирован",		Ложь);
	КонецЕсли;

	ПараметрыЗаполнения.Вставить("СброситьПользовательскиеНастройки",		Истина);
	ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы",	Истина);

	ОбновитьЭлементыФормыНастроек(ПараметрыЗаполнения);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоПочте(Команда)
	ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
	Если ОтображениеСостояния.Видимость = Истина И ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность Тогда
		ТекстВопроса	= "Отчет не сформирован. Сформировать?";
		Обработчик		= Новый ОписаниеОповещения("СформироватьПередОтправкойПоПочте", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	Иначе
		ПоказатьДиалогОтправкиПоПочте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетСкомпоноватьРезультат(Команда)
	ОчиститьСообщения();
	Сформировать();
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьСразу(Команда)
	ФормироватьСразу					= Не Элементы.ФормироватьСразу.Пометка;
	Элементы.ФормироватьСразу.Пометка	= ФормироватьСразу;

	СостояниеДоИзменения = Новый Структура("Видимость, ДополнительныйРежимОтображения, Картинка, Текст");
	ЗаполнитьЗначенияСвойств(СостояниеДоИзменения, Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния);

	Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ФормироватьСразу", ФормироватьСразу);
	ПользовательскиеНастройкиМодифицированы = Истина;

	ЗаполнитьЗначенияСвойств(Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния, СостояниеДоИзменения);
КонецПроцедуры

&НаКлиенте
Процедура ДругиеОтчеты(Команда)
	ОписаниеНастроекОтчета = ОписаниеНастроекОтчета(НастройкиОтчета);

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВариантСсылка",		НастройкиОтчета.ВариантСсылка);
	ПараметрыФормы.Вставить("ОтчетСсылка",			НастройкиОтчета.ОтчетСсылка);
	ПараметрыФормы.Вставить("ПодсистемаСсылка",		ФормаПараметры.Подсистема);
	ПараметрыФормы.Вставить("ОтчетНаименование",	ОписаниеНастроекОтчета.Наименование);

	Блокировать = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;

	ОткрытьФорму("ХранилищеНастроек.ХранилищеВариантовОтчетов.Форма.ПанельДругихОтчетов", ПараметрыФормы, ЭтотОбъект, Истина, , , , Блокировать);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСхему(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьСхемуПослеПомещенияФайла", ЭтотОбъект);

	ПараметрыЗагрузки						= БазоваяПодсистемаКлиент.ФС_ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.Диалог.Фильтр			= "Файлы XML (*.xml) |*.xml";
	ПараметрыЗагрузки.ИдентификаторФормы	= УникальныйИдентификатор;

	БазоваяПодсистемаКлиент.ФС_ЗагрузитьФайл(ОписаниеОповещения, ПараметрыЗагрузки);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСхему(Команда)
#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(НастройкиОтчета.АдресСхемы);

	Если СхемаКомпоновкиДанных.НастройкиПоУмолчанию.ДополнительныеСвойства.Свойство("СхемаКомпоновкиДанных") Тогда
		СхемаКомпоновкиДанных.НастройкиПоУмолчанию.ДополнительныеСвойства.СхемаКомпоновкиДанных = Неопределено;
	КонецЕсли;

	Конструктор = Новый КонструкторСхемыКомпоновкиДанных(СхемаКомпоновкиДанных);
	Конструктор.Редактировать(ЭтотОбъект);
#Иначе
	ПоказатьПредупреждение(, "Для того чтобы редактировать схему компоновки, необходимо запустить приложение в режиме толстого клиента.");
#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьСтандартнуюСхему(Команда)
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Очистить();

	ПараметрыДанных			= Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы;
	ИменаПараметровКОчистке	= СтрРазделить("ТипОбъектаМетаданных, ИмяОбъектаМетаданных, ИмяТаблицы", ", ", Ложь);
	Для Каждого ИмяПараметра Из ИменаПараметровКОчистке Цикл
		НайденныйПараметр = ПараметрыДанных.Найти(ИмяПараметра);
		Если НайденныйПараметр <> Неопределено Тогда
			НайденныйПараметр.Значение = Неопределено;
		КонецЕсли;
	КонецЦикла;

	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("КомпоновщикНастроекКД",					Отчет.КомпоновщикНастроек);
	ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы",	Истина);

	ОбновитьЭлементыФормыНастроек(ПараметрыЗаполнения);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВариантОтчетаВФайл(Команда)
	ПараметрыСохранения = Новый Структура(ВариантыОтчетовКлиентСервер.ВО_СвойстваСохраненияВариантаОтчета());
	ЗаполнитьЗначенияСвойств(ПараметрыСохранения, ЭтотОбъект);

	ПараметрыСохранения.ВариантОтчета			= НастройкиОтчета.ВариантСсылка;
	ПараметрыСохранения.ИмяОтчета				= НастройкиОтчета.ПолноеИмя;
	ПараметрыСохранения.НастройкиВариантаОтчета	= Отчет.КомпоновщикНастроек.Настройки;

	ОткрытьФорму("ХранилищеНастроек.ХранилищеВариантовОтчетов.Форма.СохранениеВариантаОтчетаВФайл", ПараметрыСохранения, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВариантОтчетаИзФайла(Команда)
	СвойстваВариантаОтчета							= Новый Структура("Ссылка, ИмяОтчета, ПредставлениеВарианта");
	СвойстваВариантаОтчета.Ссылка					= НастройкиОтчета.ВариантСсылка;
	СвойстваВариантаОтчета.ИмяОтчета				= НастройкиОтчета.ПолноеИмя;
	СвойстваВариантаОтчета.ПредставлениеВарианта	= ПредставлениеТекущегоВарианта;

	Обработчик = Новый ОписаниеОповещения("ВО_ОбновитьВариантОтчетаИзФайла", ВариантыОтчетовКлиент, СвойстваВариантаОтчета);

	ПараметрыЗагрузки						= БазоваяПодсистемаКлиент.ФС_ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.Диалог.Фильтр			= "Архив ZIP (*.zip)|*.zip";
	ПараметрыЗагрузки.ИдентификаторФормы	= УникальныйИдентификатор;

	БазоваяПодсистемаКлиент.ФС_ЗагрузитьФайл(Обработчик, ПараметрыЗагрузки);
КонецПроцедуры

&НаКлиенте
Процедура ПоделитьсяНастройками(Команда)
	ОписаниеНастроек = Новый Структура;
	ОписаниеНастроек.Вставить("ВариантОтчета",			НастройкиОтчета.ВариантСсылка);
	ОписаниеНастроек.Вставить("КлючОбъекта",			НастройкиОтчета.ПолноеИмя + "/" + КлючТекущегоВарианта);
	ОписаниеНастроек.Вставить("КлючНастроек",			КлючТекущихПользовательскихНастроек);
	ОписаниеНастроек.Вставить("Представление",			ПредставлениеТекущихПользовательскихНастроек);
	ОписаниеНастроек.Вставить("Настройки",				Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	ОписаниеНастроек.Вставить("ВариантМодифицирован",	ВариантМодифицирован);

	ВариантыОтчетовКлиент.ВО_ПоделитьсяПользовательскимиНастройками(ОписаниеНастроек);
КонецПроцедуры

&НаКлиенте
Процедура ВставитьПолеСправа(Команда)
	ВариантыОтчетовКлиент.сВО_ВыбратьПолеОтчетаИзМеню(ЭтотОбъект, Команда);
КонецПроцедуры

&НаКлиенте
Процедура ВставитьГруппировкуНиже(Команда)
	ВариантыОтчетовКлиент.сВО_ВыбратьПолеОтчетаИзМеню(ЭтотОбъект, Команда);
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьПолеВлево(Команда)
	ВариантыОтчетовКлиент.сВО_ПереместитьПолеГоризонтально(ЭтотОбъект, Команда);
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьПолеВправо(Команда)
	ВариантыОтчетовКлиент.сВО_ПереместитьПолеГоризонтально(ЭтотОбъект, Команда);
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьПолеВыше(Команда)
	ВариантыОтчетовКлиент.сВО_ПереместитьПолеВертикально(ЭтотОбъект, Команда);
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьПолеНиже(Команда)
	ВариантыОтчетовКлиент.сВО_ПереместитьПолеВертикально(ЭтотОбъект, Команда);
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоле(Команда)
	ВариантыОтчетовКлиент.сВО_СкрытьПоле(ЭтотОбъект, Команда);
КонецПроцедуры

&НаКлиенте
Процедура ПереименоватьПоле(Команда)
	ВариантыОтчетовКлиент.сВО_ПереименоватьПоле(ЭтотОбъект, Команда);
КонецПроцедуры

&НаКлиенте
Процедура СнятьФильтр(Команда)
	СвойстваРезультата	= НастройкиОтчета.СвойстваРезультата;
	СвойстваЗаголовка	= СвойстваРезультата.Заголовки[ИмяТекущейОбластиЯчеек()];
	ВариантыОтчетовКлиент.сВО_СнятьФильтр(ЭтотОбъект, СвойстваЗаголовка);
КонецПроцедуры

&НаКлиенте
Процедура Фильтровать(Команда)
	СвойстваРезультата	= НастройкиОтчета.СвойстваРезультата;
	СвойстваЗаголовка	= СвойстваРезультата.Заголовки[ИмяТекущейОбластиЯчеек()];
	ВариантыОтчетовКлиент.сВО_ПоказатьРасширеннуюНастройкуФильтра(ЭтотОбъект, СвойстваЗаголовка);
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоВозрастанию(Команда)
	ВариантыОтчетовКлиент.сВО_Сортировать(ЭтотОбъект, Команда);
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоУбыванию(Команда)
	ВариантыОтчетовКлиент.сВО_Сортировать(ЭтотОбъект, Команда);
КонецПроцедуры

&НаКлиенте
Процедура ОформитьОтрицательные(Команда)
	ВариантыОтчетовКлиент.сВО_ОформитьКрасным(ЭтотОбъект, Команда);
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПоложительные(Команда)
	ВариантыОтчетовКлиент.сВО_ОформитьЗеленым(ЭтотОбъект, Команда);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВысотуСтроки(Команда)
	ВариантыОтчетовКлиент.сВО_УстановитьВысотуСтроки(ЭтотОбъект, Команда);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьШиринуКолонки(Команда)
	ВариантыОтчетовКлиент.сВО_УстановитьШиринуКолонки(ЭтотОбъект, Команда);
КонецПроцедуры

&НаКлиенте
Процедура ОформитьЕще(Команда)
	ВариантыОтчетовКлиент.сВО_ОформитьЕще(ЭтотОбъект, Команда);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСумму(Команда)
	БазоваяПодсистемаКлиент.сОН_РассчитатьПоказатели(ЭтотОбъект, "ОтчетТабличныйДокумент", Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьКоличество(Команда)
	БазоваяПодсистемаКлиент.сОН_РассчитатьПоказатели(ЭтотОбъект, "ОтчетТабличныйДокумент", Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСреднее(Команда)
	БазоваяПодсистемаКлиент.сОН_РассчитатьПоказатели(ЭтотОбъект, "ОтчетТабличныйДокумент", Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьМинимум(Команда)
	БазоваяПодсистемаКлиент.сОН_РассчитатьПоказатели(ЭтотОбъект, "ОтчетТабличныйДокумент", Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьМаксимум(Команда)
	БазоваяПодсистемаКлиент.сОН_РассчитатьПоказатели(ЭтотОбъект, "ОтчетТабличныйДокумент", Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВсеПоказатели(Команда)
	БазоваяПодсистемаКлиент.сОН_УстановитьВидимостьПанелиПоказателей(Элементы, Не Элементы.РассчитатьВсеПоказатели.Пометка);
КонецПроцедуры

&НаКлиенте
Процедура СвернутьПоказатели(Команда)
	БазоваяПодсистемаКлиент.сОН_УстановитьВидимостьПанелиПоказателей(Элементы);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Команда(Команда)
	ПостояннаяКоманда = ПостоянныеКоманды.НайтиПоЗначению(Команда.Имя);
	Если ПостояннаяКоманда <> Неопределено И ЗначениеЗаполнено(ПостояннаяКоманда.Представление) Тогда
		МассивПодстрок		= СтрРазделить(ПостояннаяКоманда.Представление, ".");
		КлиентскийМодуль	= БазоваяПодсистемаКлиент.ОН_ОбщийМодуль(МассивПодстрок[0]);
		Обработчик			= Новый ОписаниеОповещения(МассивПодстрок[1], КлиентскийМодуль, Команда);
		ВыполнитьОбработкуОповещения(Обработчик, ЭтотОбъект);
	Иначе
		ИнтеграцияПодсистемКлиент.ПриОбработкеКоманды(ЭтотОбъект, Команда, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьВариантОтчета(Команда)
	Найденные = ДобавленныеВарианты.НайтиСтроки(Новый Структура("ИмяКоманды", Команда.Имя));
	Если Найденные.Количество() = 0 Тогда
		ПоказатьПредупреждение(, "Вариант отчета не существует.");

		Возврат;
	КонецЕсли;

	ВариантФормы = Найденные[0];
	НастройкиОтчета.Удалить("ФормаНастроекРасширенныйРежим");

	ЗагрузитьВариант(ВариантФормы.КлючВарианта);

	КлючУникальности = ВариантыОтчетовКлиентСервер.О_КлючУникальности(НастройкиОтчета.ПолноеИмя, ВариантФормы.КлючВарианта);

	Если Элементы.ФормироватьСразу.Пометка Тогда
		ПодключитьОбработчикОжидания("Сформировать", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоказатьУровеньГруппировок(Команда)
	УровеньГруппировкиСтрокой = СтрЗаменить(Команда.Имя, Элементы.КонтекстноеМенюОбластиОбщееПоказатьУровеньГруппировок.Имя, "");

	ОписаниеЧисла		= Новый ОписаниеТипов("Число");
	УровеньГруппировки	= ОписаниеЧисла.ПривестиЗначение(УровеньГруппировкиСтрокой);

	ПоказатьВыбранныйУровеньГруппировок(УровеньГруппировки);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьУсловияОтборов(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипФормыВладельца",	ТипФормыОтчета);
	ПараметрыФормы.Вставить("НастройкиОтчета",		НастройкиОтчета);
	ПараметрыФормы.Вставить("КомпоновщикНастроек",	Отчет.КомпоновщикНастроек);
	Обработчик = Новый ОписаниеОповещения("ИзменитьУсловияОтборовЗавершение", ЭтотОбъект);
	ОткрытьФорму("ХранилищеНастроек.ХранилищеВариантовОтчетов.Форма.УсловияОтборовОтчета", ПараметрыФормы, ЭтотОбъект, Истина,,, Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьУсловияОтборовЗавершение(УсловияОтборов, Контекст) Экспорт
	Если УсловияОтборов = Неопределено Или УсловияОтборов = КодВозвратаДиалога.Отмена Или УсловияОтборов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ИмяСобытия",								"ИзменитьУсловияОтборов");
	ПараметрыЗаполнения.Вставить("КомпоновщикНастроекКД",					Отчет.КомпоновщикНастроек);
	ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы",	Истина);
	ПараметрыЗаполнения.Вставить("УсловияОтборов",							УсловияОтборов);

	ОбновитьЭлементыФормыНастроек(ПараметрыЗаполнения);
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьПоведениеНаНачальнойСтранице()
	ОкноНачальнойСтраницы = Неопределено;

	ОкнаПрограммы = ПолучитьОкна();

	Для Каждого ОкноПрограммы Из ОкнаПрограммы Цикл
		Если ОкноПрограммы.НачальнаяСтраница Тогда
			ОкноНачальнойСтраницы = ОкноПрограммы;

			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если ОкноНачальнойСтраницы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ЭтоФормаНачальнойСтраницы = Ложь;

	Для Каждого ФормаНачальнойСтраницы Из ОкноНачальнойСтраницы.Содержимое Цикл
		Если ФормаНачальнойСтраницы.ИмяФормы = ИмяФормы И ФормаНачальнойСтраницы.КлючУникальности = КлючУникальности Тогда
			ЭтоФормаНачальнойСтраницы = Истина;

			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если Не ЭтоФормаНачальнойСтраницы Тогда
		Возврат;
	КонецЕсли;

	БазоваяПодсистемаКлиентСервер.ОН_УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСохранениеВыборВариантаОтчета",	"Видимость", Ложь);
	БазоваяПодсистемаКлиентСервер.ОН_УстановитьСвойствоЭлементаФормы(Элементы, "Найти",									"Видимость", Ложь);
	БазоваяПодсистемаКлиентСервер.ОН_УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаВывод",							"Видимость", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭлементыФормыНастроек(ПараметрыОбновления)
	ОбновитьЭлементыФормыНастроекНаСервере(ПараметрыОбновления);

	Если БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(ПараметрыОбновления, "Переформировать", Ложь) Тогда
		ОчиститьСообщения();
		Сформировать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭлементыФормыНастроекОтложенно()
	ОбновитьЭлементыФормыНастроек(НастройкиОтчета.РезультатНастройки);
	НастройкиОтчета.Удалить("РезультатНастройки");
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПередОтправкойПоПочте(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Обработчик = Новый ОписаниеОповещения("ОтправитьПоПочтеПослеФормирования", ЭтотОбъект);
		ВариантыОтчетовКлиент.О_СформироватьОтчет(ЭтотОбъект, Обработчик);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоПочтеПослеФормирования(ТабличныйДокументСформирован, ДополнительныеПараметры) Экспорт
	Если ТабличныйДокументСформирован Тогда
		ПоказатьДиалогОтправкиПоПочте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Сформировать()
	// Зарезервировано для новых подсистем

	ПараметрыФормирования = Новый Структура("ВремяНачалаФормирования", ТекущаяУниверсальнаяДатаВМиллисекундах());

	Результат = РезультатФормированияОтчета(ФормированиеПриОткрытии, НастройкиОтчета.Внешний Или НастройкиОтчета.Безопасный);
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПараметрыФормирования.Вставить("ЗагрузитьРезультат",	Ложь);
	ПараметрыФормирования.Вставить("ИдентификаторЗадания",	Результат.ИдентификаторЗадания);

	Если Результат.Статус <> "Выполняется" Тогда
		ПослеФормирования(Результат, ПараметрыФормирования);
		Возврат;
	КонецЕсли;

	ПараметрыФормирования.ЗагрузитьРезультат = Истина;

	Обработчик								= Новый ОписаниеОповещения("ПослеФормирования", ЭтотОбъект, ПараметрыФормирования);
	ПараметрыОжидания						= БазоваяПодсистемаКлиент.ДО_ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания	= Ложь;

	БазоваяПодсистемаКлиент.ДО_ОжидатьЗавершение(Результат, Обработчик, ПараметрыОжидания);
КонецПроцедуры

&НаКлиенте
Процедура ПослеФормирования(Результат, ПараметрыФормирования) Экспорт
	Если ФоновоеЗаданиеИдентификатор <> ПараметрыФормирования.ИдентификаторЗадания Тогда
		Возврат;
	КонецЕсли;

	Если Результат = Неопределено Тогда
		ПоказатьОшибкиФормирования("Формирование отчета прервано администратором");
		ПоказатьОповещениеПользователя("Отчет не сформирован",, Заголовок);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		Если ПараметрыФормирования.ЗагрузитьРезультат Тогда
			ЗагрузитьРезультатФормированияОтчета();
		КонецЕсли;

		ФоновоеЗаданиеИдентификатор = Неопределено;

		НастройкиОтчета.СвойстваРезультата.ВремяФормирования = (ТекущаяУниверсальнаяДатаВМиллисекундах() - ПараметрыФормирования.ВремяНачалаФормирования) / 1000;

		ПоказатьОповещениеПользователя("Отчет сформирован",, Заголовок);
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ПоказатьОшибкиФормирования(Результат.КраткоеПредставлениеОшибки);
		ПоказатьОповещениеПользователя("Отчет не сформирован",, Заголовок);
	КонецЕсли;

	ФормированиеПриОткрытии = Ложь;

	// Зарезервировано для новых подсистем

	ОтчетСформирован = ?(Результат = Неопределено, Ложь, Результат.Статус = "Выполнено");

	ИнтеграцияПодсистемКлиент.ПослеФормирования(ЭтотОбъект, ОтчетСформирован);

	СброситьТекущуюОбласть();
	ПоказатьВыбранныйУровеньГруппировок();
КонецПроцедуры

&НаСервере
Функция РезультатФормированияОтчета(Знач ФормированиеПриОткрытии, Непосредственно)
	Если ЗначениеЗаполнено(ФоновоеЗаданиеИдентификатор) Тогда
		БазоваяПодсистемаСервер.ДО_ОтменитьВыполнениеЗадания(ФоновоеЗаданиеИдентификатор);
		ФоновоеЗаданиеИдентификатор = Неопределено;
	КонецЕсли;

	Если Не ПроверитьЗаполнение() Тогда
		Если ФормированиеПриОткрытии Тогда
			ТекстОшибки = "";
			Сообщения = ПолучитьСообщенияПользователю(Истина);
			Для Каждого Сообщение Из Сообщения Цикл
				ТекстОшибки = ТекстОшибки + ?(ТекстОшибки = "", "", ";" + Символы.ПС + Символы.ПС) + Сообщение.Текст;
			КонецЦикла;
			ПоказатьОшибкиФормирования(ТекстОшибки);
		КонецЕсли;

		Возврат Неопределено;
	КонецЕсли;

	ИмяОтчета										= СтрРазделить(НастройкиОтчета.ПолноеИмя, ".")[1];
	ПараметрыФормирования							= ПараметрыФормированияОтчета(ИмяОтчета, Непосредственно);
	ПараметрыВыполнения								= БазоваяПодсистемаСервер.ДО_ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания	= СтрШаблон("Выполнение отчета: %1", ИмяОтчета);
	ПараметрыВыполнения.ЗапуститьНеВФоне			= Непосредственно;

	Результат = БазоваяПодсистемаСервер.ДО_ВыполнитьВФоне("ВариантыОтчетов.СформироватьОтчетВФоне", ПараметрыФормирования, ПараметрыВыполнения);

	ФоновоеЗаданиеИдентификатор = Результат.ИдентификаторЗадания;
	ФоновоеЗаданиеАдресХранилища = Результат.АдресРезультата;

	Если Результат.Статус <> "Выполняется" Тогда
		ЗагрузитьРезультатФормированияОтчета();
	Иначе
		ВариантыОтчетовКлиентСервер.О_ОтобразитьСостояниеОтчета(ЭтотОбъект, "Отчет формируется...", БиблиотекаКартинок.ДлительнаяОперация48);
	КонецЕсли;

	Возврат Результат;
КонецФункции

&НаСервере
Функция ПараметрыФормированияОтчета(ИмяОтчета, Непосредственно)
	ДополнительныеСвойства = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("ВариантМодифицирован",						ВариантМодифицирован);
	ДополнительныеСвойства.Вставить("ПользовательскиеНастройкиМодифицированы",	ПользовательскиеНастройкиМодифицированы);

	ПараметрыФормированияОтчета = Новый Структура;
	ПараметрыФормированияОтчета.Вставить("СсылкаОтчета",				НастройкиОтчета.ОтчетСсылка);
	ПараметрыФормированияОтчета.Вставить("СсылкаВарианта",				НастройкиОтчета.ВариантСсылка);
	ПараметрыФормированияОтчета.Вставить("КлючВарианта",				КлючТекущегоВарианта);
	ПараметрыФормированияОтчета.Вставить("НастройкиКД",					Отчет.КомпоновщикНастроек.Настройки);
	ПараметрыФормированияОтчета.Вставить("ФиксированныеНастройкиКД",	Отчет.КомпоновщикНастроек.ФиксированныеНастройки);
	ПараметрыФормированияОтчета.Вставить("ПользовательскиеНастройкиКД",	Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормированияОтчета.Вставить("СхемаМодифицирована",			НастройкиОтчета.СхемаМодифицирована);
	ПараметрыФормированияОтчета.Вставить("КлючСхемы",					НастройкиОтчета.КлючСхемы);
	ПараметрыФормированияОтчета.Вставить("ИмяКлючевойОперации");
	ПараметрыФормированияОтчета.Вставить("КомментарийКлючевойОперации");
	ПараметрыФормированияОтчета.Вставить("ИспользуемыеТаблицы",			НастройкиОтчета.ИспользуемыеТаблицы);

	ЗаполнитьЗначенияСвойств(ПараметрыФормированияОтчета, ПараметрыЗамеровФормированияОтчета(ИмяОтчета));

	Если Непосредственно Тогда
		Если НастройкиОтчета.СхемаМодифицирована Тогда
			ПараметрыФормированияОтчета.Вставить("АдресСхемы", НастройкиОтчета.АдресСхемы);
		КонецЕсли;
		ПараметрыФормированияОтчета.Вставить("Объект",		РеквизитФормыВЗначение("Отчет"));
		ПараметрыФормированияОтчета.Вставить("ПолноеИмя",	НастройкиОтчета.ПолноеИмя);
	Иначе
		Если НастройкиОтчета.СхемаМодифицирована Тогда
			ПараметрыФормированияОтчета.Вставить("СхемаКД", ПолучитьИзВременногоХранилища(НастройкиОтчета.АдресСхемы));
		КонецЕсли;
	КонецЕсли;

	Возврат ПараметрыФормированияОтчета;
КонецФункции

&НаСервере
Функция ПараметрыЗамеровФормированияОтчета(ИмяОтчета)
	ПараметрыЗамеров = Новый Структура("ИмяКлючевойОперации, КомментарийКлючевойОперации");

	Если Не НастройкиОтчета.ВыполнятьЗамеры Или Не ЗначениеЗаполнено(НастройкиОтчета.КлючЗамеров) Тогда
		Возврат ПараметрыЗамеров;
	КонецЕсли;

	КомментарийКлючевойОперации = Новый Соответствие;
	КомментарийКлючевойОперации.Вставить("ИмяОтчета",				ИмяОтчета);
	КомментарийКлючевойОперации.Вставить("ИмяИсходногоВарианта",	НастройкиОтчета.ИмяИсходногоВарианта);
	КомментарийКлючевойОперации.Вставить("Внешний",					Число(НастройкиОтчета.Внешний));
	КомментарийКлючевойОперации.Вставить("Пользовательский",		Число(НастройкиОтчета.Пользовательский));
	КомментарийКлючевойОперации.Вставить("Расшифровка",				Число(РежимРасшифровки));
	КомментарийКлючевойОперации.Вставить("Модифицирован",			Число(ВариантМодифицирован));

	ПараметрыЗамеров.ИмяКлючевойОперации			= НастройкиОтчета.КлючЗамеров + ".Формирование";
	ПараметрыЗамеров.КомментарийКлючевойОперации	= КомментарийКлючевойОперации;

	Возврат ПараметрыЗамеров;
КонецФункции

&НаСервере
Процедура ЗагрузитьРезультатФормированияОтчета()
	Если Не ЭтоАдресВременногоХранилища(ФоновоеЗаданиеАдресХранилища) Тогда
		ПоказатьОшибкиФормирования("Не удалось сформировать отчет");

		Возврат;
	КонецЕсли;

	Результат = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);

	УдалитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	ФоновоеЗаданиеАдресХранилища = Неопределено;

	Если Результат = Неопределено Тогда
		ПоказатьОшибкиФормирования("Не удалось сформировать отчет (пустой результат)");

		Возврат;
	КонецЕсли;

	Успех = БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(Результат, "Успех");
	Если Успех <> Истина Тогда
		ПоказатьОшибкиФормирования(Результат.ТекстОшибки);

		Возврат;
	КонецЕсли;

	ДанныеЕщеОбновляются = БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(Результат, "ДанныеЕщеОбновляются", Ложь);
	Если ДанныеЕщеОбновляются Тогда
		БазоваяПодсистемаСервер.ОН_СообщитьПользователю("Отчет может содержать некорректные данные, так как не завершен переход на новую версию программы. Если отчет долгое время недоступен, необходимо обратиться к администратору.");
	КонецЕсли;

	ВариантыОтчетовКлиентСервер.О_ОтобразитьСостояниеОтчета(ЭтотОбъект);

	ЗаполнитьЗначенияСвойств(НастройкиОтчета.Печать, ОтчетТабличныйДокумент); // Сохранение настроек печати.
	ОтчетТабличныйДокумент = Результат.ТабличныйДокумент;
	ЗаполнитьЗначенияСвойств(ОтчетТабличныйДокумент, НастройкиОтчета.Печать); // Восстановление.

	Если ЗначениеЗаполнено(ОтчетДанныеРасшифровки) И ЭтоАдресВременногоХранилища(ОтчетДанныеРасшифровки) Тогда
		УдалитьИзВременногоХранилища(ОтчетДанныеРасшифровки);
	КонецЕсли;
	ОтчетДанныеРасшифровки = ПоместитьВоВременноеХранилище(Результат.Расшифровка, УникальныйИдентификатор);

	ВариантыОтчетовСервер.сВО_ИнициализироватьЗаголовкиОтчета(ЭтотОбъект);
	ИнициализироватьМенюУровнейГруппировок();

	Если Не Результат.ВариантМодифицирован И Не Результат.ПользовательскиеНастройкиМодифицированы Тогда
		Возврат;
	КонецЕсли;

	Результат.Вставить("ИмяСобытия",		"ПослеФормирования");
	Результат.Вставить("Непосредственно",	Ложь);

	ОбновитьЭлементыФормыНастроекНаСервере(Результат);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогОтправкиПоПочте()
	Вложение = Новый Структура;
	Вложение.Вставить("АдресВоВременномХранилище",	ПоместитьВоВременноеХранилище(ОтчетТабличныйДокумент, УникальныйИдентификатор));
	Вложение.Вставить("Представление",				ОтчетНаименованиеТекущегоВарианта);

	СписокВложений = БазоваяПодсистемаКлиентСервер.ОН_ЗначениеВМассиве(Вложение);

	// Зарезервировано для новых подсистем
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСписокВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	Сведения			= ВариантыОтчетовКлиент.О_СведенияОЭлементеНастройки(Отчет.КомпоновщикНастроек, Элемент.Имя);
	ОписаниеНастроек	= Сведения.Описание;

	ПользовательскиеНастройки	= Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;

	ПараметрыВыбора = ВариантыОтчетовКлиентСервер.О_ПараметрыВыбора(Сведения.Настройки, ПользовательскиеНастройки, Сведения.Элемент);

	РасширенноеОписаниеТипов = БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства, "РасширенноеОписаниеТипов");

	ТипЗначения = Неопределено;
	Если РасширенноеОписаниеТипов <> Неопределено Тогда
		РасширенноеОписаниеТипа = РасширенноеОписаниеТипов[Сведения.Индекс];
		Если РасширенноеОписаниеТипа <> Неопределено Тогда
			ТипЗначения = РасширенноеОписаниеТипа.ОписаниеТиповДляФормы;
		КонецЕсли;
	КонецЕсли;

	Элемент.ДоступныеТипы = ВариантыОтчетовКлиент.О_ТипЗначенияОграниченныйСвязьюПоТипу(Сведения.Настройки, ПользовательскиеНастройки, Сведения.Элемент, ОписаниеНастроек, ТипЗначения);

	Если ТипЗнч(Сведения.ЭлементПользовательскойНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ТекущееЗначение = Сведения.ЭлементПользовательскойНастройки.Значение;
	Иначе
		ТекущееЗначение = Сведения.ЭлементПользовательскойНастройки.ПравоеЗначение;
	КонецЕсли;

	ОтмеченныеЗначения		= ВариантыОтчетовКлиентСервер.О_ЗначенияСписком(ТекущееЗначение);
	ДоступныеЗначения		= ?(ОписаниеНастроек = Неопределено, Неопределено, ОписаниеНастроек.ДоступныеЗначения);

	Условие					= ВариантыОтчетовКлиентСервер.О_УсловиеЭлементаНастройки(Сведения.ЭлементПользовательскойНастройки, ОписаниеНастроек);
	ВыборГруппИЭлементов	= ВариантыОтчетовКлиент.О_ЗначениеТипаИспользованиеГруппИЭлементов(?(ОписаниеНастроек = Неопределено, Неопределено, ОписаниеНастроек.ВыборГруппИЭлементов), Условие);

	ЗначенияДляВыбора = ЗначенияДляВыбора(Элемент.СписокВыбора, Сведения.ЭлементПользовательскойНастройки, Элемент.ДоступныеТипы);

	ОграничиватьВыборУказаннымиЗначениями = ДоступныеЗначения <> Неопределено;

	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ЭлементПользовательскойНастройки",		Сведения.ЭлементПользовательскойНастройки);
	ПараметрыОбработчика.Вставить("ОграничиватьВыборУказаннымиЗначениями",	ОграничиватьВыборУказаннымиЗначениями);
	ПараметрыОбработчика.Вставить("ИмяЭлемента",							Элемент.Имя);

	Обработчик = Новый ОписаниеОповещения("ЗавершитьВыборИзСписка", ЭтотОбъект, ПараметрыОбработчика);

	Если ВариантыОтчетовКлиент.О_ЭтоВыборОбъектовМетаданных(Элемент.ДоступныеТипы, ОтмеченныеЗначения, Обработчик) Или ВариантыОтчетовКлиент.О_ЭтоВыборПользователей(Элемент.ДоступныеТипы, ОтмеченныеЗначения, ПараметрыВыбора, Обработчик) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отмеченные",							ОтмеченныеЗначения);
	ПараметрыОткрытия.Вставить("ОписаниеТипов",							Элемент.ДоступныеТипы);
	ПараметрыОткрытия.Вставить("ЗначенияДляВыбора",						ЗначенияДляВыбора);
	ПараметрыОткрытия.Вставить("ЗначенияДляВыбораЗаполнены",			Элемент.СписокВыбора.Количество() > 0);
	ПараметрыОткрытия.Вставить("ОграничиватьВыборУказаннымиЗначениями",	ОграничиватьВыборУказаннымиЗначениями);
	ПараметрыОткрытия.Вставить("Представление",							Элемент.Заголовок);
	ПараметрыОткрытия.Вставить("ПараметрыВыбора",						Новый Массив(ПараметрыВыбора));
	ПараметрыОткрытия.Вставить("ВыборГруппИЭлементов",					ВыборГруппИЭлементов);
	ПараметрыОткрытия.Вставить("БыстрыйВыбор",							?(ОписаниеНастроек = Неопределено, Ложь, ОписаниеНастроек.БыстрыйВыбор));

	ОткрытьФорму("ОбщаяФорма.ВводЗначенийСпискомСФлажками", ПараметрыОткрытия, ЭтотОбъект,,,, Обработчик);
КонецПроцедуры

&НаКлиенте
Функция ЗначенияДляВыбора(СписокВыбора, ЭлементНастройки, ТипЗначения)
	ЗначенияДляВыбора = СписокВыбора;
	Если ЭлементНастройки = Неопределено Тогда
		Возврат ЗначенияДляВыбора;
	КонецЕсли;

	ЗначенияДляВыбора.ТипЗначения = ТипЗначения;

	ЗначениеОтбора = ВариантыОтчетовКлиент.О_КэшЗначенияОтбора(Отчет.КомпоновщикНастроек, ЭлементНастройки);
	Если ЗначениеОтбора <> Неопределено Тогда
		ВариантыОтчетовКлиентСервер.О_ДополнитьСписок(ЗначенияДляВыбора, ЗначениеОтбора);
	КонецЕсли;

	Возврат ЗначенияДляВыбора;
КонецФункции

&НаКлиенте
Процедура ЗавершитьВыборИзСписка(Список, ПараметрыВыбора) Экспорт
	Если ТипЗнч(Список) = Тип("Массив") Тогда
		ВыбранныеЗначения = Список;

		Список = Новый СписокЗначений;
		Список.ЗагрузитьЗначения(ВыбранныеЗначения);
		Список.ЗаполнитьПометки(Истина);
	ИначеЕсли ТипЗнч(Список) <> Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;

	ВыбранныеЗначения = Новый СписокЗначений;
	Для Каждого ЭлементСписка Из Список Цикл
		Если ЭлементСписка.Пометка Тогда
			ЗаполнитьЗначенияСвойств(ВыбранныеЗначения.Добавить(), ЭлементСписка);
		КонецЕсли;
	КонецЦикла;

	ЭлементПользовательскойНастройки = ПараметрыВыбора.ЭлементПользовательскойНастройки;
	ЭлементПользовательскойНастройки.Использование = Истина;

	Если ТипЗнч(ЭлементПользовательскойНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ЭлементПользовательскойНастройки.Значение = ВыбранныеЗначения;
	Иначе
		ЭлементПользовательскойНастройки.ПравоеЗначение = ВыбранныеЗначения;
	КонецЕсли;

	Если Не ПараметрыВыбора.ОграничиватьВыборУказаннымиЗначениями Тогда
		Элемент = Элементы.Найти(ПараметрыВыбора.ИмяЭлемента);

		Если Элемент <> Неопределено Тогда
			Элемент.СписокВыбора.Очистить();

			Для Каждого ЭлементСписка Из Список Цикл
				ЗаполнитьЗначенияСвойств(Элемент.СписокВыбора.Добавить(), ЭлементСписка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	ВариантыОтчетовКлиент.О_КэшироватьЗначениеОтбора(Отчет.КомпоновщикНастроек, ЭлементПользовательскойНастройки, Список);

	ВариантыОтчетовКлиентСервер.О_ОповеститьОИзмененииНастроек(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Функция ПерейтиПоСсылке(АдресСсылки)
	Если ПустаяСтрока(АдресСсылки) Тогда
		Возврат Ложь;
	КонецЕсли;
	АдресСсылкиВРег = ВРег(АдресСсылки);
	Если СтрНачинаетсяС(АдресСсылкиВРег, ВРег("http://")) Или СтрНачинаетсяС(АдресСсылкиВРег, ВРег("https://")) Или СтрНачинаетсяС(АдресСсылкиВРег, ВРег("e1cib/")) Или СтрНачинаетсяС(АдресСсылкиВРег, ВРег("e1c://")) Тогда
		БазоваяПодсистемаКлиент.ФС_ОткрытьНавигационнуюСсылку(АдресСсылки);

		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура ЗагрузитьСхемуПослеПомещенияФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ВыбранныеФайлы.Хранение);

	ДополнительныеСвойства = Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Очистить();
	ДополнительныеСвойства.Вставить("СхемаКомпоновкиДанных",	ДвоичныеДанные);
	ДополнительныеСвойства.Вставить("ОтчетИнициализирован",		Ложь);

	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы",	Истина);
	ПараметрыЗаполнения.Вставить("КомпоновщикНастроекКД",					Отчет.КомпоновщикНастроек);

	ОбновитьЭлементыФормыНастроек(ПараметрыЗаполнения);
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьПереданныеНастройки(ОписаниеНастроек)
	Если ВариантМодифицирован Тогда
		ПоказатьПредупреждение(, "Вариант отчета был изменен.
			|Сохраните изменения перед применением настроек.");
		Возврат;
	КонецЕсли;

	КлючТекущихПользовательскихНастроек = ОписаниеНастроек.КлючНастроек; // Строка
	ПредставлениеТекущихПользовательскихНастроек = ОписаниеНастроек.Представление;

	Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ОписаниеНастроек.Настройки);
	Сформировать();
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьКомандыКонтекстнойНастройки()
	ВариантыОтчетовКлиент.сВО_ПриАктивизацииРезультатаОтчета(ЭтотОбъект, Элементы.ОтчетТабличныйДокумент);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПоказателиДинамически()
	Если БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(НастройкиОтчета, "ВыводитьСуммуВыделенныхЯчеек", Истина) Тогда
		БазоваяПодсистемаКлиент.сОН_РассчитатьПоказатели(ЭтотОбъект, "ОтчетТабличныйДокумент");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМенюУровнейГруппировок()
	АдресИндексаСтруктурыОтчета	= НастройкиОтчета.СвойстваРезультата.АдресИндексаСтруктурыОтчета;
	ИндексСтруктурыОтчета		= Неопределено;

	Если ЭтоАдресВременногоХранилища(АдресИндексаСтруктурыОтчета) Тогда
		ИндексСтруктурыОтчета = ПолучитьИзВременногоХранилища(АдресИндексаСтруктурыОтчета); // ТаблицаЗначений
	КонецЕсли;

	ОчиститьМенюУровнейГруппировок();

	Если ИндексСтруктурыОтчета <> Неопределено И ИндексСтруктурыОтчета.Количество() > 0 Тогда
		ЗаполнитьМенюУровнейГруппировок(ИндексСтруктурыОтчета);
	КонецЕсли;

	УстановитьДоступностьМенюУровнейГруппировок();
КонецПроцедуры

&НаСервере
Процедура ОчиститьМенюУровнейГруппировок()
	Кнопки = Элементы.КонтекстноеМенюОбластиОбщееМенюУровниГруппировок.ПодчиненныеЭлементы;
	Индекс = Кнопки.Количество() - 1;

	Пока Индекс >= 0 Цикл
		Кнопка = Кнопки[Индекс];
		Индекс = Индекс - 1;

		Если Кнопка = Элементы.КонтекстноеМенюОбластиОбщееПоказатьУровеньГруппировок Тогда
			Продолжить;
		КонецЕсли;

		Команда = Команды.Найти(Кнопка.Имя);

		Если Команда <> Неопределено Тогда
			Команды.Удалить(Команда);
		КонецЕсли;

		Элементы.Удалить(Кнопка);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМенюУровнейГруппировок(ИндексСтруктурыОтчета)
	КоличествоРазделов	= ИндексСтруктурыОтчета[0].КоличествоРазделов;

	ГруппировкиРазделов	= ГруппировкиРазделовОтчета(ИндексСтруктурыОтчета);

	Если КоличествоРазделов = ГруппировкиРазделов.Количество() Тогда
		Возврат;
	КонецЕсли;

	СвойстваМеню = СвойстваМенюУровнейГруппировок(ИндексСтруктурыОтчета);

	Для Каждого Свойства Из СвойстваМеню Цикл
		Команда				= Команды.Добавить(Свойства.ИмяКоманды);
		Команда.Заголовок	= Свойства.ПредставлениеУровняГруппировки;
		Команда.Действие	= "Подключаемый_ПоказатьУровеньГруппировок";

		Кнопка				= Элементы.Добавить(Свойства.ИмяКоманды, Тип("КнопкаФормы"), Элементы.КонтекстноеМенюОбластиОбщееМенюУровниГруппировок);
		Кнопка.Вид			= ВидКнопкиФормы.КнопкаКоманднойПанели;
		Кнопка.ИмяКоманды	= Свойства.ИмяКоманды;
		Кнопка.Заголовок	= Свойства.ПредставлениеУровняГруппировки;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция СвойстваМенюУровнейГруппировок(ИндексСтруктурыОтчета)
	СвойстваМеню = ИндексСтруктурыОтчета.СкопироватьКолонки("ПорядокГруппировки, ПредставлениеГруппировки");

	КолонкиСвойстваМеню = СвойстваМеню.Колонки; // КоллекцияКолонокТаблицыЗначений
	КолонкиСвойстваМеню.Вставить(1, "ИмяКоманды", Новый ОписаниеТипов("Строка"));

	НайденнаяКолонка		= КолонкиСвойстваМеню.Найти("ПорядокГруппировки"); // КолонкаТаблицыЗначений
	НайденнаяКолонка.Имя	= "УровеньГруппировки";

	НайденнаяКолонка		= КолонкиСвойстваМеню.Найти("ПредставлениеГруппировки"); // КолонкаТаблицыЗначений
	НайденнаяКолонка.Имя	= "ПредставлениеУровняГруппировки";

	КоличествоУровнейГруппировок = ОтчетТабличныйДокумент.КоличествоУровнейГруппировокСтрок();

	Для УровеньГруппировки = 1 По КоличествоУровнейГруппировок Цикл
		Свойства								= СвойстваМеню.Добавить();
		Свойства.ИмяКоманды						= Элементы.КонтекстноеМенюОбластиОбщееПоказатьУровеньГруппировок.Имя + УровеньГруппировки;
		Свойства.УровеньГруппировки				= УровеньГруппировки;
		Свойства.ПредставлениеУровняГруппировки	= СтрШаблон("Уровня %1", УровеньГруппировки);
	КонецЦикла;

	СвойстваМеню.Сортировать("УровеньГруппировки");

	Возврат СвойстваМеню;
КонецФункции

&НаСервере
Функция ГруппировкиРазделовОтчета(ИндексСтруктурыОтчета)
	ГруппировкиРазделов = ИндексСтруктурыОтчета.Скопировать();

	Индекс = ГруппировкиРазделов.Количество() - 1;

	Пока Индекс >= 0 Цикл
		Если СтрНайти(ГруппировкиРазделов[Индекс].ИдентификаторГруппировки, "/column/") > 0 Тогда
			ГруппировкиРазделов.Удалить(Индекс);
		КонецЕсли;

		Индекс = Индекс - 1;
	КонецЦикла;

	ГруппировкиРазделов.Свернуть("ПорядокРаздела, ПорядокГруппировки, ПредставлениеГруппировки");
	ГруппировкиРазделов.Сортировать("ПорядокРаздела, ПорядокГруппировки");

	Возврат ГруппировкиРазделов;
КонецФункции

&НаСервере
Процедура УстановитьДоступностьМенюУровнейГруппировок()

	МенюЗаполнено = (Элементы.КонтекстноеМенюОбластиОбщееМенюУровниГруппировок.ПодчиненныеЭлементы.Количество() > 1);

	Элементы.КонтекстноеМенюОбластиОбщееПоказатьУровеньГруппировок.Видимость = Не МенюЗаполнено;
	Элементы.КонтекстноеМенюОбластиОбщееМенюУровниГруппировок.Видимость = МенюЗаполнено;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВыбранныйУровеньГруппировок(УровеньГруппировки = Неопределено)
	Если УровеньГруппировки = Неопределено Тогда
		УровеньГруппировки = 999;
	КонецЕсли;

	Индекс	= УровеньГруппировки - 1;
	Граница = ОтчетТабличныйДокумент.КоличествоУровнейГруппировокСтрок() - 1;

	Пока Граница > Индекс Цикл
		ОтчетТабличныйДокумент.ПоказатьУровеньГруппировокСтрок(Граница);
		Граница = Граница - 1;
	КонецЦикла;

	ОтчетТабличныйДокумент.ПоказатьУровеньГруппировокСтрок(Индекс);

	Кнопки = Элементы.КонтекстноеМенюОбластиОбщееМенюУровниГруппировок.ПодчиненныеЭлементы;

	Для Каждого Кнопка Из Кнопки Цикл
		Кнопка.Пометка = Ложь;
	КонецЦикла;

	ИмяКнопки	= Элементы.КонтекстноеМенюОбластиОбщееПоказатьУровеньГруппировок.Имя + УровеньГруппировки;
	Кнопка		= Кнопки.Найти(ИмяКнопки);

	Если Кнопка <> Неопределено Тогда
		Кнопка.Пометка = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность(ПриСохраненииВарианта = Ложь)
	ПоказыватьКомандыВыбораВариантов = ВариантыОтчетовСервер.сВО_РежимВариантаОтчета(КлючТекущегоВарианта) И НастройкиОтчета.РазрешеноВыбиратьВарианты;

	Если Не ПриСохраненииВарианта Тогда
		ПоказыватьКомандыИзмененияВарианта					= ПоказыватьКомандыВыбораВариантов И НастройкиОтчета.РазрешеноИзменятьВарианты;
		РазрешеноВыбиратьИНастраиватьВариантыБезСохранения	= БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(НастройкиОтчета, "РазрешеноВыбиратьИНастраиватьВариантыБезСохранения", Ложь);
		КоличествоДоступныхНастроек							= ВариантыОтчетовСервер.О_КоличествоДоступныхНастроек(Отчет.КомпоновщикНастроек);

		Элементы.ВсеНастройки.Видимость			= ПоказыватьКомандыИзмененияВарианта Или КоличествоДоступныхНастроек.Обычных > 0;
		Элементы.ВсеНастройкиЕще.Видимость		= Элементы.ВсеНастройки.Видимость;
		Элементы.ГруппаВариантыОтчета.Видимость	= ПоказыватьКомандыВыбораВариантов;

		РазрешеноСохранятьВариант = ПоказыватьКомандыИзмененияВарианта И Не РазрешеноВыбиратьИНастраиватьВариантыБезСохранения;
		БазоваяПодсистемаКлиентСервер.ОН_УстановитьСвойствоЭлементаФормы(Элементы, "СохранитьВариант",		"Видимость", РазрешеноСохранятьВариант);
		БазоваяПодсистемаКлиентСервер.ОН_УстановитьСвойствоЭлементаФормы(Элементы, "СохранитьВариантЕще",	"Видимость", РазрешеноСохранятьВариант);

		Элементы.ДругиеОтчеты.Видимость		= НастройкиОтчета.Подсистема <> Неопределено И НастройкиОтчета.РазрешеноВыбиратьВарианты;
		Элементы.ДругиеОтчетыЕще.Видимость	= Элементы.ДругиеОтчеты.Видимость;

		Элементы.ИзменитьВариант.Видимость = ПоказыватьКомандыИзмененияВарианта;
		Элементы.ВыбратьВариант.Видимость = ПоказыватьКомандыВыбораВариантов;

		РазрешеноИспользоватьНастройки = ПоказыватьКомандыВыбораВариантов И КоличествоДоступныхНастроек.Итог > 0 И БазоваяПодсистемаКлиентСервер.ОН_ЗначениеСвойстваЭлементаФормы(Элементы, "ВыбратьНастройки", "Видимость") = Истина;

		БазоваяПодсистемаКлиентСервер.ОН_УстановитьСвойствоЭлементаФормы(Элементы, "ВыбратьНастройки", "Видимость", РазрешеноИспользоватьНастройки);
		БазоваяПодсистемаКлиентСервер.ОН_УстановитьСвойствоЭлементаФормы(Элементы, "СохранитьНастройки", "Видимость", РазрешеноИспользоватьНастройки);
		БазоваяПодсистемаКлиентСервер.ОН_УстановитьСвойствоЭлементаФормы(Элементы, "ПоделитьсяНастройками", "Видимость", РазрешеноИспользоватьНастройки);

		Элементы.ИзменитьУсловияОтборов.Видимость = КоличествоДоступныхНастроек.Итог > 0 И ВариантыОтчетовСервер.сВО_РежимВариантаОтчета(КлючТекущегоВарианта);
		Если РазрешеноВыбиратьИНастраиватьВариантыБезСохранения Тогда
			ВариантМодифицирован = Ложь;
		КонецЕсли;
	КонецЕсли;

	// Команды выбора вариантов.
	Если ВариантыПанелиКлючТекущегоВарианта <> КлючТекущегоВарианта Тогда
		ВариантыПанелиКлючТекущегоВарианта = КлючТекущегоВарианта;

		Если ПоказыватьКомандыВыбораВариантов Тогда
			ОбновитьКомандыВыбораВариантов();
		КонецЕсли;

		Если ПравоВывода Тогда
			КлючСохраненияПоложенияОкна = ВариантыОтчетовКлиентСервер.О_КлючУникальности(НастройкиОтчета.ПолноеИмя, КлючТекущегоВарианта);
			НастройкиОтчета.Печать.Вставить("КлючПараметровПечати", КлючСохраненияПоложенияОкна);
			ЗаполнитьЗначенияСвойств(ОтчетТабличныйДокумент, НастройкиОтчета.Печать);
		КонецЕсли;

		НавигационнаяСсылка = "";
		Если ЗначениеЗаполнено(НастройкиОтчета.ВариантСсылка) И Не НастройкиОтчета.Внешний И Не НастройкиОтчета.Контекстный Тогда
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(НастройкиОтчета.ВариантСсылка);
		КонецЕсли;
	КонецЕсли;

	// Команды модификации Схемы.
	Элементы.ВосстановитьСтандартнуюСхему.Видимость	= НастройкиОтчета.РазрешеноВосстанавливатьСтандартнуюСхему;

	Элементы.РедактироватьСхему.Видимость			= НастройкиОтчета.РазрешеноРедактироватьСхему;

	Элементы.ЗагрузитьСхему.Видимость				= НастройкиОтчета.РазрешеноЗагружатьСхему;

	// Заголовок.
	ОтчетНаименованиеТекущегоВарианта = СокрЛП(ОтчетНаименованиеТекущегоВарианта);
	Если ЗначениеЗаполнено(ОтчетНаименованиеТекущегоВарианта) Тогда
		Заголовок = ОтчетНаименованиеТекущегоВарианта;
	Иначе
		ОписаниеНастроекОтчета = ОписаниеНастроекОтчета(НастройкиОтчета);
		Заголовок = ОписаниеНастроекОтчета.Наименование;
	КонецЕсли;

	Если РежимРасшифровки Тогда
		Заголовок = Заголовок + " (Расшифровка)";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПроверитьДоступностьОбменаНастройкамиВарианта(МетаданныеОтчета)
	ОбменНастройкамиВариантаДоступен = ВариантыОтчетовСервер.сВО_РежимВариантаОтчета(КлючТекущегоВарианта) И ВариантыОтчетовСервер.ВО_ОтчетПодключенКХранилищу(МетаданныеОтчета);

	Элементы.ГруппаОбменНастройкамиЕще.Видимость	= ОбменНастройкамиВариантаДоступен;
	Элементы.ОбновитьВариантОтчетаИзФайла.Видимость	= ОбменНастройкамиВариантаДоступен;
	Элементы.СохранитьВариантОтчетаВФайл.Видимость	= ОбменНастройкамиВариантаДоступен;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьВариант(КлючВарианта)
	Если Не РежимРасшифровки И Не ВариантМодифицирован Тогда
		// Сохранение текущих пользовательских настроек.
		БазоваяПодсистемаСервер.ОН_ХранилищеСохранить(ХранилищеСистемныхНастроек, НастройкиОтчета.ПолноеИмя + "/" + КлючТекущегоВарианта + "/ТекущиеПользовательскиеНастройки", "", Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, Неопределено, Неопределено, Ложь);
	КонецЕсли;

	РежимРасшифровки															= Ложь;
	ВариантМодифицирован														= Ложь;
	ПользовательскиеНастройкиМодифицированы										= Ложь;
	НастройкиОтчета.ПрочитатьФлажокФормироватьСразуИзПользовательскихНастроек	= Истина;

	УстановитьТекущийВариант(КлючВарианта);

	ВариантыОтчетовКлиентСервер.О_ОтобразитьСостояниеОтчета(ЭтотОбъект, "Выбран другой вариант отчета. Нажмите ""Сформировать"" для получения отчета.", БиблиотекаКартинок.Информация32);
КонецПроцедуры

&НаСервере
Процедура ОпределитьПоведениеВМобильномКлиенте()
	Если Не БазоваяПодсистемаСервер.ОН_ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;

	Элементы.КомандыИПоказатели.Заголовок		= "показатели";
	Элементы.ГруппаНастройкиОтчета.Видимость	= Ложь;
	Элементы.ГруппаРаботаВТаблице.Видимость		= Ложь;
	Элементы.ГруппаВывод.Видимость				= Ложь;
	Элементы.Редактирование.Видимость			= Ложь;

	Элементы.ГруппаПоказатель.РастягиватьПоГоризонтали	= Неопределено;
	Элементы.Показатель.Ширина							= 0;
КонецПроцедуры

&НаСервере
Функция КонтекстВариантаОтчета()
	Если РежимРасшифровки Тогда
		Возврат "";
	КонецЕсли;

	Если Параметры.Свойство("КонтекстВарианта") И Параметры.КонтекстВарианта <> Неопределено Тогда
		Возврат Параметры.КонтекстВарианта;
	КонецЕсли;

	СвойстваИнтерфейса = СтрРазделить("ПараметрКоманды, Отбор", ", ", Ложь);

	Для Каждого СвойствоИнтерфейса Из СвойстваИнтерфейса Цикл
		ЗначениеСвойства = БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(Параметры, СвойствоИнтерфейса);
		Если ЗначениеСвойства = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если БазоваяПодсистемаСервер.ОН_ЭтоСсылка(ТипЗнч(ЗначениеСвойства)) Тогда
			Возврат ЗначениеСвойства.Метаданные().ПолноеИмя();
		ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("Массив") И ЗначениеСвойства.Количество() > 0 И БазоваяПодсистемаСервер.ОН_ЭтоСсылка(ТипЗнч(ЗначениеСвойства[0])) Тогда
			Возврат ЗначениеСвойства[0].Метаданные().ПолноеИмя();
		ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("Структура") Тогда
			Для Каждого ЭлементСтруктуры Из ЗначениеСвойства Цикл
				ЗначениеЭлемента = ЭлементСтруктуры.Значение;

				Если БазоваяПодсистемаСервер.ОН_ЭтоСсылка(ТипЗнч(ЗначениеЭлемента)) Тогда
					Возврат ЗначениеЭлемента.Метаданные().ПолноеИмя();
				ИначеЕсли ТипЗнч(ЗначениеЭлемента) = Тип("Массив") И ЗначениеЭлемента.Количество() > 0 И БазоваяПодсистемаСервер.ОН_ЭтоСсылка(ТипЗнч(ЗначениеЭлемента[0])) Тогда
					Возврат ЗначениеЭлемента[0].Метаданные().ПолноеИмя();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	ОписаниеКоманды = БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(Параметры, "ОписаниеКоманды");

	Если ТипЗнч(ОписаниеКоманды) = Тип("Структура") Тогда
		ОписаниеТипаКонтекста	= БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(ОписаниеКоманды, "ТипПараметра");
		ТипыКонтекста			= ?(ТипЗнч(ОписаниеТипаКонтекста) = Тип("ОписаниеТипов"), ОписаниеТипаКонтекста.Типы(), Новый Массив);

		Если ТипыКонтекста.Количество() > 0 Тогда
			Возврат Метаданные.НайтиПоТипу(ТипыКонтекста[0]).ПолноеИмя();
		КонецЕсли;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

&НаСервере
Процедура УстановитьКлючНазначенияИспользования()
	Если ЗначениеЗаполнено(КлючНазначенияИспользования) Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Параметры.КлючНазначенияИспользования) Тогда
		КлючНазначенияИспользования = Параметры.КлючНазначенияИспользования;
	ИначеЕсли ЗначениеЗаполнено(КонтекстВарианта) Тогда
		КлючНазначенияИспользования = КонтекстВарианта + ?(ЗначениеЗаполнено(Параметры.КлючВарианта), ".", "") + Параметры.КлючВарианта;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СохранитьПараметрыФормы()
	ФормаПараметры = Новый Структура(
		"КлючНазначенияИспользования, КлючПользовательскихНастроек,
		|СформироватьПриОткрытии, ТолькоПросмотр,
		|ФиксированныеНастройки, Раздел, Подсистема, ПодсистемаПредставление");
	ЗаполнитьЗначенияСвойств(ФормаПараметры, Параметры);

	ФормаПараметры.Вставить("Отбор", Новый Структура);
	Если ТипЗнч(Параметры.Отбор) = Тип("Структура") Тогда
		БазоваяПодсистемаКлиентСервер.ОН_ДополнитьСтруктуру(ФормаПараметры.Отбор, Параметры.Отбор, Истина);
		Параметры.Отбор.Очистить();
	КонецЕсли;

	ФормаПараметры.КлючНазначенияИспользования = КлючНазначенияИспользования;
КонецПроцедуры

&НаСервере
Процедура УстановитьКлючТекущегоВарианта(ОтчетПолноеИмя, ПредопределенныеВарианты)
	ВариантыПанелиКлючТекущегоВарианта = ПустойКлючВарианта();

	Если ЗначениеЗаполнено(КлючНазначенияИспользования) Тогда
		КлючОбъекта = ОтчетПолноеИмя + "/" + КлючНазначенияИспользования + "/КлючТекущегоВарианта";
	Иначе
		КлючОбъекта = ОтчетПолноеИмя + "/КлючТекущегоВарианта";
	КонецЕсли;

	КлючТекущегоВарианта = БазоваяПодсистемаСервер.ОН_ХранилищеЗагрузить(ХранилищеСистемныхНастроек, КлючОбъекта, "", Неопределено, Неопределено, Неопределено);

	Если Не ЗначениеЗаполнено(КлючТекущегоВарианта) Тогда
		Если ЗначениеЗаполнено(Параметры.КлючВарианта) Тогда
			КлючТекущегоВарианта = Параметры.КлючВарианта;
		ИначеЕсли ПредопределенныеВарианты.Количество() > 0 Тогда
			КлючТекущегоВарианта = ПредопределенныеВарианты[0].Значение;
		КонецЕсли;
	КонецЕсли;

	// Сохраняется ключ контекстного варианты, который обычно исключен из интерфейса,
	//  т.е. Включен равен Ложь (см. Справочник.ПредопределенныеВариантыОтчетов.Включен = Ложь).
	//
	Если ЗначениеЗаполнено(КонтекстВарианта) Тогда
		ВариантКонтекста = ?(ЗначениеЗаполнено(Параметры.КлючВарианта), Параметры.КлючВарианта, КлючТекущегоВарианта);
		ВариантыКонтекста.Добавить(ВариантКонтекста);
	КонецЕсли;

	Если ЗначениеЗаполнено(КонтекстВарианта) И ЗначениеЗаполнено(Параметры.КлючВарианта) И Параметры.КлючВарианта <> КлючТекущегоВарианта Тогда
		// Управление передается платформе -
		// ключ варианта восстановится из стандартного хранилища.
		Параметры.КлючВарианта = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция НастройкиОтчета(ОтчетОбъект, ОтчетМетаданные, ОтчетПолноеИмя, ПредопределенныеВарианты)
	Настройки = ВариантыОтчетовСервер.ВО_НастройкиФормыОтчета(Параметры.Отчет, КлючТекущегоВарианта, ОтчетОбъект);
	Настройки.Вставить("РазрешеноВыбиратьВарианты",	Истина);
	Настройки.Вставить("СхемаМодифицирована",		Ложь);
	Настройки.Вставить("ПредопределенныеВарианты",	ПредопределенныеВарианты);
	Настройки.Вставить("АдресСхемы",				АдресСхемыОтчета(ОтчетОбъект));
	Настройки.Вставить("КлючСхемы",					"");
	Настройки.Вставить("Контекстный",				ЗначениеЗаполнено(КонтекстВарианта));
	Настройки.Вставить("ПолноеИмя",					ОтчетПолноеИмя);
	Настройки.Вставить("Наименование",				СокрЛП(ОтчетМетаданные.Представление()));
	Настройки.Вставить("ОтчетСсылка",				Параметры.Отчет);
	Настройки.Вставить("Подсистема",				ФормаПараметры.Подсистема);
	Настройки.Вставить("Внешний",					ТипЗнч(Настройки.ОтчетСсылка) = Тип("Строка"));
	Настройки.Вставить("Безопасный",				БезопасныйРежим() <> Ложь);
	Настройки.Вставить("ИспользуемыеТаблицы",		БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(Параметры, "ИспользуемыеТаблицы"));

	// Свойства для контекстной настройки отчета.
	Настройки.Вставить("СвойстваРезультата", ВариантыОтчетовСервер.сВО_СвойстваРезультатаОтчета());

	Возврат Настройки;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеНастроекОтчета(Описание)
	Возврат Описание;
КонецФункции

&НаСервере
Функция АдресСхемыОтчета(ОтчетОбъект)
	АдресСхемы = БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(Параметры, "АдресСхемы", "");

	Расшифровка = БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(Параметры, "Расшифровка");

	Если ТипЗнч(Расшифровка) = Тип("ОписаниеОбработкиРасшифровкиКомпоновкиДанных") Тогда
		Настройки	= ПолучитьИзВременногоХранилища(Расшифровка.Данные).Настройки;
		АдресСхемы	= БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(Настройки.ДополнительныеСвойства, "АдресСхемы", "");
	КонецЕсли;

	ЭтоСхема = Ложь;
	Если ЭтоАдресВременногоХранилища(АдресСхемы) Тогда
		Схема		= ПолучитьИзВременногоХранилища(АдресСхемы);
		ЭтоСхема	= (ТипЗнч(Схема) = Тип("СхемаКомпоновкиДанных"));

		Если ЭтоСхема Тогда
			АдресСхемы = ПоместитьВоВременноеХранилище(Схема, УникальныйИдентификатор);
			Отчет.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
		КонецЕсли;
	КонецЕсли;

	Если Не ЭтоСхема Тогда
		АдресСхемы = ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных, УникальныйИдентификатор);
	КонецЕсли;

	Возврат АдресСхемы;
КонецФункции

&НаСервере
Процедура УстановитьРазрешенияПользователя()
	РазрешеноВыбиратьИНастраиватьВариантыБезСохранения	= БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(НастройкиОтчета, "РазрешеноВыбиратьИНастраиватьВариантыБезСохранения", Ложь);

	ВидимостьКомандВариантовОтчетов						= БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(Параметры, "ВидимостьКомандВариантовОтчетов", Истина);

	Если РазрешеноВыбиратьИНастраиватьВариантыБезСохранения Тогда
		НастройкиОтчета.РазрешеноИзменятьВарианты = Истина;
		НастройкиОтчета.РазрешеноВыбиратьВарианты = Истина;
	ИначеЕсли Не ВидимостьКомандВариантовОтчетов Тогда
		НастройкиОтчета.РазрешеноИзменятьВарианты = Ложь;
		НастройкиОтчета.РазрешеноВыбиратьВарианты = Ложь;
	КонецЕсли;

	Если НастройкиОтчета.РазрешеноИзменятьВарианты И Не (ПравоДоступа("СохранениеДанныхПользователя", Метаданные) И ПравоДоступа("Добавление", Метаданные.Справочники.ВариантыОтчетов)) Тогда
		НастройкиОтчета.РазрешеноИзменятьВарианты = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ДанныеЭлементаРасшифровки(Расшифровка)
	Возврат ВариантыОтчетовСервер.сВО_ДанныеЭлементаРасшифровки(ЭтотОбъект, Расшифровка);
КонецФункции

&НаСервере
Процедура ОбновитьЭлементыФормыНастроекНаСервере(ПараметрыОбновления = Неопределено)
	ЗагрузитьНастройкиВКомпоновщик(ПараметрыОбновления);

	ВариантыОтчетовСервер.О_ОбновитьЭлементыФормыНастроек(ЭтотОбъект, Элементы.КомпоновщикНастроекПользовательскиеНастройки, ПараметрыОбновления);

	Если ПараметрыОбновления.ИмяСобытия <> "ПослеФормирования" Тогда
		Переформировать = БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(ПараметрыОбновления, "Переформировать", Ложь);

		Если Переформировать И Не ПроверитьЗаполнение() Тогда
			ПараметрыОбновления.Переформировать = Ложь;
		ИначеЕсли Переформировать Тогда
			ВариантыОтчетовКлиентСервер.О_ОтобразитьСостояниеОтчета(ЭтотОбъект, "Отчет формируется...", БиблиотекаКартинок.ДлительнаяОперация48);
		ИначеЕсли ПараметрыОбновления.ВариантМодифицирован Или ПараметрыОбновления.ПользовательскиеНастройкиМодифицированы Тогда
			ВариантыОтчетовКлиентСервер.О_ОповеститьОИзмененииНастроек(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;

	// Стандартный диалог не показывается если пользователю запрещено изменять варианты этого отчета.
	Если Не НастройкиОтчета.РазрешеноИзменятьВарианты Тогда
		ВариантМодифицирован = Ложь;
	КонецЕсли;

	ВариантыОтчетовСервер.О_ВосстановитьЗначенияОтборов(ЭтотОбъект);

	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиВКомпоновщик(ПараметрыЗагрузки)
	ПроверитьПараметрыЗагрузки(ПараметрыЗагрузки);

	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	Если НастройкиОтчета.События.ПередЗаполнениемПанелиБыстрыхНастроек Тогда
		ОтчетОбъект.ПередЗаполнениемПанелиБыстрыхНастроек(ЭтотОбъект, ПараметрыЗагрузки);
	КонецЕсли;

	ДоступныеНастройки = ВариантыОтчетовСервер.О_ДоступныеНастройки(ПараметрыЗагрузки, НастройкиОтчета);

	СброситьНастройкиВарианта = БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(ПараметрыЗагрузки, "СброситьНастройкиВарианта", Ложь);
	Если СброситьНастройкиВарианта Тогда
		ЗагрузитьВариант(КлючТекущегоВарианта);
	КонецЕсли;

	ВариантыОтчетовСервер.О_СброситьПользовательскиеНастройки(ДоступныеНастройки, ПараметрыЗагрузки);

	Если НастройкиОтчета.События.ПередЗагрузкойНастроекВКомпоновщик Тогда
		ОтчетОбъект.ПередЗагрузкойНастроекВКомпоновщик(ЭтотОбъект, НастройкиОтчета.КлючСхемы, КлючТекущегоВарианта, ДоступныеНастройки.Настройки, ДоступныеНастройки.ПользовательскиеНастройки);
	КонецЕсли;

	НастройкиЗагружены = ВариантыОтчетовКлиентСервер.О_ЗагрузитьНастройки(Отчет.КомпоновщикНастроек, ДоступныеНастройки.Настройки, ДоступныеНастройки.ПользовательскиеНастройки, ДоступныеНастройки.ФиксированныеНастройки);

	// Установка фиксированных отборов выполняется через компоновщик, т.к. в нем наиболее полная коллекция настроек.
	// В ПередЗагрузкой в параметрах могут отсутствовать те параметры, настройки которые не переопределялись.
	Если НастройкиЗагружены И ТипЗнч(ФормаПараметры.Отбор) = Тип("Структура") Тогда
		ВариантыОтчетовСервер.О_УстановитьФиксированныеОтборы(ФормаПараметры.Отбор, Отчет.КомпоновщикНастроек.Настройки, НастройкиОтчета);
	КонецЕсли;

	Если ФормаПараметры.Свойство("ФиксированныеНастройки") Тогда
		ФормаПараметры.ФиксированныеНастройки = Отчет.КомпоновщикНастроек.ФиксированныеНастройки;
	КонецЕсли;

	ВариантыОтчетовСервер.О_УстановитьДоступныеЗначения(ОтчетОбъект, ЭтотОбъект);
	ВариантыОтчетовСервер.О_ИнициализироватьПредопределенныеПараметрыВывода(НастройкиОтчета, Отчет.КомпоновщикНастроек.Настройки);

	Если ПараметрыЗагрузки.ВариантМодифицирован Тогда
		ВариантМодифицирован = Истина;
	КонецЕсли;

	Если ПараметрыЗагрузки.ПользовательскиеНастройкиМодифицированы Тогда
		ПользовательскиеНастройкиМодифицированы = Истина;
	КонецЕсли;

	ДополнительныеСвойства = Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("КлючВарианта",			КлючТекущегоВарианта);
	ДополнительныеСвойства.Вставить("ВариантНаименование",	ОтчетНаименованиеТекущегоВарианта);
	ДополнительныеСвойства.Вставить("КонтекстВарианта",		КонтекстВарианта);

	// Подготовка к предварительной инициализации компоновщика (используется при расшифровке).
	Если НастройкиОтчета.СхемаМодифицирована Тогда
		ДополнительныеСвойства.Вставить("АдресСхемы", НастройкиОтчета.АдресСхемы);
	КонецЕсли;

	Если ПараметрыЗагрузки.Свойство("ФормаНастроекРасширенныйРежим") Тогда
		НастройкиОтчета.Вставить("ФормаНастроекРасширенныйРежим", ПараметрыЗагрузки.ФормаНастроекРасширенныйРежим);
	КонецЕсли;

	Если ПараметрыЗагрузки.Свойство("ФормаНастроекИмяСтраницы") Тогда
		НастройкиОтчета.Вставить("ФормаНастроекИмяСтраницы", ПараметрыЗагрузки.ФормаНастроекИмяСтраницы);
	КонецЕсли;

	ВариантыОтчетовСервер.О_УстановитьУсловияОтборов(ПараметрыЗагрузки, Отчет.КомпоновщикНастроек);

	Если НастройкиОтчета.ПрочитатьФлажокФормироватьСразуИзПользовательскихНастроек Тогда
		НастройкиОтчета.ПрочитатьФлажокФормироватьСразуИзПользовательскихНастроек = Ложь;
		Элементы.ФормироватьСразу.Пометка = БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства, "ФормироватьСразу", НастройкиОтчета.ФормироватьСразу);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПроверитьПараметрыЗагрузки(ПараметрыЗагрузки)
	Если ТипЗнч(ПараметрыЗагрузки) <> Тип("Структура") Тогда
		ПараметрыЗагрузки = Новый Структура;
	КонецЕсли;

	Если Не ПараметрыЗагрузки.Свойство("ИмяСобытия") Тогда
		ПараметрыЗагрузки.Вставить("ИмяСобытия", "");
	КонецЕсли;

	Если Не ПараметрыЗагрузки.Свойство("ВариантМодифицирован") Тогда
		ПараметрыЗагрузки.Вставить("ВариантМодифицирован", ВариантМодифицирован);
	КонецЕсли;

	Если Не ПараметрыЗагрузки.Свойство("ПользовательскиеНастройкиМодифицированы") Тогда
		ПараметрыЗагрузки.Вставить("ПользовательскиеНастройкиМодифицированы", ПользовательскиеНастройкиМодифицированы);
	КонецЕсли;

	Если Не ПараметрыЗагрузки.Свойство("Результат") Тогда
		ПараметрыЗагрузки.Вставить("Результат", Новый Структура);
	КонецЕсли;

	ПараметрыЗагрузки.Вставить("ОтчетОбъектИлиПолноеИмя", НастройкиОтчета.ПолноеИмя);
КонецПроцедуры

&НаСервере
Процедура ПоказатьОшибкиФормирования(ИнформацияОбОшибке)
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		ОписаниеОшибки					= ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ПодробноеПредставлениеОшибки	= "Ошибка при формировании:" + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Если ПустаяСтрока(ОписаниеОшибки) Тогда
			ОписаниеОшибки = ПодробноеПредставлениеОшибки;
		КонецЕсли;
	Иначе
		ОписаниеОшибки = ИнформацияОбОшибке;
		ПодробноеПредставлениеОшибки = "";
	КонецЕсли;

	ВариантыОтчетовКлиентСервер.О_ОтобразитьСостояниеОтчета(ЭтотОбъект, ОписаниеОшибки);

	Если Не ПустаяСтрока(ПодробноеПредставлениеОшибки) Тогда
		ВариантыОтчетовСервер.ВО_ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Предупреждение, ПодробноеПредставлениеОшибки, НастройкиОтчета.ВариантСсылка);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомандыВыбораВариантов()
	ВариантыФормы				= РеквизитФормыВЗначение("ДобавленныеВарианты");
	ВариантыФормы.Колонки.Добавить("Найден", Новый ОписаниеТипов("Булево"));
	АвторизованныйПользователь	= ПользователиСервер.сП_АвторизованныйПользователь();

	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Отчеты",			ВариантыОтчетовСервер.О_ЗначениеВМассив(НастройкиОтчета.ОтчетСсылка));
	ПараметрыПоиска.Вставить("ТолькоЛичные",	Истина);
	ПараметрыПоиска.Вставить("Контекст",		КонтекстВарианта);

	ТаблицаВариантов = ВариантыОтчетовСервер.ВО_ТаблицаВариантовОтчетов(ПараметрыПоиска);
	Если НастройкиОтчета.Внешний Тогда// Добавить предопределенные варианты внешнего отчета в таблицу вариантов.
		Для Каждого ЭлементСписка Из НастройкиОтчета.ПредопределенныеВарианты Цикл
			СтрокаТаблицы				= ТаблицаВариантов.Добавить();
			СтрокаТаблицы.Наименование	= ЭлементСписка.Представление;
			СтрокаТаблицы.КлючВарианта	= ЭлементСписка.Значение;
		КонецЦикла;
	КонецЕсли;
	ТаблицаВариантов.Свернуть("Ссылка, КлючВарианта, Наименование, Автор, ТолькоДляАвтора");
	ТаблицаВариантов.Сортировать("Наименование Возр, КлючВарианта Возр");

	ВариантыОтчетовСервер.О_ДобавитьВариантыКонтекста(НастройкиОтчета.ОтчетСсылка, ТаблицаВариантов, ВариантыКонтекста);

	ГраницаМеню = ВариантыФормы.Количество() - 1;
	Для Каждого СтрокаТаблицы Из ТаблицаВариантов Цикл
		Если СтрокаТаблицы.ТолькоДляАвтора = Истина И СтрокаТаблицы.Автор <> АвторизованныйПользователь Тогда
			Продолжить;
		КонецЕсли;
		Найденные = ВариантыФормы.НайтиСтроки(Новый Структура("КлючВарианта, Найден", СтрокаТаблицы.КлючВарианта, Ложь));
		Если Найденные.Количество() = 1 Тогда
			ВариантФормы		= Найденные[0];
			ВариантФормы.Найден	= Истина;

			Кнопка				= Элементы.Найти(ВариантФормы.ИмяКоманды);
			Кнопка.Видимость	= Истина;
			Кнопка.Заголовок	= СтрокаТаблицы.Наименование;
			Элементы.Переместить(Кнопка, Элементы.ГруппаВариантыОтчета);

			// Подменю Еще (Все действия).
			КнопкаЕще			= Элементы.Найти(ВариантФормы.ИмяКоманды + "Еще");
			КнопкаЕще.Видимость	= Истина;
			КнопкаЕще.Заголовок	= СтрокаТаблицы.Наименование;
			Элементы.Переместить(КнопкаЕще, Элементы.ГруппаВариантыОтчетаЕще);
		Иначе
			ГраницаМеню				= ГраницаМеню + 1;
			ВариантФормы			= ВариантыФормы.Добавить();
			ЗаполнитьЗначенияСвойств(ВариантФормы, СтрокаТаблицы);
			ВариантФормы.Найден		= Истина;
			ВариантФормы.ИмяКоманды	= "ВыбратьВариант_" + Формат(ГраницаМеню, "ЧН=0; ЧГ=");

			Команда				= Команды.Добавить(ВариантФормы.ИмяКоманды);
			Команда.Действие	= "Подключаемый_ЗагрузитьВариантОтчета";

			Кнопка				= Элементы.Добавить(ВариантФормы.ИмяКоманды, Тип("КнопкаФормы"), Элементы.ГруппаВариантыОтчета);
			Кнопка.Вид			= ВидКнопкиФормы.КнопкаКоманднойПанели;
			Кнопка.ИмяКоманды	= ВариантФормы.ИмяКоманды;
			Кнопка.Заголовок	= СтрокаТаблицы.Наименование;

			// Подменю Еще (Все действия).
			КнопкаЕще				= Элементы.Добавить(ВариантФормы.ИмяКоманды + "Еще", Тип("КнопкаФормы"), Элементы.ГруппаВариантыОтчетаЕще);
			КнопкаЕще.Вид			= ВидКнопкиФормы.КнопкаКоманднойПанели;
			КнопкаЕще.ИмяКоманды	= ВариантФормы.ИмяКоманды;
			КнопкаЕще.Заголовок		= СтрокаТаблицы.Наименование;

			ПостоянныеКоманды.Добавить(ВариантФормы.ИмяКоманды);
		КонецЕсли;

		Кнопка.Пометка					= (КлючТекущегоВарианта = СтрокаТаблицы.КлючВарианта);
		Кнопка.ТолькоВоВсехДействиях	= Ложь;

		КнопкаЕще.Пометка					= (КлючТекущегоВарианта = СтрокаТаблицы.КлючВарианта);
		КнопкаЕще.ТолькоВоВсехДействиях		= Истина;
	КонецЦикла;

	Найденные = ВариантыФормы.НайтиСтроки(Новый Структура("Найден", Ложь));
	Для Каждого ВариантФормы Из Найденные Цикл
		Кнопка				= Элементы.Найти(ВариантФормы.ИмяКоманды);
		Кнопка.Пометка		= Ложь;
		Кнопка.Видимость	= Ложь;

		// Подменю Еще (Все действия).
		КнопкаЕще			= Элементы.Найти(ВариантФормы.ИмяКоманды + "Еще");
		КнопкаЕще.Пометка	= Ложь;
		КнопкаЕще.Видимость	= Ложь;
	КонецЦикла;

	ВариантыФормы.Колонки.Удалить("Найден");
	ЗначениеВРеквизитФормы(ВариантыФормы, "ДобавленныеВарианты");
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОВариантеОтчета()
	ДополнительныеСвойства = Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("КлючВарианта",			КлючТекущегоВарианта);
	ДополнительныеСвойства.Вставить("ВариантНаименование",	ОтчетНаименованиеТекущегоВарианта);

	НастройкиОтчета.Вставить("ВариантСсылка",			Неопределено);
	НастройкиОтчета.Вставить("КлючЗамеров",				Неопределено);
	НастройкиОтчета.Вставить("ПредопределенныйСсылка",	Неопределено);
	НастройкиОтчета.Вставить("ИмяИсходногоВарианта",	Неопределено);
	НастройкиОтчета.Вставить("Пользовательский",		Ложь);
	НастройкиОтчета.Вставить("ТипОтчета",			Неопределено);

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВариантыОтчетов.Ссылка КАК ВариантСсылка,
	|	ВариантыОтчетов.Представление КАК Наименование,
	|	ВариантыОтчетов.ПредопределенныйВариант.КлючЗамеров КАК КлючЗамеров,
	|	ВариантыОтчетов.ПредопределенныйВариант КАК ПредопределенныйСсылка,
	|	ВЫБОР
	|		КОГДА ВариантыОтчетов.Пользовательский
	|			ИЛИ ВариантыОтчетов.Родитель.КлючВарианта ЕСТЬ NULL
	|		ТОГДА ВариантыОтчетов.КлючВарианта
	|		ИНАЧЕ ВариантыОтчетов.Родитель.КлючВарианта
	|	КОНЕЦ КАК ИмяИсходногоВарианта,
	|	ВариантыОтчетов.Пользовательский КАК Пользовательский,
	|	ВариантыОтчетов.ТипОтчета
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Отчет = &Отчет
	|	И ВариантыОтчетов.КлючВарианта = &КлючВарианта";

	Запрос.УстановитьПараметр("Отчет",			НастройкиОтчета.ОтчетСсылка);
	Запрос.УстановитьПараметр("КлючВарианта",	КлючТекущегоВарианта);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;

	КлючЗамеров = Выборка.КлючЗамеров;
	Если Не ЗначениеЗаполнено(КлючЗамеров) Тогда
		КлючЗамеров = БазоваяПодсистемаСервер.ОН_СократитьСтрокуКонтрольнойСуммой(НастройкиОтчета.ПолноеИмя + "." + КлючТекущегоВарианта, 135);
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(НастройкиОтчета, Выборка);

	НастройкиОтчета.КлючЗамеров				= КлючЗамеров;
	НастройкиОтчета.ИмяИсходногоВарианта	= ?(Выборка.Пользовательский, Выборка.ИмяИсходногоВарианта, КлючТекущегоВарианта);

	Если РежимРасшифровки Тогда
		ОписаниеНастроекОтчета				= ОписаниеНастроекОтчета(НастройкиОтчета);
		ОтчетНаименованиеТекущегоВарианта	= ОписаниеНастроекОтчета.Наименование;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПустойКлючВарианта()
	Возврат " - ";
КонецФункции

&НаКлиенте
Процедура ПраваПользователей(Команда)
	// Зарезервировано для новых подсистем
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьСхемуИзКонструктора(Результат)
#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
	Если ТипЗнч(Результат) <> Тип("СхемаКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;

	НастройкиОтчета.АдресСхемы = ПоместитьВоВременноеХранилище(Результат, УникальныйИдентификатор);

	Путь		= ПолучитьИмяВременногоФайла();

	ЗаписьXML	= Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(Путь, "UTF-8");
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Результат, "dataCompositionSchema", "http://v8.1c.ru/8.1/data-composition-system/schema");
	ЗаписьXML.Закрыть();

	ДвоичныеДанные = Новый ДвоичныеДанные(Путь);
	НачатьУдалениеФайлов(, Путь);

	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("СхемаКомпоновкиДанных", ДвоичныеДанные);
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ОтчетИнициализирован",  Ложь);

	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы",	Истина);
	ПараметрыЗаполнения.Вставить("КомпоновщикНастроекКД",					Отчет.КомпоновщикНастроек);
	ПараметрыЗаполнения.Вставить("ИмяСобытия",								"НастройкиПоУмолчанию");

	ОбновитьЭлементыФормыНастроек(ПараметрыЗаполнения);
#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройкиИзКонтекстногоМеню(Результат)
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	Действие				= БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(Результат, "Действие");
	ИдентификаторВладельца	= БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(Результат, "ИдентификаторВладельца");

	Если Не ВариантыОтчетовКлиент.сВО_ЭтоСобытиеКонтекстнойНастройки(Действие) Или ИдентификаторВладельца <> УникальныйИдентификатор Тогда
		Возврат;
	КонецЕсли;

	Если Не Результат.Переформировать И Результат.УчитыватьВремяФормирования Тогда
		Результат.Переформировать = (НастройкиОтчета.СвойстваРезультата.ВремяФормирования <= 5);
	КонецЕсли;

	ВсеНастройкиЗавершение(Результат, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораПоля(ВыбранноеПоле, ДополнительныеПараметры) Экспорт
	ВариантыОтчетовКлиент.сВО_ПослеВыбораПоля(ВыбранноеПоле, ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Функция ИмяТекущейОбластиЯчеек()
	Область = Элементы.ОтчетТабличныйДокумент.ТекущаяОбласть;

	Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		Возврат Область.Имя;
	КонецЕсли;

	Возврат "";
КонецФункции

&НаКлиенте
Процедура СброситьТекущуюОбласть()
#Если ВебКлиент Тогда

	ПолеДокумента	= Элементы.ОтчетТабличныйДокумент;
	Область			= ПолеДокумента.ТекущаяОбласть;

	Если Область.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		Возврат;
	КонецЕсли;

	СвойстваРезультата	= НастройкиОтчета.СвойстваРезультата; // см. ВариантыОтчетовКлиент.сВО_СвойстваРезультатаОтчета
	СвойстваЗаголовка	= СвойстваРезультата.Заголовки[Область.Имя];

	Если ТипЗнч(СвойстваЗаголовка) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	Если ОтчетТабличныйДокумент.ШиринаСтраницы > ОтчетТабличныйДокумент.ШиринаТаблицы Тогда
		ПолеДокумента.ТекущаяОбласть = ОтчетТабличныйДокумент.Область(1, ОтчетТабличныйДокумент.ШиринаТаблицы + 1);
	ИначеЕсли ОтчетТабличныйДокумент.ВысотаСтраницы > ОтчетТабличныйДокумент.ВысотаТаблицы Тогда
		ПолеДокумента.ТекущаяОбласть = ОтчетТабличныйДокумент.Область(ОтчетТабличныйДокумент.ВысотаТаблицы + 1, 1);
	КонецЕсли;
#КонецЕсли
КонецПроцедуры
